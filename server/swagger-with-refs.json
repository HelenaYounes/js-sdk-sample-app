{
  "swagger": "2.0",
  "info": {
    "version": "2",
    "title": "Procore API",
    "description": "Build software that builds the world"
  },
  "host": "api-sandbox.procore.com",
  "basePath": "\/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application\/json"
  ],
  "produces": [
    "application\/json"
  ],
  "securityDefinitions": {
    "oauth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https:\/\/api-sandbox.procore.com\/oauth\/authorize\/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=code",
      "tokenUrl": "https:\/\/api-sandbox.procore.com\/oauth\/token",
      "scopes": {
        "read:projects": "list visible projects",
        "read:companies": "list visible companies"
      }
    },
    "key": {
      "type": "apiKey",
      "in": "query",
      "name": "token"
    }
  },
  "security": [
    {
      "oauth": [
        "read:projects",
        "read:companies"
      ]
    },
    {
      "key": [

      ]
    }
  ],
  "paths": {
    "\/oauth\/authorize": {
      "x-gelato-group": "Authentication",
      "x-support-level": "Production",
      "post": {
        "summary": "Grant app authorization",
        "description": "Creates or returns an authorization code. Note that all parameters listed below are required. This endpoint\ncorresponds to the OAuth 2.0 authorization endpoint described in section 3.1 of the OAuth 2.0 RFC.\n",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "response_type",
            "in": "query",
            "description": "Response type. Value should be `code`.",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Client ID you were assigned when you registered your application.",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_secret",
            "in": "query",
            "description": "Client Secret you were assigned when you registered your application.",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "description": "Username",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "Redirect URI",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to the specified `redirect_uri`"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/oauth\/token": {
      "x-gelato-group": "Authentication",
      "x-support-level": "Production",
      "post": {
        "summary": "Get or Refresh an access token",
        "description": "Gets or refreshes an access token. Note that all parameters listed below are required. This endpoint corresponds to the token endpoint described in section 3.2 of the OAuth 2.0 RFC.\n",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "grant_type",
            "in": "query",
            "description": "Grant type. Use `authorization_code` when getting an access token, Use `refresh_token` when refreshing an access token.",
            "required": true,
            "type": "string",
            "enum": [
              "authorization_code",
              "refresh_token"
            ]
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Client ID. Required for `grant_type = authorization_code`.",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_secret",
            "in": "query",
            "description": "Client secret. Required for `grant_type = authorization_code`.",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Code. Required for `grant_type = authorization_code`.",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "Redirect URI. Required for `grant_type = authorization_code`.",
            "required": true,
            "type": "string"
          },
          {
            "name": "token_type",
            "in": "query",
            "description": "Token type. Required for `grant_type = refresh_token`.",
            "required": true,
            "type": "string"
          },
          {
            "name": "expires_in",
            "in": "query",
            "description": "Expires in. Required for `grant_type = refresh_token`.",
            "required": true,
            "type": "string"
          },
          {
            "name": "refresh_token",
            "in": "query",
            "description": "Refresh token. Required for `grant_type = refresh_token`.",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Scope. Required for `grant_type = refresh_token`.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "access_token": {
                  "type": "string",
                  "description": "Access token",
                  "example": "dbaf9757982a9e738f05d249b7b5b4a266b3a139049317c4909f2f263572c781"
                },
                "token_type": {
                  "type": "string",
                  "description": "Token type",
                  "example": "bearer"
                },
                "expires_in": {
                  "type": "integer",
                  "description": "Expires in (sec)",
                  "example": 7200
                },
                "refresh_token": {
                  "type": "string",
                  "description": "Refresh token",
                  "example": "76ba4c5c75c96f6087f58a4de10be6c00b29ea1ddc3b2022ee2016d1363e3a7c"
                },
                "scope": {
                  "type": "string",
                  "description": "Scope",
                  "example": "public"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/oauth\/token\/info": {
      "x-gelato-group": "Authentication",
      "x-support-level": "Production",
      "post": {
        "summary": "Get token info",
        "description": "Returns details for the access token used for authentication.\n",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "resource_owner_id": {
                  "type": "integer",
                  "description": "Resource owner ID",
                  "example": 1
                },
                "scopes": {
                  "type": "array",
                  "description": "Scopes",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "public"
                  ]
                },
                "expires_in_seconds": {
                  "type": "integer",
                  "description": "Expires in (sec)",
                  "example": 7178
                },
                "application": {
                  "type": "object",
                  "description": "Application information",
                  "properties": {
                    "uid": {
                      "type": "integer",
                      "example": 15136
                    }
                  }
                },
                "created_at": {
                  "type": "integer",
                  "description": "Created at",
                  "example": 1440460991
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/standard_cost_code_lists": {
      "x-gelato-group": "Cost Codes",
      "x-support-level": "Production",
      "get": {
        "summary": "List Standard Cost Code Lists",
        "description": "Return a list of all Standard Cost Code Lists at the Company level.\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Standard Cost Code Lists",
              "items": {
                "$ref": "#\/definitions\/StandardCostCodeList"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Standard Cost Code List",
        "description": "Create a new Standard Cost Code List at the Company level\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/StandardCostCodeListBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/StandardCostCodeList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/standard_cost_code_lists\/{id}": {
      "x-gelato-group": "Cost Codes",
      "x-support-level": "Production",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Standard Cost Code List",
        "description": "Return detailed information on a Standard Cost Code List at the Company level\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/StandardCostCodeList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/standard_cost_codes": {
      "x-gelato-group": "Cost Codes",
      "x-support-level": "Production",
      "get": {
        "summary": "List Standard Cost Codes",
        "description": "Return a list of all Standard Cost Codes in a specified Standard Cost Code list.\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "standard_cost_code_list_id",
            "in": "query",
            "description": "Standard Cost Code List ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Standard Cost Codes",
              "items": {
                "$ref": "#\/definitions\/StandardCostCode"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Standard Cost Code",
        "description": "Create a new Standard Cost Code\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/StandardCostCodeBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/StandardCostCode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/standard_cost_codes\/{id}": {
      "x-gelato-group": "Cost Codes",
      "x-support-level": "Production",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Standard Cost Code",
        "description": "Return information about a Standard Cost Code from a specified Standard Cost Code list.\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "standard_cost_code_list_id",
            "in": "query",
            "description": "The ID of the Standard Cost Code List",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/StandardCostCode"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/me": {
      "x-support-level": "Production",
      "x-gelato-group": "Me",
      "get": {
        "summary": "Show user info",
        "tags": [
          "Me",
          "User"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Me"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/images": {
      "x-support-level": "Production",
      "x-gelato-group": "Images",
      "get": {
        "summary": "List images",
        "description": "Return a list of all Images from a Project's Photo Album (Image Category).\n\n**Note:** Sorting is supported by this endpoint using the following syntax:\n\n`\/vapid\/images\/?sort=<field1, field2, ...>`\n\nYou can use `-sort` to specify a descending sort order.\n",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "image_category_id",
            "in": "query",
            "description": "ID of the image category",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterPrivate"
          },
          {
            "$ref": "#\/parameters\/FilterStarred"
          },
          {
            "$ref": "#\/parameters\/FilterLocationId"
          },
          {
            "$ref": "#\/parameters\/FilterQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of images",
              "items": {
                "$ref": "#\/definitions\/ImageIndex"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create image",
        "description": "Upload and add a new Image to a Project's Photo Album (Image Category).\n",
        "tags": [
          "Images"
        ],
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "name": "project_id",
            "type": "integer",
            "in": "query",
            "required": true,
            "description": "Project ID"
          },
          {
            "$ref": "#\/parameters\/ImageCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Image"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/images\/most_recent": {
      "get": {
        "summary": "List most recent images",
        "description": "Return a list of all recently updated Images from a Project\\'s Photo Album (Image Category).\n",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Amount of most recent images to retrieve",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "description": "Array of images",
              "items": {
                "$ref": "#\/definitions\/ImageIndex"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/images\/grouped": {
      "get": {
        "summary": "List images grouped by day\/week\/month",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "group",
            "in": "query",
            "description": "How you want images to be grouped. Accepted values are day\/week\/month",
            "required": true,
            "type": "string"
          },
          {
            "name": "image_category_id",
            "in": "query",
            "description": "ID of the image category. Only passed in if you want to group within an Image Category",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "description": "Array of groups of images",
              "items": {
                "$ref": "#\/definitions\/ImageGrouped"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/images\/recycle_bin": {
      "get": {
        "summary": "List images that have been deleted",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "description": "Array of images",
              "items": {
                "$ref": "#\/definitions\/ImageIndex"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/images\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Images",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the image",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show image",
        "description": "Show detailed information for a specified Image in a Project's Photo Album (Image Category).\n",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "image_category_id",
            "in": "query",
            "description": "ID of the image category",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Image"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update image",
        "description": "Update an existing Image in a Project's Photo Album (Image Category).\n",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "name": "project_id",
            "type": "integer",
            "in": "query",
            "required": true,
            "description": "Project ID"
          },
          {
            "name": "image_category_id",
            "in": "query",
            "description": "ID of the image category",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/ImageUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Image"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete image",
        "description": "Remove an Image from a Photo Album (Image Category).\n",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "image_category_id",
            "in": "query",
            "description": "ID of the image category",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/images\/{id}\/retrieve": {
      "patch": {
        "summary": "Retrieve deleted image",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the image",
            "required": true,
            "type": "integer"
          },
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Image"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/image_categories": {
      "x-support-level": "Production",
      "x-gelato-group": "Image Categories",
      "get": {
        "summary": "List image categories",
        "description": "Return a list of all Photo Albums (Image Categories) in a specified project.\n",
        "tags": [
          "Image Categories"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of image categories",
              "items": {
                "$ref": "#\/definitions\/ImageCategoryIndex"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create image category",
        "description": "Create a new Photo Album (Category) for Images.\n",
        "tags": [
          "Image Categories"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/ImageCategoryBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ImageCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/image_categories\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Image Categories",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the image category",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show image category",
        "description": "Return detail information about the specified Photo Album (Image Category).\n",
        "tags": [
          "Image Categories"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ImageCategory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update image category",
        "description": "Update a Photo Album (Image Category) in a specified Project.\n",
        "tags": [
          "Image Categories"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/ImageCategoryBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ImageCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete image category",
        "description": "Delete a Photo Album (Image Category) from a specified Project.\n",
        "tags": [
          "Image Categories"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects": {
      "x-support-level": "Production",
      "x-gelato-group": "Projects",
      "get": {
        "summary": "List projects",
        "description": "Returns a list of active Projects.\n",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "type": "integer",
            "description": "The ID of the company",
            "required": true
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterProjectByStatus"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of projects",
              "items": {
                "$ref": "#\/definitions\/ProjectIndex"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create project",
        "description": "Create a new Project in a Procore account. New Project is active by default.\n",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Project"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/sync": {
      "x-support-level": "Production",
      "x-gelato-group": "Projects",
      "patch": {
        "summary": "Sync projects",
        "description": "This endpoint creates or updates a batch of Projects.\n",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "type": "integer",
            "description": "The ID of the company",
            "required": true
          },
          {
            "$ref": "#\/parameters\/ProjectSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of projects",
            "schema": {
              "title": "arrayOfProjects",
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/Project"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ProjectSyncError"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Projects",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show project",
        "description": "Show details of the specified Project in Procore.\n",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "type": "integer",
            "description": "The ID of the company",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Project"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update project",
        "description": "Update an existing Project\\'s information.\n",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Project"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/departments": {
      "x-support-level": "Production",
      "x-gelato-group": "Departments",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List Departments",
        "description": "Return a list of Departments.\n",
        "tags": [
          "Departments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Departments",
              "items": {
                "$ref": "#\/definitions\/Department"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Department",
        "description": "Create a new Department.\n",
        "tags": [
          "Departments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DepartmentBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Department"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "422": {
            "description": "Error creating Department",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/departments\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Departments",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Department ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Department",
        "description": "Return details for a Department.\n",
        "tags": [
          "Departments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Department"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Department not found",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Department",
        "description": "Update a Department.\n",
        "tags": [
          "Departments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DepartmentBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Department"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Department not found",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "422": {
            "description": "Error updating Department",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Department",
        "description": "Delete a Department.\n",
        "tags": [
          "Departments"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Department not found",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/programs": {
      "x-support-level": "Production",
      "x-gelato-group": "Programs",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List programs",
        "description": "Return a list of Programs associated to the specified Company.\n",
        "tags": [
          "Programs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of programs",
              "items": {
                "$ref": "#\/definitions\/ProgramIndex"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create program",
        "description": "Create a new Program in the specified Company.\n",
        "tags": [
          "Programs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProgramBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Program"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/programs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Programs",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the program",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show program",
        "description": "Show detail on the specified Program.\n",
        "tags": [
          "Programs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Program"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update program",
        "description": "Update the specified Program.\n",
        "tags": [
          "Programs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProgramBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Program"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete program",
        "description": "Delete the specified Program.\n",
        "tags": [
          "Programs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/project_roles": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Roles",
      "get": {
        "summary": "List Project Roles",
        "description": "Return a list of all defined Project Roles in a specified Project.\n",
        "tags": [
          "Project Roles"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Project Roles",
              "items": {
                "$ref": "#\/definitions\/ProjectRole"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/project_dates": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Dates",
      "get": {
        "summary": "List Project Dates",
        "description": "Returns a list of Project Dates.\n",
        "tags": [
          "Project Dates"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "$ref": "#\/definitions\/ProjectDatesIndex"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/project_stages": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Stages",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List Project Stages",
        "description": "Return a list of Project Stages.\n",
        "tags": [
          "Project Stages"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Project Stages",
              "items": {
                "$ref": "#\/definitions\/ProjectStage"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create project stage",
        "description": "Create a new Project Stage in the specified Company.\n",
        "tags": [
          "Project Stages"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectStageBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ProjectStage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/project_stages\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Stages",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the project stage",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show project stage",
        "description": "Show detail on a specified Project Stage.\n",
        "tags": [
          "Project Stages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ProjectStage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update project stage",
        "description": "Update the specified Project Stage.\n",
        "tags": [
          "Project Stages"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectStageBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ProjectStage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete project stage",
        "description": "Delete the specified Project Stage.\n",
        "tags": [
          "Project Stages"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/project_templates": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Templates",
      "get": {
        "summary": "List Project Templates",
        "description": "Return a list of Project Templates that are available to utilize for Project creation.\n",
        "tags": [
          "Project Templates"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "ID of the company",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Project Templates",
              "items": {
                "$ref": "#\/definitions\/ProjectTemplate"
              },
              "example": [
                {
                  "id": 101,
                  "name": "Procore Project"
                },
                {
                  "id": 102,
                  "name": "Another Project"
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/project_types": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Types",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List project types",
        "description": "Returns a list of Project Types associated with a specified Company.\n",
        "tags": [
          "Project Types"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Project Types",
              "items": {
                "$ref": "#\/definitions\/ProjectType"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create project type",
        "description": "Create a new Project Type associated with a specific Company.\n",
        "tags": [
          "Project Types"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectTypeBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ProjectType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/project_types\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Types",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the project type",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show project type",
        "description": "Show detail on the specified Project Type.\n",
        "tags": [
          "Project Types"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ProjectType"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update project type",
        "description": "Update a Project Type.\n",
        "tags": [
          "Project Types"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectTypeBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ProjectType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete project type",
        "description": "Delete the specified Project Type.\n",
        "tags": [
          "Project Types"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/locations": {
      "x-support-level": "Production",
      "x-gelato-group": "Locations",
      "get": {
        "summary": "List locations",
        "description": "Return a list of Locations associated with a Project.\n",
        "tags": [
          "Locations"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of locations",
              "items": {
                "$ref": "#\/definitions\/Location"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create location",
        "description": "Create a new Location for the specified Project.\n",
        "tags": [
          "Locations"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/LocationCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Location"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/locations\/{id}": {
      "x-gelato-group": "Locations",
      "x-support-level": "Production",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the location",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show location",
        "description": "Show detail on the specified Location.\n",
        "tags": [
          "Locations"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Location"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update location",
        "description": "Update the specified Location.\n",
        "tags": [
          "Locations"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/LocationUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Location"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete location",
        "description": "Delete the specified Location.\n",
        "tags": [
          "Locations"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/markup_attachments": {
      "x-support-level": "Production",
      "x-gelato-group": "Markup Attachments",
      "post": {
        "summary": "Create Markup Attachment",
        "description": "Create a new Markup Attachment for the specified Project, Holder, Markup Layer, and Markup Layer Element.\n",
        "tags": [
          "Markup Attachments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/MarkupAttachmentBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/MarkupAttachment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/markup_attachments\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Markup Attachments",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Markup Attachment",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "summary": "Update Markup Attachment",
        "description": "Update the Markup Attachment.\n",
        "tags": [
          "Markup Attachments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/MarkupAttachmentBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/MarkupAttachment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Markup Attachments"
        ],
        "summary": "Delete Markup Attachment",
        "description": "Delete the Markup Attachment\n",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/markup_layers": {
      "x-support-level": "Production",
      "x-gelato-group": "Markup Layers",
      "get": {
        "summary": "List Markup Layers",
        "description": "List the Markup Layers for a Project and Holder",
        "tags": [
          "Markup Layers"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "ID of the Company",
            "required": true,
            "type": "integer"
          },
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "holder_type",
            "in": "query",
            "description": "Type of the Holder",
            "required": true,
            "type": "string",
            "enum": [
              "DrawingRevision"
            ]
          },
          {
            "name": "holder_id",
            "in": "query",
            "description": "ID of the Holder",
            "required": true,
            "type": "integer"
          },
          {
            "name": "public_only",
            "in": "query",
            "description": "If supplied list only public Markup Layers",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "description": "Array of Markup Layers",
              "items": {
                "$ref": "#\/definitions\/MarkupLayer"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/markup_layer_elements": {
      "x-support-level": "Production",
      "x-gelato-group": "Markup Layer Elements",
      "post": {
        "summary": "Create Markup Layer Element",
        "description": "Create a new Markup Layer Element for the specified Project, Holder, and Markup Layer. Optionally include one or more Markup Attachments.\n",
        "tags": [
          "Markup Layer Elements"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/MarkupLayerElementBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/MarkupLayerElement"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/markup_layer_elements\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Markup Layer Elements",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Markup Layer Element",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "summary": "Update Markup Layer Element",
        "description": "Update the Markup Layer Element.\n",
        "tags": [
          "Markup Layer Elements"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/MarkupLayerElementBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/MarkupLayerElement"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Markup Layer Elements"
        ],
        "summary": "Delete Markup Layer Element",
        "description": "Delete the Markup Layer Element\n",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/markup_layer_elements\/{id}\/publish": {
      "x-support-level": "Production",
      "x-gelato-group": "Markup Layer Elements",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Markup Layer Element",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "summary": "Send Publish Markup Layer Element",
        "description": "Publish the Markup Layer Element.\n",
        "tags": [
          "Markup Layer Elements"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/trades": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Trades",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List trades",
        "description": "Return a list of all Trades associated with a Company.\n",
        "tags": [
          "Trades"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of trades",
              "items": {
                "$ref": "#\/definitions\/Trade"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/insurances": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Insurances",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "Company ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List Company Insurances",
        "description": "Return a list of all Insurances associated with the specified Company.\n",
        "tags": [
          "Company Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of company insurances",
              "items": {
                "$ref": "#\/definitions\/Insurance"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Company Insurance",
        "description": "Create a new Insurance associated with the specified Company.\n",
        "tags": [
          "Company Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/InsuranceBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/insurances\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Insurances",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "Company ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Company Insurance",
        "description": "Return detailed information on the specified Insurance.\n",
        "tags": [
          "Company Insurances"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Company Insurance",
        "description": "Update the specified Insurance.\n",
        "tags": [
          "Company Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/InsuranceBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Company Insurance",
        "description": "Delete the specified Insurance.\n",
        "tags": [
          "Company Insurances"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/vendors\/{vendor_id}\/insurances": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Vendor Insurances",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "Company ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "vendor_id",
          "in": "path",
          "description": "Vendor ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List company vendor insurances",
        "description": "Return a list of Insurances from the specified Company Vendor.\n",
        "tags": [
          "Company Vendor Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of company vendor insurances",
              "items": {
                "$ref": "#\/definitions\/Insurance"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create company vendor insurance",
        "description": "Create a new Insurance associated with the specified Company Vendor.\n",
        "tags": [
          "Company Vendor Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/VendorInsuranceBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/vendors\/{vendor_id}\/insurances\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Vendor Insurances",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "Company ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "vendor_id",
          "in": "path",
          "description": "Vendor ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show company vendor insurance",
        "description": "Show detail on the specified Company Vendor Insurance.\n",
        "tags": [
          "Company Vendor Insurances"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update company vendor insurance",
        "description": "Update the specified Company Vendor Insurance.\n",
        "tags": [
          "Company Vendor Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/VendorInsuranceBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete company vendor insurance",
        "description": "Delete the specified Company Vendor Insurance.\n",
        "tags": [
          "Company Vendor Insurances"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/insurances": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Insurances",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "Project ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List project insurances",
        "description": "Return a list of all Insurances associated with the specified Project.\n",
        "tags": [
          "Project Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of project insurances",
              "items": {
                "$ref": "#\/definitions\/Insurance"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create project insurance",
        "description": "Create a new Insurance associated with the specified Project.\n",
        "tags": [
          "Project Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/InsuranceBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/insurances\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Insurances",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "Project ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show project insurance",
        "description": "Return detailed information on the specified Insurance.\n",
        "tags": [
          "Project Insurances"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update project insurance",
        "description": "Update the specified Insurance.\n",
        "tags": [
          "Project Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/InsuranceBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete project insurance",
        "description": "Delete the specified Insurance.\n",
        "tags": [
          "Project Insurances"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/vendors\/{vendor_id}\/insurances": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Vendor Insurances",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "Project ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "vendor_id",
          "in": "path",
          "description": "Vendor ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List project vendor insurances",
        "description": "Return a list of Insurances from the specified Project Vendor.\n",
        "tags": [
          "Project Vendor Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of project vendor insurances",
              "items": {
                "$ref": "#\/definitions\/Insurance"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create project vendor insurance",
        "description": "Create a new Insurance associated with the specified Project Vendor.\n",
        "tags": [
          "Project Vendor Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/VendorInsuranceBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/vendors\/{vendor_id}\/insurances\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Vendor Insurances",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "Project ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "vendor_id",
          "in": "path",
          "description": "Vendor ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show project vendor insurance",
        "description": "Show detail on the specified Project Vendor Insurance.\n",
        "tags": [
          "Project Vendor Insurances"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update project vendor insurance",
        "description": "Update the specified Project Vendor Insurance.\n",
        "tags": [
          "Project Vendor Insurances"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/VendorInsuranceBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Insurance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete project vendor insurance",
        "description": "Delete the specified Project Vendor Insurance.\n",
        "tags": [
          "Project Vendor Insurances"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/drawing_areas\/{drawing_area_id}\/drawings": {
      "x-support-level": "Production",
      "x-gelato-group": "Drawings",
      "parameters": [
        {
          "name": "drawing_area_id",
          "in": "path",
          "type": "integer",
          "description": "ID of the drawing area",
          "required": true
        }
      ],
      "get": {
        "summary": "List drawings",
        "description": "Returns a list of all Drawings for a specified drawing area.\n",
        "tags": [
          "Drawings"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of drawings",
              "items": {
                "$ref": "#\/definitions\/Drawing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/drawing_areas": {
      "x-support-level": "Production",
      "x-gelato-group": "Drawings",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List drawing areas",
        "description": "Returns a list of all Drawing Areas in the specified Project.\n",
        "tags": [
          "Drawings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of drawing areas",
              "items": {
                "$ref": "#\/definitions\/DrawingArea"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create drawing area",
        "description": "Create a new Drawing Area in the specified Project.\n",
        "tags": [
          "Drawings"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "Body",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Drawing Area name"
                }
              },
              "example": {
                "name": "My new drawing area"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "description": "Created drawing area",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Drawing Area ID"
                },
                "name": {
                  "type": "string",
                  "description": "Drawing Area name"
                }
              },
              "example": {
                "id": 114483,
                "name": "My new drawing area"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/drawing_revisions": {
      "x-support-level": "Production",
      "x-gelato-group": "Drawings",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List drawing revisions",
        "description": "Returns a list of all Drawing Revisions in the specified Project.\n",
        "tags": [
          "Drawings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "name": "drawing_area_id",
            "in": "query",
            "type": "integer",
            "description": "Filter by Drawing Area"
          },
          {
            "name": "drawing_set_id",
            "in": "query",
            "type": "integer",
            "description": "Filter by Drawing Set.\nTo retreive revisions from current set add `drawing_set_id=current_set` to query\n"
          },
          {
            "name": "drawing_id",
            "in": "query",
            "type": "integer",
            "description": "Filter by Drawing"
          },
          {
            "name": "is_reviewed",
            "in": "query",
            "type": "boolean",
            "description": "Filter by `reviewed` status"
          },
          {
            "name": "drawing_discipline_id",
            "in": "query",
            "type": "integer",
            "description": "Filter by Drawing Discipline"
          },
          {
            "name": "query",
            "in": "query",
            "type": "string",
            "description": "Filter by custom query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of drawing revisions",
              "items": {
                "$ref": "#\/definitions\/DrawingRevision"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/drawing_revisions\/{drawing_revision_id}\/drawing_tiles": {
      "x-support-level": "Production",
      "x-gelato-group": "Drawings",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        },
        {
          "name": "drawing_revision_id",
          "in": "path",
          "description": "ID of the drawing revision",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List drawing tiles",
        "description": "Lists the Drawing Tiles in the specified Drawing Revision along with the maximum Zoom Level and Tile Size.\n",
        "tags": [
          "Drawings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "max_zoom_level": {
                  "type": "integer",
                  "description": "Max zoom level",
                  "example": 2
                },
                "tile_size": {
                  "type": "array",
                  "description": "Array of tile width and height",
                  "items": {
                    "type": "integer"
                  },
                  "example": [
                    750,
                    750
                  ]
                },
                "zip_url": {
                  "type": "string",
                  "description": "ZIP url",
                  "example": "https:\/\/streaming.procoretech.com\/download?uuid=03bb9d61702ce533caef169d4370b98f7f7e407f71a0af72f8a593de469aae92"
                },
                "tiles": {
                  "type": "array",
                  "description": "Array of drawing tiles",
                  "items": {
                    "$ref": "#\/definitions\/DrawingTile"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/drawing_uploads": {
      "x-support-level": "Production",
      "x-gelato-group": "Drawings",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List drawing uploads",
        "description": "Returns a list of all Drawing Uploads in the specified Project.\n",
        "tags": [
          "Drawings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of drawing uploads",
              "items": {
                "$ref": "#\/definitions\/DrawingUpload"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create drawing upload",
        "description": "Create a new Drawing Upload in the specified project.\n\nIt creates one `DrawingUpload`, which includes a `DrawingLogImport` and a `ProstoreFile`\nfor each file uploaded. Sidekiq then sends them to the image processing server.\n",
        "tags": [
          "Drawings"
        ],
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "name": "files[]",
            "type": "file",
            "in": "formData",
            "description": "One or more files in PDF format to include in the upload",
            "required": true
          },
          {
            "name": "drawing_set_id",
            "type": "integer",
            "in": "formData",
            "description": "Drawing Set ID",
            "required": true
          },
          {
            "name": "drawing_area_id",
            "type": "integer",
            "in": "formData",
            "description": "Drawing Area ID"
          },
          {
            "name": "drawing_number_contains_revision",
            "type": "boolean",
            "in": "formData",
            "description": "Drawing number contains revision status"
          },
          {
            "name": "drawing_date",
            "type": "string",
            "format": "date",
            "in": "formData",
            "description": "Drawing date"
          },
          {
            "name": "received_date",
            "type": "string",
            "format": "date",
            "in": "formData",
            "description": "Received date"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/DrawingUpload"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/drawing_uploads\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Drawings",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the drawing upload",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "summary": "Delete drawing upload",
        "description": "Delete an unreviewed Drawing Upload.\n",
        "tags": [
          "Drawings"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/drawing_sets": {
      "x-support-level": "Production",
      "x-gelato-group": "Drawings",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List drawing sets",
        "description": "Lists the Drawing Sets in the specified Project.\n",
        "tags": [
          "Drawings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of drawing sets",
              "items": {
                "$ref": "#\/definitions\/DrawingSet"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create drawing set",
        "description": "Create a new Drawing Set in the specified Project.\n",
        "tags": [
          "Drawings"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Drawing Set name"
                },
                "date": {
                  "type": "string",
                  "format": "date",
                  "description": "Drawing Set date"
                }
              },
              "example": {
                "name": "another new drawing set",
                "date": "2016-08-31"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/DrawingSet"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/drawing_sets\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Drawings",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the drawing set",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "summary": "Delete drawing set",
        "description": "Delete a specified Drawing Set.\n",
        "tags": [
          "Drawings"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/prime_contract": {
      "x-support-level": "Production",
      "x-gelato-group": "Prime Contracts",
      "get": {
        "summary": "List the Prime Contract",
        "description": "Returns the Prime Contract for the specified Project.\n",
        "tags": [
          "Prime Contracts"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PrimeContract"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Prime Contract",
        "description": "Create a new Prime Contract.\n",
        "tags": [
          "Prime Contracts"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PrimeContractBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/PrimeContract"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/prime_contract\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Prime Contracts",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Prime Contract",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Prime Contract",
        "description": "Show the details of a Project's Prime Contract.\n",
        "tags": [
          "Prime Contracts"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PrimeContract"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Prime Contract",
        "description": "Update the specified Prime Contract.\n",
        "tags": [
          "Prime Contracts"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PrimeContractBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PrimeContract"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Prime Contract",
        "description": "Delete the specified Prime Contract.\n",
        "tags": [
          "Prime Contracts"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/equipment": {
      "x-support-level": "Production",
      "x-gelato-group": "Equipment",
      "get": {
        "summary": "List equipment",
        "description": "Return a list of all Project Equipment.\n",
        "tags": [
          "Equipment"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of equipment",
              "items": {
                "$ref": "#\/definitions\/EquipmentIndex"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/direct_costs": {
      "x-support-level": "Production",
      "x-gelato-group": "Direct Costs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "summary": "List Direct Cost Items",
        "description": "Returns a list of all Direct Cost Items for a Project.\n",
        "tags": [
          "Direct Costs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterId"
          },
          {
            "$ref": "#\/parameters\/FilterOriginId"
          },
          {
            "$ref": "#\/parameters\/FilterInvoiceNumber"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterPaymentDate"
          },
          {
            "$ref": "#\/parameters\/FilterReceivedDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "description": "Array of direct costs items",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/DirectCostItemIndex"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Direct Cost Item",
        "description": "Create a new Direct Cost Item in the specified Project.\n",
        "tags": [
          "Direct Costs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DirectCostItemCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/DirectCostItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/direct_costs\/sync": {
      "x-support-level": "Production",
      "x-gelato-group": "Direct Costs",
      "patch": {
        "summary": "Sync Direct Cost Items",
        "description": "This endpoint creates or updates a batch of Direct Cost Items.\n",
        "tags": [
          "Direct Costs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "type": "integer",
            "description": "Project ID",
            "required": true
          },
          {
            "$ref": "#\/parameters\/DirectCostItemSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Direct Cost Items",
            "schema": {
              "title": "arrayOfDirectCostItems",
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/DirectCostItem"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/DirectCostItemSyncError"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/direct_costs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Direct Costs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "ID",
          "required": true
        }
      ],
      "get": {
        "summary": "Show Direct Cost Item",
        "description": "Show detail on specified Direct Cost Item.\n",
        "tags": [
          "Direct Costs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DirectCostItem"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Direct Cost Item",
        "description": "Update a specific Direct Cost Item.\n",
        "tags": [
          "Direct Costs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DirectCostItemUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DirectCostItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/direct_costs\/{direct_cost_id}\/line_items": {
      "x-support-level": "Production",
      "x-gelato-group": "Direct Costs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "direct_cost_id",
          "in": "path",
          "type": "integer",
          "description": "ID",
          "required": true
        }
      ],
      "get": {
        "summary": "List Direct Cost Line Items",
        "description": "Return a list of all Direct Cost Line Items.\n",
        "tags": [
          "Direct Costs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterId"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterCostCodeId"
          },
          {
            "$ref": "#\/parameters\/FilterLineItemTypeId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "description": "Array of Direct Cost Line Items",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/LineItem"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Direct Cost Line Item",
        "description": "Create a new Direct Cost Line Item.\n",
        "tags": [
          "Direct Costs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DirectCostLineItemBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/LineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/direct_costs\/line_items\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Direct Costs",
      "patch": {
        "summary": "Sync Direct Cost Line Items",
        "description": "Creates or updates a batch of Direct Cost Line Items.\n",
        "tags": [
          "Direct Costs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "type": "integer",
            "description": "Project ID",
            "required": true
          },
          {
            "$ref": "#\/parameters\/DirectCostLineItemSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Direct Cost Line Items",
            "schema": {
              "title": "arrayOfDirectCostLineItems",
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/LineItem"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/DirectCostLineItemSyncError"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/direct_costs\/{direct_cost_id}\/line_items\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Direct Costs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "direct_cost_id",
          "in": "path",
          "type": "integer",
          "description": "ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Direct Cost Line Item ID",
          "required": true
        }
      ],
      "get": {
        "summary": "Show Direct Cost Line Item",
        "description": "Returns detailed information on a Direct Cost Line Item.\n",
        "tags": [
          "Direct Costs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/LineItem"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Direct Cost Line Item",
        "description": "Update a Direct Cost Line Item.\n",
        "tags": [
          "Direct Costs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DirectCostLineItemBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/LineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Direct Cost Line Item",
        "description": "Delete a specified Direct Cost Line Item.\n",
        "tags": [
          "Direct Costs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/line_item_types": {
      "x-support-level": "Production",
      "x-gelato-group": "Line Item Types",
      "get": {
        "summary": "List Line Item Types",
        "description": "Return a list of all defined Line Item Types.\n",
        "tags": [
          "Line Item Types"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Line Item Types",
              "items": {
                "$ref": "#\/definitions\/LineItemType"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Line Item Type",
        "description": "Create a new Line Item Type (e.g. L2 for Labor).\n",
        "tags": [
          "Line Item Types"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/LineItemTypeBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/LineItemType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/line_item_types\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Line Item Types",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Line Item Type",
        "description": "Return detailed information a specified Line Item Type.\n",
        "tags": [
          "Line Item Types"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/LineItemType"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Line Item Type",
        "description": "Update a Line Item Type.\n",
        "tags": [
          "Line Item Types"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/LineItemTypeBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/LineItemType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/commitments\/{commitment_id}\/draw_requests": {
      "x-support-level": "Production",
      "x-gelato-group": "Draw Requests",
      "parameters": [
        {
          "name": "commitment_id",
          "in": "path",
          "description": "ID of the Commitment",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List Draw Requests for Commitment",
        "description": "Return a list of all Draw Requests on a specified Commitment.\n",
        "tags": [
          "Draw Requests"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Draw Requests",
              "items": {
                "$ref": "#\/definitions\/DrawRequestCompact"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Draw Request for Commitment",
        "description": "Create a new Draw Request for the specified Commitment.\n",
        "tags": [
          "Draw Requests"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DrawRequestBody"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DrawRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/commitments\/{commitment_id}\/draw_requests\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Draw Requests",
      "parameters": [
        {
          "name": "commitment_id",
          "in": "path",
          "description": "ID of the Commitment",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Draw Request",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Draw Request for Commitment",
        "description": "Return a Draw Request on a specified Commitment.\n",
        "tags": [
          "Draw Requests"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DrawRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/commitments\/{commitment_id}\/draw_requests\/{draw_request_id}\/contract_items\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Draw Requests",
      "patch": {
        "summary": "Update a Draw Request Contract Line Item",
        "description": "Updates a Contract Line Item in a specified Draw Request.\n",
        "tags": [
          "Draw Requests"
        ],
        "parameters": [
          {
            "name": "commitment_id",
            "in": "path",
            "description": "Commitment ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "draw_request_id",
            "in": "path",
            "description": "Draw Request ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of Draw Request Contract Line Item",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/DrawRequestContractItemBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DrawRequestContractItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/draw_requests": {
      "x-support-level": "Production",
      "x-gelato-group": "Draw Requests",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List Draw Requests for Project",
        "description": "Return a list of all Draw Requests on the specified Project.\n",
        "tags": [
          "Draw Requests"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Draw Requests",
              "items": {
                "$ref": "#\/definitions\/DrawRequestCompact"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/draw_requests\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Draw Requests",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the Project",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Draw Request",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Draw Request for Project",
        "description": "Return detailed information for a Draw Request on a specified Project.\n",
        "tags": [
          "Draw Requests"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DrawRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/offices": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Offices",
      "get": {
        "summary": "List company offices",
        "description": "This endpoint returns a collection of Offices associated to a Company\n",
        "tags": [
          "Company Offices"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "ID of the company",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of offices",
              "items": {
                "$ref": "#\/definitions\/Office"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create company office",
        "description": "This endpoint creates an Office associated to a Company.\n\n#### Country and State codes\n\nFor company and state codes used Carmen Gem: https:\/\/github.com\/jim\/carmen\n",
        "tags": [
          "Company Offices"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/OfficeBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Office"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/offices\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Offices",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the office",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "summary": "Update company office",
        "description": "This endpoint updates an Office associated to a Company.\n\n#### Country and State codes\n\nFor company and state codes used Carmen Gem: https:\/\/github.com\/jim\/carmen\n",
        "tags": [
          "Company Offices"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/OfficeBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Office"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/contract_payments": {
      "x-support-level": "Production",
      "x-gelato-group": "Contract Payments",
      "get": {
        "summary": "List Contract Payments",
        "description": "Return a list of Contract Payments.\n",
        "tags": [
          "Contract Payments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "ID of the Contract",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Contract Payments",
              "items": {
                "$ref": "#\/definitions\/ContractPayment"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Contract Payment",
        "description": "Create a new Contract Payment.\n",
        "tags": [
          "Contract Payments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ContractPaymentBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ContractPayment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/contract_payments\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Contract Payments",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Contract Payment",
        "description": "Return detailed information on the specified Contract Payment.\n",
        "tags": [
          "Contract Payments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "ID of the Contract",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ContractPayment"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Contract Payment",
        "description": "Update Contract Payment.\n",
        "tags": [
          "Contract Payments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ContractPaymentBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ContractPayment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Contract Payment",
        "description": "Deletes a specified Contract Payment.\n",
        "tags": [
          "Contract Payments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "ID of the Contract",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/cost_codes": {
      "x-support-level": "Production",
      "x-gelato-group": "Cost Codes",
      "get": {
        "summary": "List Cost Codes",
        "description": "Return a list of Cost Codes.\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "sub_job_id",
            "in": "query",
            "description": "Sub Job ID",
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of cost codes",
              "items": {
                "$ref": "#\/definitions\/CostCode"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Cost Code",
        "description": "Create a new Cost Code.\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/CostCodeBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/CostCode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/cost_codes\/copy_from_standard_list": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Cost Codes",
      "post": {
        "summary": "Copy from Standard Cost Code List",
        "description": "Copy Cost Codes from Standard Cost Code List.\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "Body",
              "type": "object",
              "required": [
                "project_id",
                "standard_cost_code_list_id"
              ],
              "properties": {
                "project_id": {
                  "type": "integer",
                  "description": "Project ID"
                },
                "sub_job_id": {
                  "type": "integer",
                  "description": "Sub Job ID"
                },
                "standard_cost_code_list_id": {
                  "type": "integer",
                  "description": "Standard Cost Code List ID"
                }
              },
              "example": {
                "project_id": 1351,
                "standard_cost_code_list_id": 242
              }
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Copied successfully, see \/vapid\/cost_codes for the result.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/cost_codes\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Cost Codes",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Cost Code",
        "description": "Return details on a specific Cost Code.\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "sub_job_id",
            "in": "query",
            "description": "Sub Job ID",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CostCode"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Cost Code",
        "description": "Update a specific Cost Code.\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/CostCodeBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CostCode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/cost_codes\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Cost Codes",
      "patch": {
        "summary": "Sync Cost Codes",
        "description": "This endpoint creates or updates a batch of Cost Codes.\n",
        "tags": [
          "Cost Codes"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "Project ID",
            "required": true
          },
          {
            "$ref": "#\/parameters\/CostCodeSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Cost Codes",
            "schema": {
              "title": "arrayOfCostCodes",
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/CostCode"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/CostCodeSyncError"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies": {
      "x-support-level": "Production",
      "x-gelato-group": "Companies",
      "get": {
        "summary": "List Companies",
        "description": "Return a list of Companies visible by User.\n",
        "tags": [
          "Companies"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "title": "arrayOfCompanies",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/Company"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Companies",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "id of the company",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "Show Company",
        "description": "Return the details on a specific Company.\n",
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CompanyFull"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Company",
        "description": "Update specific Company.\n",
        "tags": [
          "Companies"
        ],
        "consumes": [
          "application\/json",
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "name": "company[name]",
            "in": "formData",
            "type": "string",
            "description": "Company name"
          },
          {
            "name": "company[company_type]",
            "in": "formData",
            "type": "string",
            "enum": [
              "general_contractor",
              "heavy_highway_civil",
              "owner",
              "professional_services",
              "subcontractor",
              "real_estate_developer",
              "engineer",
              "architect",
              "consultant",
              "construction_manager_as_agent",
              "unrelated_industry"
            ],
            "description": "Company type"
          },
          {
            "name": "company[logo]",
            "in": "formData",
            "type": "file",
            "description": "Company logo"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CompanyFull"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/timecard_entries": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Timecards",
      "get": {
        "summary": "List timecard entries",
        "description": "Return a list of all Timecard Entries within a specified date range.\n",
        "tags": [
          "Timecards"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The beginning of the date range for entries. (YYYY-MM-DD)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The end of the date range for entries. (YYYY-MM-DD)",
            "type": "string",
            "format": "date"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of timecard entries",
              "items": {
                "$ref": "#\/definitions\/TimecardEntryCompact"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create timecard entry",
        "description": "Create a new Timecard Entry.\n",
        "tags": [
          "Timecards"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/TimecardEntryBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/TimecardEntry"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/timecard_entries\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Timecards",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the timecard entry",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show timecard entry",
        "description": "Return detailed information about a specific Timecard Entry.\n",
        "tags": [
          "Timecards"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/TimecardEntry"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update timecard entry",
        "description": "Update a specified Timecard Entry.\n",
        "tags": [
          "Timecards"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/TimecardEntryBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/TimecardEntry"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete timecard entry",
        "description": "Detete a specific Timecard Entry.\n",
        "tags": [
          "Timecards"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/timecard_entries": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Timecards",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List timecard entries",
        "description": "Return a list of all Timecard Entries within a specified date range.\n",
        "tags": [
          "Timecards"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Entries at specified date. (YYYY-MM-DD)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The beginning of the date range for entries. (YYYY-MM-DD)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The end of the date range for entries. (YYYY-MM-DD)",
            "type": "string",
            "format": "date"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of timecard entries",
              "items": {
                "$ref": "#\/definitions\/TimecardEntryProject"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create timecard entry",
        "description": "Create a new Timecard Entry.\n",
        "tags": [
          "Timecards"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/TimecardEntryProjectBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/TimecardEntryProject"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/timecard_entries\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Timecards",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the timecard entry",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show timecard entry",
        "description": "Return detailed information about a specific Timecard Entry.\n",
        "tags": [
          "Timecards"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/TimecardEntryProject"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update timecard entry",
        "description": "Update a specified Timecard Entry.\n",
        "tags": [
          "Timecards"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/TimecardEntryProjectBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/TimecardEntryProject"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete timecard entry",
        "description": "Delete a specified Timecard Entry.\n",
        "tags": [
          "Timecards"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/work_order_contracts": {
      "x-support-level": "Production",
      "x-gelato-group": "Commitments",
      "get": {
        "summary": "List work order contracts",
        "description": "Return a list of all Work Order Contracts of a specified Project.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterId"
          },
          {
            "$ref": "#\/parameters\/FilterWorkOrderContractStatus"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterIncludeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of work order contracts",
              "items": {
                "$ref": "#\/definitions\/WorkOrderContractCompact"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create work order contract",
        "description": "Create a new Work Order Contract in the specified Project.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/WorkOrderContractBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/WorkOrderContract"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/work_order_contracts\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Commitments",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show work order contract",
        "description": "Return a Work Order Contract.\n\n### Special notes (Tiers)\n\nThe visibility of Change Order Packages, Potential Change Orders & Change Order Requests\ndepends on the number of tiers defined in the Work Order Contract as follows:\n\n1-tier: Change Order Packages\n\n2-tier: Change Order Packages, Potential Change Orders\n\n3-tier: Change Order Packages, Change Order Requests, Potential Change Orders\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/WorkOrderContract"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update work order contract",
        "description": "Update a specified Work Order Contract.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/WorkOrderContractBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/WorkOrderContract"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete work order contract",
        "description": "Delete a specified Work Order Contract.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/work_order_contracts\/sync": {
      "x-support-level": "Production",
      "x-gelato-group": "Commitments",
      "patch": {
        "summary": "Sync work order contracts",
        "description": "This endpoint creates or updates a batch of work order contracts.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/WorkOrderContractSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/WorkOrderContractCompact"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/work_order_contracts\/{work_order_contract_id}\/line_items": {
      "x-support-level": "Production",
      "x-gelato-group": "Commitments",
      "parameters": [
        {
          "name": "work_order_contract_id",
          "in": "path",
          "description": "Work Order Contract ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List Work Order Contracts line items",
        "description": "Return a list of all Line Items of a specified Work Order Contract in a specified Project.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterId"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterCostCodeId"
          },
          {
            "$ref": "#\/parameters\/FilterLineItemTypeId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of line items",
              "items": {
                "$ref": "#\/definitions\/LineItem"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Work Order Contract line item",
        "description": "Create a new Line Item in a specified Work Order Contract.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/LineItemBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/LineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/work_order_contracts\/{work_order_contract_id}\/line_items\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Commitments",
      "parameters": [
        {
          "name": "work_order_contract_id",
          "in": "path",
          "description": "Work Order Contract ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Work Order Contract line item",
        "description": "Return a specific Line Item in a specified Work Order Contract.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/LineItem"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Work Order Contract line item",
        "description": "Update a Line Item in a specific Work Order Contract.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/LineItemBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/LineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Work Order Contract line item",
        "description": "Delete a Line Item in a specific Work Order Contract.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/purchase_order_contracts": {
      "x-support-level": "Production",
      "x-gelato-group": "Commitments",
      "get": {
        "summary": "List of Purchase Order Contracts",
        "description": "Returns a list of all Purchase Order Contracts.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterId"
          },
          {
            "$ref": "#\/parameters\/FilterPurchaseOrderContractStatus"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterIncludeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Purchase Order Contracts",
              "items": {
                "$ref": "#\/definitions\/PurchaseOrderContractCompact"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Purchase Order Contract",
        "description": "Create a Purchase Order Contract.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PurchaseOrderContractBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/PurchaseOrderContract"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/purchase_order_contracts\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Commitments",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Purchase Order Contract",
        "description": "Return detailed information on a Purchase Order Contract.\n\n### Special notes (Tiers)\n\nThe visibility of Change Order Packages, Potential Change Orders & Change Order Requests\ndepends on the number of tiers defined in the Work Order Contract as follows:\n\n1-tier: Change Order Packages\n\n2-tier: Change Order Packages, Potential Change Orders\n\n3-tier: Change Order Packages, Change Order Requests, Potential Change Orders\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PurchaseOrderContract"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Purchase Order Contract",
        "description": "Update a Purchase Order Contract.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PurchaseOrderContractBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PurchaseOrderContract"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Purchase Order Contract",
        "description": "Deletes a Purchase Order Contract.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/purchase_order_contracts\/sync": {
      "x-support-level": "Production",
      "x-gelato-group": "Commitments",
      "patch": {
        "summary": "Sync Purchase Order Contracts",
        "description": "Creates or Updates a batch of Purchase Order Contracts.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PurchaseOrderContractSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/PurchaseOrderContractCompact"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/purchase_order_contracts\/{purchase_order_contract_id}\/line_items": {
      "x-support-level": "Production",
      "x-gelato-group": "Commitments",
      "parameters": [
        {
          "name": "purchase_order_contract_id",
          "in": "path",
          "description": "Purchase Order Contract ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List Purchase Order Contract Line Items",
        "description": "Return a list of all Purchase Order Contract Line Items.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterId"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterCostCodeId"
          },
          {
            "$ref": "#\/parameters\/FilterLineItemTypeId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of line items",
              "items": {
                "$ref": "#\/definitions\/LineItem"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Purchase Order Contract Line Item",
        "description": "Create a Purchase Order Contract Line Item.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/LineItemBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/LineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/purchase_order_contracts\/{purchase_order_contract_id}\/line_items\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Commitments",
      "parameters": [
        {
          "name": "purchase_order_contract_id",
          "in": "path",
          "description": "Purchase Order Contract ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Purchase Order Contract Line Item",
        "description": "Return a Purchase Order Contract Line Item.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/LineItem"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Purchase Order Contract Line Item",
        "description": "Update a Purchase Order Contract Line Item.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/LineItemBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/LineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Purchase Order Contract Line Item",
        "description": "Delete a Purchase Order Contract Line Item.\n",
        "tags": [
          "Commitments"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/timecard_time_types": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Timecards",
      "get": {
        "summary": "List Timecard Time Types",
        "description": "Return a list of all Timecard Time Types for a specified Project.\n",
        "tags": [
          "Timecards"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "ID of the company",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Timecard Time Types",
              "items": {
                "$ref": "#\/definitions\/TimecardTimeType"
              },
              "example": [
                {
                  "id": 1,
                  "time_type": "Regular Time",
                  "abbreviated_time_type": "REG",
                  "global": true
                },
                {
                  "id": 5,
                  "time_type": "Double Time",
                  "abbreviated_time_type": "DOU",
                  "global": true
                },
                {
                  "id": 6,
                  "time_type": "Exempt",
                  "abbreviated_time_type": "EXE",
                  "global": true
                },
                {
                  "id": 3,
                  "time_type": "Holiday",
                  "abbreviated_time_type": "HOL",
                  "global": true
                },
                {
                  "id": 2,
                  "time_type": "Overtime",
                  "abbreviated_time_type": "OVE",
                  "global": true
                },
                {
                  "id": 7,
                  "time_type": "PTO",
                  "abbreviated_time_type": "PTO",
                  "global": true
                },
                {
                  "id": 8,
                  "time_type": "Salary",
                  "abbreviated_time_type": "SAL",
                  "global": true
                },
                {
                  "id": 4,
                  "time_type": "Vacation",
                  "abbreviated_time_type": "VAC",
                  "global": true
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/timecard_time_types": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Timecards",
      "get": {
        "summary": "List Timecard Time Types",
        "description": "Return a list of all Timecard Time Types for a specified Company.\n",
        "tags": [
          "Timecards"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "description": "ID of the company",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "description": "Array of Timecard Time Types",
              "items": {
                "$ref": "#\/definitions\/TimecardTimeTypeCompact"
              },
              "example": [
                {
                  "id": 1,
                  "time_type": "Regular Time"
                },
                {
                  "id": 5,
                  "time_type": "Double Time"
                },
                {
                  "id": 6,
                  "time_type": "Exempt"
                },
                {
                  "id": 3,
                  "time_type": "Holiday"
                },
                {
                  "id": 2,
                  "time_type": "Overtime"
                },
                {
                  "id": 7,
                  "time_type": "PTO"
                },
                {
                  "id": 8,
                  "time_type": "Salary"
                },
                {
                  "id": 4,
                  "time_type": "Vacation"
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/schedule_integration": {
      "x-support-level": "Production",
      "x-gelato-group": "Schedule Integration",
      "put": {
        "summary": "Upload schedule file",
        "description": "Upload a Schedule file.\n",
        "tags": [
          "Schedule Integration"
        ],
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "formData",
            "type": "integer",
            "description": "Project ID",
            "required": true
          },
          {
            "name": "schedule_integration[file]",
            "in": "formData",
            "type": "file",
            "description": "The schedule file to upload. Supported file formats are: MPP, MPX, PP, XER, XML.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/schedule_integration\/download": {
      "x-support-level": "Production",
      "x-gelato-group": "Schedule Integration",
      "get": {
        "summary": "Download schedule file",
        "description": "Download the source file (e.g. *.mpp) of an integrated Project Schedule.\n",
        "tags": [
          "Schedule Integration"
        ],
        "produces": [
          "application\/octet-stream",
          "application\/vnd.ms-project",
          "application\/msproj",
          "application\/msproject",
          "application\/x-msproject",
          "application\/x-ms-project",
          "application\/x-dos_ms_project",
          "application\/mpp",
          "zz-application\/zz-winassoc-mpp",
          "application\/x-project",
          "application\/xer",
          "application\/xml",
          "text\/xml"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/schedule_type\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Schedule Type",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the schedule type",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show schedule type",
        "description": "Return information about the Type of Schedule that's integrated with a Project.\n\n#### Schedule Types\n\n| Type                        | Key                      |\n|-----------------------------|--------------------------|\n| Microsoft Project 2010\/2013 | \"Microsoft Project 2010\" |\n| Microsoft Project 2003\/2007 | \"Microsoft Project\"      |\n| Primavera P6                | \"Primavera P6\"           |\n| Primavera Suretrak          | \"Primavera Suretrak\"     |\n| MPX Schedule                | \"MPX Schedule\"           |\n",
        "tags": [
          "Schedule Type"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ScheduleType"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update schedule type",
        "description": "Update the Schedule Type of a specified Project.\n\n#### Schedule Types\n\n| Type                        | Key                      |\n|-----------------------------|--------------------------|\n| Microsoft Project 2010\/2013 | \"Microsoft Project 2010\" |\n| Microsoft Project 2003\/2007 | \"Microsoft Project\"      |\n| Primavera P6                | \"Primavera P6\"           |\n| Primavera Suretrak          | \"Primavera Suretrak\"     |\n| MPX Schedule                | \"MPX Schedule\"           |\n",
        "tags": [
          "Schedule Type"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ScheduleTypeBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ScheduleType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/requested_changes": {
      "x-support-level": "Production",
      "x-gelato-group": "Requested Changes",
      "get": {
        "summary": "List Requested Changes",
        "description": "List all Requested Changes of a Task.\n",
        "tags": [
          "Requested Changes"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "The project for which all requested changes will be retrieved.",
            "type": "integer",
            "required": true
          },
          {
            "name": "task_id",
            "in": "query",
            "description": "The task for which all requested changes will be retrieved.",
            "type": "integer",
            "required": true
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "requested_changes": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/RequestedChange"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/calendar_events": {
      "x-support-level": "Production",
      "x-gelato-group": "Calendar Events",
      "get": {
        "summary": "List calendar events",
        "description": "List all Calendar Events for a specified project.\n",
        "tags": [
          "Calendar Events"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "calendar[start_datetime]",
            "in": "query",
            "description": "Start date or date-time",
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "calendar[finish_datetime]",
            "in": "query",
            "description": "Finish date or date-time",
            "type": "string",
            "format": "date-time"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "tasks": {
                  "type": "array",
                  "description": "Tasks",
                  "items": {
                    "$ref": "#\/definitions\/TaskNormal"
                  }
                },
                "todos": {
                  "type": "array",
                  "description": "ToDos",
                  "items": {
                    "$ref": "#\/definitions\/ToDo"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/todos": {
      "x-support-level": "Production",
      "x-gelato-group": "ToDos",
      "post": {
        "summary": "Create todo",
        "description": "Create a ToDo Item for a specified Project.\n",
        "tags": [
          "ToDos"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ToDoBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ToDo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/todos\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "ToDos",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the todo",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show todo",
        "description": "Return detailed information about a ToDo Item in a specified Project.\n",
        "tags": [
          "ToDos"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ToDo"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update todo",
        "description": "Update a ToDo item for a specified Project.\n",
        "tags": [
          "ToDos"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ToDoBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ToDo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete todo",
        "description": "Delete a specific ToDo Item in a specified Project.\n",
        "tags": [
          "ToDos"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/tasks": {
      "x-support-level": "Production",
      "x-gelato-group": "Tasks",
      "post": {
        "summary": "Create task",
        "description": "Create a new Task associated with the specified Project.\n",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/TaskBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/TaskNormal"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/tasks\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Tasks",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the task",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show task",
        "description": "Show detail on the specified Task.\n",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/TaskNormal"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update task",
        "description": "Update the specified Task.\n",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/TaskBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/TaskNormal"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete task",
        "description": "Delete the specified Task.\n",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/rfqs": {
      "x-support-level": "Production",
      "x-gelato-group": "RFQs",
      "get": {
        "summary": "List RFQs",
        "description": "Return a list of all RFQs in a specified Project and Contract.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/RFQ"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create RFQ",
        "description": "Create a new RFQ in a specified Project and Contract.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/RFQBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/RFQ"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/rfqs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "RFQs",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show RFQ",
        "description": "Return detailed information about a specified RFQ in a specified Project and Contract.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/RFQ"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update RFQ",
        "description": "Update an RFQ in a specified Project and Contract.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/RFQBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/RFQ"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete RFQ",
        "description": "Delete a specified RFQ in a specified Project and Contract.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/rfqs\/{rfq_id}\/quotes": {
      "x-support-level": "Production",
      "x-gelato-group": "RFQs",
      "parameters": [
        {
          "name": "rfq_id",
          "in": "path",
          "description": "RFQ ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List RFQ Quotes",
        "description": "Return a list of all Quotes in a specified RFQ.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/RFQQuote"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create RFQ Quote",
        "description": "Create a new Quote in a specified RFQ.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/RFQQuoteBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/RFQQuote"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/rfqs\/{rfq_id}\/quotes\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "RFQs",
      "parameters": [
        {
          "name": "rfq_id",
          "in": "path",
          "description": "RFQ ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "RFQ Quote ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show RFQ Quote",
        "description": "Return detailed information about a specified Quote in a specified RFQ.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/RFQQuote"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update RFQ Quote",
        "description": "Update a specified Quote in a specified RFQ.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/RFQQuoteBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/RFQQuote"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/rfqs\/{rfq_id}\/responses": {
      "x-support-level": "Production",
      "x-gelato-group": "RFQs",
      "parameters": [
        {
          "name": "rfq_id",
          "in": "path",
          "description": "RFQ ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List RFQ Responses",
        "description": "Return a list of all Responses in a specified RFQ.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/RFQResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create RFQ Response",
        "description": "Create a new Response in a specified RFQ.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/RFQResponseBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/RFQResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/rfqs\/{rfq_id}\/responses\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "RFQs",
      "parameters": [
        {
          "name": "rfq_id",
          "in": "path",
          "description": "RFQ ID",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show RFQ Response",
        "description": "Return detailed information about a specified Response in a specified RFQ.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/RFQResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update RFQ Response",
        "description": "Update a specified Response in a specified RFQ.\n",
        "tags": [
          "RFQs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/RFQResponseBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/RFQResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/meetings": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Meetings",
      "get": {
        "summary": "List meetings",
        "description": "Returns a list of all Meetings for a specified Project.\n",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of meetings",
              "items": {
                "$ref": "#\/definitions\/MeetingsGrouped"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create meeting",
        "description": "Create a new Meeting.\n\n#### Uploading attachments\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/MeetingBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Meeting"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/meetings\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Meetings",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the meeting",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show meeting",
        "description": "Returns detailed information about a Meeting in a specified Project.\n",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Meeting"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update meeting",
        "description": "Update a Meeting.\n\n#### Uploading attachments\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/MeetingBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Meeting"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete meeting",
        "description": "Delete a specified meeting from the system",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/meeting_attendee_records": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Meetings",
      "post": {
        "summary": "Create meeting attendee record",
        "description": "Create a new Meeting Attendee record. This associates a user with a meeting.\n",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "meeting_id",
            "in": "query",
            "description": "ID of the Meeting",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/MeetingAttendeeBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/MeetingAttendee"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/meeting_attendee_records\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Meetings",
      "parameters": [
        {
          "name": "meeting_id",
          "in": "query",
          "description": "ID of the Meeting",
          "required": true,
          "type": "integer"
        },
        {
          "name": "project_id",
          "in": "query",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Meeting Attendee record",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "summary": "Update meeting attendee record",
        "description": "Update a Meeting Attendee record.\n",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/MeetingAttendeeBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/MeetingAttendee"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete meeting attendee record",
        "description": "Delete a specified meeting attendee record, disassociating a given user from a meeting\n",
        "tags": [
          "Meetings"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/meeting_categories": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Meetings",
      "get": {
        "summary": "List meeting categories",
        "description": "Returns all Meeting Categories for a given Meeting.\n",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "meeting_id",
            "in": "query",
            "description": "ID of the meeting",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of meeting categories",
              "items": {
                "$ref": "#\/definitions\/MeetingCategory"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create meeting category",
        "description": "Create a new Meeting Category.\n",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/MeetingCategoryBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/MeetingCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/meeting_categories\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Meetings",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the meeting category",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "summary": "Update meeting category",
        "description": "Update a Meeting Category.\n",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/MeetingCategoryBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/MeetingCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/meeting_topics": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Meetings",
      "post": {
        "summary": "Create meeting topic",
        "description": "Creates Meeting Topic.\n\n#### Uploading attachments\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/MeetingTopicBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/MeetingTopic"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/meeting_topics\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Meetings",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the meeting topic",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "summary": "Update meeting topic",
        "description": "Update an existing Meeting Topic.\n\n#### Uploading attachments\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/MeetingTopicBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/MeetingTopic"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/budget_line_items": {
      "x-support-level": "Production",
      "x-gelato-group": "Budget Line Items",
      "get": {
        "summary": "List Budget Line Items",
        "description": "Return a list of all Budget Line Items.\n",
        "tags": [
          "Budget Line Items"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Budget Line Items",
              "items": {
                "$ref": "#\/definitions\/BudgetLineItem"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Budget Line Item",
        "description": "Add a new line item to a budget.\n",
        "tags": [
          "Budget Line Items"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/BudgetLineItemBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/BudgetLineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/budget_line_items\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Budget Line Items",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Budget Line Item",
        "description": "Return information about a Budget Line Item.\n",
        "tags": [
          "Budget Line Items"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/BudgetLineItem"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Budget Line Item",
        "description": "Update a line item of a specified budget.\n",
        "tags": [
          "Budget Line Items"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/BudgetLineItemBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/BudgetLineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/budget_modifications": {
      "x-support-level": "Production",
      "x-gelato-group": "Budget Modifications",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "summary": "List Budget Modifications",
        "description": "Return a list of all Budget Modifications for a Project.\n",
        "tags": [
          "Budget Modifications"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              }
            },
            "schema": {
              "description": "Array of Budget Modifications",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/BudgetModification"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Budget Modification",
        "description": "Create a Budget Modification.\n",
        "tags": [
          "Budget Modifications"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/BudgetModificationBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/BudgetModification"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/budget_modifications\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Budget Modifications",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "ID",
          "required": true
        }
      ],
      "get": {
        "summary": "Show Budget Modification",
        "description": "Return detailed information on a specified Budget Modification.\n",
        "tags": [
          "Budget Modifications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/BudgetModification"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Budget Modification",
        "description": "Update a Budget Modification.\n",
        "tags": [
          "Budget Modifications"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/BudgetModificationBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#\/definitions\/BudgetModification"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Budget Modification",
        "description": "Delete a specified Budget Modification.\n",
        "tags": [
          "Budget Modifications"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/punch_items": {
      "x-support-level": "Production",
      "x-gelato-group": "Punch Items",
      "get": {
        "summary": "List Punch Items",
        "description": "Return a list of all Punch Items for a specified Project.\n",
        "tags": [
          "Punch Items"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterPunchItemStatus"
          },
          {
            "$ref": "#\/parameters\/FilterPunchItemPriority"
          },
          {
            "$ref": "#\/parameters\/FilterPunchItemTypeId"
          },
          {
            "$ref": "#\/parameters\/FilterLocationId"
          },
          {
            "$ref": "#\/parameters\/FilterIncludeSublocations"
          },
          {
            "$ref": "#\/parameters\/FilterApproverLoginInformationId"
          },
          {
            "$ref": "#\/parameters\/FilterVendorId"
          },
          {
            "$ref": "#\/parameters\/FilterAssigneeResponse"
          },
          {
            "$ref": "#\/parameters\/FilterTradeId"
          },
          {
            "$ref": "#\/parameters\/FilterQuery"
          },
          {
            "$ref": "#\/parameters\/FilterPunchItemId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of punch items",
              "items": {
                "$ref": "#\/definitions\/PunchItemCompact"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create punch item",
        "description": "Create a new Punch Item in a Project.\n\n#### Uploading images\nTo upload images you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `punch_item[images][]` as files.\n",
        "tags": [
          "Punch Items"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PunchItemCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/PunchItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/punch_items\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Punch Items",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Punch Item",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Punch Item",
        "description": "Return detailed information about a specific Punch Item in a Project.\n",
        "tags": [
          "Punch Items"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PunchItem"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Punch Item",
        "description": "Update a specific Punch Item in a Project.\n\n#### Uploading images\nTo upload images you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `punch_item[images][]` as files.\n",
        "tags": [
          "Punch Items"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PunchItemUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PunchItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Punch Item",
        "description": "Delete a specific Punch Item.\n",
        "tags": [
          "Punch Items"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/punch_item_types": {
      "x-support-level": "Production",
      "x-gelato-group": "Punch Item Types",
      "get": {
        "summary": "List punch item types",
        "description": "Return a list of all Punch Item Types on a specified Project.\n",
        "tags": [
          "Punch Item Types"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Punch Item Types",
              "items": {
                "$ref": "#\/definitions\/PunchItemType"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Punch Item Type",
        "description": "Create a new Punch Item Type.\n",
        "tags": [
          "Punch Item Types"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PunchItemTypeBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/PunchItemType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/punch_item_types\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Punch Item Types",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Punch Item Type",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Punch Item Type",
        "description": "Return detail on the specified Punch Item Type.\n",
        "tags": [
          "Punch Item Types"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PunchItemType"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Punch Item type",
        "description": "Update the specified Punch Item Type.\n",
        "tags": [
          "Punch Item Types"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PunchItemTypeBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PunchItemType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Punch Item Type",
        "description": "Delete the specified Punch Item Type.\n",
        "tags": [
          "Punch Item Types"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/punch_list_assignee_options": {
      "x-support-level": "Production",
      "x-gelato-group": "Punch List Assignee Options",
      "get": {
        "summary": "List Punch List Assignee options",
        "description": "Returns login informations that the current User can assign to Punch Items.\n",
        "tags": [
          "Punch List Assignee Options"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Punch List assignee options",
              "items": {
                "$ref": "#\/definitions\/PunchListAssigneeOption"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/punch_item_assignments\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Punch Item Assignments",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "ID of the Punch Item Assignment"
        },
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Punch Assignment belongs to"
        }
      ],
      "get": {
        "summary": "Show Punch Assignment",
        "description": "Returns single Punch Item Assignment.\n",
        "tags": [
          "Punch Item Assignments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PunchItemAssignment"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Punch Item Assignment",
        "description": "Update single Punch Item Assignment.\n",
        "tags": [
          "Punch Item Assignments"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PunchItemAssignmentUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PunchItemAssignment"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/users": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Users",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List project users",
        "description": "Return a list of Users associated with a Project.\n",
        "tags": [
          "Project Users"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of project users",
              "items": {
                "$ref": "#\/definitions\/ProjectUser"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create project user",
        "description": "Create a new User in the specified Project.\n",
        "tags": [
          "Project Users"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectUserBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ProjectUser"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/users\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Users",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the user",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show project user",
        "description": "Show detail on a specified Project User.\n",
        "tags": [
          "Project Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ProjectUser"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update project user",
        "description": "Update the specified Project User.\n",
        "tags": [
          "Project Users"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectUserBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ProjectUser"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/users\/{id}\/actions\/add": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Users",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the user",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "summary": "Add company user to project",
        "description": "Adds a User from the Company Directory to the Project Directory.\n",
        "tags": [
          "Project Users"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "properties": {
                    "permission_template_id": {
                      "type": "integer",
                      "description": "User permission template id"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ProjectUser"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/users": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Users",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List company users",
        "description": "Return a list of all Users associated with a Company.\n",
        "tags": [
          "Company Users"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of company users",
              "items": {
                "$ref": "#\/definitions\/CompanyUser"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create company user",
        "description": "Create a new User in the specified Company.\n\n#### Uploading avatar\nTo upload avatar you must upload whole payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `user[avatar]` as file.\n",
        "tags": [
          "Company Users"
        ],
        "consumes": [
          "application\/json",
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/CompanyUserBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/CompanyUser"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/users\/sync": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Users",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "summary": "Sync company users",
        "description": "Creates or updates a batch of Company Users.\n",
        "tags": [
          "Company Users"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/CompanyUserSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/CompanyUser"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/users\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Users",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the user",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show company user",
        "description": "Show detail on a specified User.\n",
        "tags": [
          "Company Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CompanyUser"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update company user",
        "description": "Update the specified User.\n\n#### Uploading avatar\nTo upload avatar you must upload whole payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `user[avatar]` as file.\n",
        "tags": [
          "Company Users"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/CompanyUserBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CompanyUser"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/me": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Users",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show current company user",
        "description": "Show detail on the current Company User.\n",
        "tags": [
          "Company Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CompanyUser"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/vendors": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Vendors",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List project vendors",
        "description": "Return a list of Vendors associated with a specified Project.\n",
        "tags": [
          "Project Vendors"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of project vendors",
              "items": {
                "$ref": "#\/definitions\/Vendor"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create project vendor",
        "description": "Create a new Project Vendor.\n",
        "tags": [
          "Project Vendors"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectVendorCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Vendor"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/vendors\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Vendors",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the vendor",
          "required": true,
          "type": "integer"
        },
        {
          "name": "view",
          "in": "query",
          "description": "Compact and default view are identical for this endpoint; the extended view includes bidding information",
          "type": "string",
          "enum": [
            "compact",
            "default",
            "extended"
          ]
        }
      ],
      "get": {
        "summary": "Show project vendor",
        "description": "Show detail on a specified Project Vendor.\n",
        "tags": [
          "Project Vendors"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Vendor"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update project vendor",
        "description": "Update a specified Project Vendor.\n",
        "tags": [
          "Project Vendors"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectVendorUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Vendor"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/vendors\/{id}\/actions\/add": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Vendors",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the vendor",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "summary": "Add company vendor to project",
        "description": "Add a specified Vendor to a Project from the Company Directory.\n",
        "tags": [
          "Project Vendors"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Vendor"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/vendors\/{id}\/actions\/remove": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Vendors",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "description": "ID of the project",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the vendor",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "summary": "Delete company vendor from project",
        "description": "Remove a specified Vendor from a Project.\n",
        "tags": [
          "Project Vendors"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/vendors": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Vendors",
      "get": {
        "summary": "List company vendors",
        "description": "Return a list of all Vendors associated with a Company.\n",
        "tags": [
          "Company Vendors"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "ID of the company",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "name": "filters[created_at]",
            "in": "query",
            "type": "string",
            "description": "Return item(s) within a specific created at ISO8601 datetime range",
            "required": false
          },
          {
            "name": "filters[updated_at]",
            "in": "query",
            "type": "string",
            "description": "Return item(s) within a specific updated at ISO8601 datetime range",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of company vendors",
              "items": {
                "$ref": "#\/definitions\/Vendor"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create company vendor",
        "description": "Create a new Vendor associated with a specified Company.\n",
        "tags": [
          "Company Vendors"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/CompanyVendorBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Vendor"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/vendors\/sync": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Vendors",
      "post": {
        "summary": "Sync company vendors",
        "description": "Creates or updates a batch of Company Vendors.\n\n#### Documentation\n\nThe purpose of this API is to allow one or more vendors to be created or updated.\n\nThe caller provides an array of hashes, each hash containing the attributes for\na single vendor. The attribute names in each hash match those used by the Create\nand Update Company Vendors APIs. Attributes for a maximum of 1000 vendors may\nbe passed with each call.\n\nThe API will always return an HTTP status of 200.\n\nThe response body will contain two attributes entities and errors. The attributes\nfor each successfully created or updated vendor will appear in the entities list.\nThe attributes for each vendor will match those returned by the Show Company Vendor\nAPI. For each vendor which could not be created or updated, the attributes supplied\nby the caller will be present in the errors list, along with an additional errors\nattribute which will provide reasons for the failure.\n\nFor each vendor the caller supplies data for, the Sync API uses two different\ntypes of unique identifier to determine whether a new vendor is to be created,\nor an existing vendor is to be updated. The unique identifiers are supplied\nas the ID and origin_id attributes.\n\nIf neither unique identifier is provided, Procore will attempt to create a new\nvendor. For example the request below will create two new Vendors.\n\n````json\n{\n  \"company_id\": 352361,\n  \"updates\": [\n    { \"name\": \"New Vendor 1\" },\n    { \"name\": \"New Vendor 2\" }\n  ]\n}\n````\n\nThe response to this request lists all attributes for the vendors which have been created.\n\nThe ID attribute is the Procore unique identifier for a particular vendor.\nIf the caller already knows the Procore unique identifier for a particular\nvendor (either through the List Company Vendors API or through the Create Company Vendor API)\nthis value can be passed to indicate which vendor is to be updated. Note that\nif the caller passes an ID value which Procore does not recognise, Procore will report\nan error.\n\nThe caller does not need to be aware of the unique identifiers assigned by Procore\nfor each vendor in order to create or update them. Instead the caller can provide\ntheir own unique identifier for the vendor in the `origin_id` attribute.\nIf Procore cannot find a vendor with the supplied `origin_id` it will create\na new one. If Procore can find a vendor with the supplied `origin_id` it will update it.\n\nNote that alongside the origin_id attribute, Procore also provides an `origin_data`\nattribute. Procore does not interpret the contents of this attribute.\nThe caller can use this to store and retrieve their own contextual\ninformation about this vendor.\n",
        "tags": [
          "Company Vendors"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/CompanyVendorSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "description": "Array of updated entities",
                  "items": {
                    "$ref": "#\/definitions\/Vendor"
                  }
                },
                "errors": {
                  "type": "array",
                  "description": "Array of errors",
                  "items": {
                    "type": "object"
                  },
                  "example": [
                    {
                      "id": 3,
                      "name": "No vendor has this ID value",
                      "errors": {
                        "id": [
                          "Entity with this ID not found"
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/vendors\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Vendors",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the vendor",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show company vendor",
        "description": "Show detail on a specified Company Vendor.\n",
        "tags": [
          "Company Vendors"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "ID of the company",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Vendor"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update company vendor",
        "description": "Update a specified Company Vendor.\n",
        "tags": [
          "Company Vendors"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/CompanyVendorBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Vendor"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete company vendor",
        "description": "Delete a specified Company Vendor.\n",
        "tags": [
          "Company Vendors"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "ID of the company",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/checklist\/lists": {
      "x-support-level": "Production",
      "x-gelato-group": "Checklists",
      "get": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "List Checklists",
        "description": "Lists Inspection Checklists in a specified Project.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          },
          {
            "$ref": "#\/parameters\/FilterListView"
          },
          {
            "$ref": "#\/parameters\/FilterListTypeId"
          },
          {
            "$ref": "#\/parameters\/FilterListPointOfContactId"
          },
          {
            "$ref": "#\/parameters\/FilterListInspectorsId"
          },
          {
            "$ref": "#\/parameters\/FilterListTemplateId"
          },
          {
            "$ref": "#\/parameters\/FilterLocationId"
          },
          {
            "$ref": "#\/parameters\/FilterListSpecSectionId"
          },
          {
            "$ref": "#\/parameters\/FilterListResponsibleContractorId"
          },
          {
            "$ref": "#\/parameters\/FilterStatus"
          },
          {
            "$ref": "#\/parameters\/FilterTradeId"
          },
          {
            "$ref": "#\/parameters\/FilterSearch"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Array of Checklist grouped by Template",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Checklist template name",
                    "example": "Framing Inspection"
                  },
                  "template_id": {
                    "type": "integer",
                    "description": "Checklist template ID",
                    "example": 1
                  },
                  "lists": {
                    "type": "array",
                    "title": "Array of Checklists",
                    "description": "Array of Checklists",
                    "items": {
                      "$ref": "#\/definitions\/ChecklistIndex"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Create Checklist",
        "description": "Creates Inspection Checklist in a specified Project.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ChecklistBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Checklist"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/checklist\/lists\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Checklists",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Checklist ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Show Checklist",
        "description": "Retrieves Inspection Checklist in a specified Project.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Checklist"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Update Checklist",
        "description": "Updates Inspection Checklist in a specified Project.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ChecklistBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Checklist"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/checklist\/possible_inspectors": {
      "x-support-level": "Production",
      "x-gelato-group": "Checklists",
      "get": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "List Inspectors",
        "description": "Lists Possible Inspectors in a specified Project.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "people": {
                  "title": "Array of Possible Inspectors",
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/Inspector"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/checklist\/list_templates": {
      "x-support-level": "Production",
      "x-gelato-group": "Checklists",
      "get": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "List Checklist Templates",
        "description": "Returns a list of all Inspection Checklist Templates for a specified Project.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "title": "Array of Checklist Templates",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ChecklistTemplate"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/checklist\/list_templates\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Checklists",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Checklist Template ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Show Checklist Template",
        "description": "Shows an Inspection Checklist Template.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChecklistTemplate"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/checklist\/lists\/{list_id}\/sections": {
      "x-support-level": "Production",
      "x-gelato-group": "Checklists",
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "type": "integer",
          "description": "Checklist ID",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Create Checklist Section",
        "description": "Creates Section to specified Checklist.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ChecklistSectionBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ChecklistSectionCompact"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/checklist\/lists\/{list_id}\/sections\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Checklists",
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "type": "integer",
          "description": "Checklist ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Checklist Section ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Show Checklist Section",
        "description": "Retrieves Checklist Section in a specified Checklist.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChecklistSectionCompact"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Update Checklist Section",
        "description": "Updates Checklist Section in a specified Checklist.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ChecklistSectionBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChecklistSectionCompact"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Delete Checklist Section",
        "description": "Deletes Checklist Section in a specified Checklist.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/checklist\/lists\/{list_id}\/sections\/{section_id}\/toggle_not_applicable": {
      "x-support-level": "Production",
      "x-gelato-group": "Checklists",
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "type": "integer",
          "description": "Checklist ID",
          "required": true
        },
        {
          "name": "section_id",
          "in": "path",
          "type": "integer",
          "description": "Checklist Section ID",
          "required": true
        }
      ],
      "put": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Toggle Checklist Section Not Applicable status",
        "description": "Toggles Checklist Section Not Applicable status in a specified Checklist and Checklist Section.\n",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "project_id",
                "not_applicable"
              ],
              "properties": {
                "project_id": {
                  "type": "integer",
                  "description": "Project ID"
                },
                "not_applicable": {
                  "type": "boolean",
                  "description": "Not applicable status"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChecklistSectionCompact"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/checklist\/lists\/{list_id}\/items\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Checklists",
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "type": "integer",
          "description": "Checklist ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Item ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Show Checklist Item",
        "description": "Retrieves Checklist Item in a specified Checklist\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          },
          {
            "name": "section_id",
            "in": "query",
            "type": "integer",
            "description": "Checklist Section ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChecklistSectionItem"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Update Checklist Item",
        "description": "Updates Checklist Item in a specified Checklist\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ChecklistItemBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChecklistSectionItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/checklist\/lists\/{list_id}\/comments": {
      "x-support-level": "Production",
      "x-gelato-group": "Checklists",
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "type": "integer",
          "description": "Checklist ID",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Create Checklist Comment",
        "description": "Creates Checklist Comment in a specified Checklist\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ChecklistCommentBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ChecklistComment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/checklist\/lists\/{list_id}\/comments\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Checklists",
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "type": "integer",
          "description": "Checklist ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Comment ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Checklists (Inspections)"
        ],
        "summary": "Show Checklist Comment",
        "description": "Retrieves Checklist Comment in a specified Checklist.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChecklistComment"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/folders": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Folders and Files",
      "get": {
        "summary": "List project Folders and Files",
        "description": "Return a list of Folders and Files for a specified Project.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "Project ID",
            "required": true
          },
          {
            "name": "exclude_folders",
            "in": "query",
            "description": "Exclude child Folders from results",
            "type": "boolean"
          },
          {
            "name": "exclude_files",
            "in": "query",
            "description": "Exclude child Files from results",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/FolderFull"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create project Folder",
        "description": "Create a new Folder in the specified Project.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "Project ID",
            "required": true
          },
          {
            "$ref": "#\/parameters\/FolderCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Folder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/folders\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Folders and Files",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Folder",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show project Folder",
        "description": "Show detail on the specified Folder.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "Project ID",
            "required": true
          },
          {
            "name": "exclude_folders",
            "in": "query",
            "description": "Exclude children Folders from results",
            "type": "boolean"
          },
          {
            "name": "exclude_files",
            "in": "query",
            "description": "Exclude children Files from results",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/FolderFull"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update project Folder",
        "description": "Update the specified Folder.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "Project ID",
            "required": true
          },
          {
            "$ref": "#\/parameters\/FolderUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Folder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete project Folder",
        "description": "Delete the specified Folder by moving it to the recycle bin.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/folders\/{id}\/document_search": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Project Folders and Files",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Folder",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Search documents inside Folder",
        "description": "Search documents inside Folder for a specified Project.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "folders": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Folder",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Folder id",
                        "example": 12
                      },
                      "name": {
                        "type": "string",
                        "description": "Folder name",
                        "example": "example_folder"
                      },
                      "private": {
                        "type": "boolean",
                        "description": "Folder private status",
                        "example": true
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Folder updated at",
                        "example": "2017-01-04T21:27:18.000Z"
                      },
                      "path": {
                        "type": "string",
                        "description": "Folder path",
                        "example": "root_folder\/parent_folder\/example_folder"
                      }
                    }
                  }
                },
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "File",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "File id",
                        "example": 13
                      },
                      "legacy_id": {
                        "type": "integer",
                        "description": "File legacy id",
                        "example": 10
                      },
                      "name": {
                        "type": "string",
                        "description": "File name",
                        "example": "file.pdf"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "File updated at",
                        "example": "2017-01-04T21:27:18.000Z"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "File created at",
                        "example": "2017-01-04T21:27:18.000Z"
                      },
                      "path": {
                        "type": "string",
                        "description": "File path",
                        "example": "root_folder\/parent_folder\/file.pdf"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/folders\/{id}\/self_and_ancestors": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Project Folders and Files",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Folder",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Files and Folders inside Folder",
        "description": "Show Files and Folders inside Folder for a specified Project.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ancestors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/Folder"
                  }
                },
                "folder_self": {
                  "$ref": "#\/definitions\/Folder"
                },
                "file_self": {
                  "$ref": "#\/definitions\/File"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/files": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Folders and Files",
      "post": {
        "summary": "Create project File",
        "description": "Create a new File in the specified Project.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "ID of the project",
            "required": true
          },
          {
            "$ref": "#\/parameters\/FileCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/File"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/files\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Project Folders and Files",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "ID of the File",
          "required": true
        }
      ],
      "get": {
        "summary": "Show project File",
        "description": "Show detailed information about a File.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "ID of the project",
            "required": true
          },
          {
            "name": "show_latest_version_only",
            "in": "query",
            "description": "Show only latest File version",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/File"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update project File",
        "description": "Update the specified File.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "ID of the project",
            "required": true
          },
          {
            "$ref": "#\/parameters\/FileUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/File"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete project File",
        "description": "Delete the specified File by moving it to the recycle bin.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "Project id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/file_versions": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Project Folders and Files",
      "post": {
        "summary": "Create project file version",
        "description": "Create a new Version of a specific File.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "The id of the project",
            "required": true
          },
          {
            "name": "file_id",
            "in": "query",
            "description": "The id of the File",
            "type": "integer",
            "required": true
          },
          {
            "$ref": "#\/parameters\/FileVersionBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/FileVersion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/file_versions\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Project Folders and Files",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "ID of the file version",
          "required": true
        }
      ],
      "get": {
        "summary": "Show project file version",
        "description": "Show detailed information about a File Version.\n",
        "tags": [
          "Project Folders and Files"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "ID of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/FileVersion"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/folders": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Folders and Files",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "List company Folders and Files",
        "description": "Return a list of Folders and Files associated with a specific Company.\n",
        "tags": [
          "Company Folders and Files"
        ],
        "parameters": [
          {
            "name": "exclude_folders",
            "in": "query",
            "description": "Exclude children Folders from results",
            "type": "boolean"
          },
          {
            "name": "exclude_files",
            "in": "query",
            "description": "Exclude children Files from results",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/FolderFull"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create company Folder",
        "description": "Create a new Folder associated with a specific Company.\n",
        "tags": [
          "Company Folders and Files"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/FolderBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/Folder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/folders\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Folders and Files",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Folder",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show company Folder",
        "description": "Show detail on a specific Folder.\n",
        "tags": [
          "Company Folders and Files"
        ],
        "parameters": [
          {
            "name": "exclude_folders",
            "in": "query",
            "description": "Exclude children Folders from results",
            "type": "boolean"
          },
          {
            "name": "exclude_files",
            "in": "query",
            "description": "Exclude children Files from results",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/FolderFull"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update company Folder",
        "description": "Update a specific Folder.\n",
        "tags": [
          "Company Folders and Files"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/FolderBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Folder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete company Folder",
        "description": "Delete the specified Folder by moving it to the recycle bin.\n",
        "tags": [
          "Company Folders and Files"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/folders\/{id}\/document_search": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Company Folders and Files",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Folder",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Search documents inside Folder",
        "tags": [
          "Company Folders and Files"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "folders": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Folder",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Folder id"
                      },
                      "name": {
                        "type": "string",
                        "description": "Folder name"
                      },
                      "private": {
                        "type": "boolean",
                        "description": "Folder private status"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Folder updated at"
                      },
                      "path": {
                        "type": "string",
                        "description": "Folder path"
                      }
                    }
                  }
                },
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "File",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "File id"
                      },
                      "legacy_id": {
                        "type": "integer",
                        "description": "File legacy id"
                      },
                      "name": {
                        "type": "string",
                        "description": "File name"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "File updated at"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "File created at"
                      },
                      "path": {
                        "type": "string",
                        "description": "File path"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/folders\/{id}\/self_and_ancestors": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Company Folders and Files",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "description": "ID of the company",
          "required": true,
          "type": "integer"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Folder",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show Files and Folders inside Folder",
        "tags": [
          "Company Folders and Files"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ancestors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/Folder"
                  }
                },
                "folder_self": {
                  "$ref": "#\/definitions\/Folder"
                },
                "file_self": {
                  "$ref": "#\/definitions\/File"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/files": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Folders and Files",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "type": "integer",
          "description": "ID of the company",
          "required": true
        }
      ],
      "post": {
        "summary": "Create company File",
        "description": "Create a new File associated with specific Company.\n",
        "tags": [
          "Company Folders and Files"
        ],
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/FileCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/File"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/files\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Folders and Files",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "type": "integer",
          "description": "ID of the company",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "ID of the File",
          "required": true
        }
      ],
      "get": {
        "summary": "Show company File",
        "description": "Show detailed information about a File.\n",
        "tags": [
          "Company Folders and Files"
        ],
        "parameters": [
          {
            "name": "show_latest_version_only",
            "in": "query",
            "description": "Show only latest File Version",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/File"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update company File",
        "description": "Update a specific File.\n",
        "tags": [
          "Company Folders and Files"
        ],
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/FileUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/File"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete company File",
        "description": "Delete a specific File.\n",
        "tags": [
          "Company Folders and Files"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/file_versions": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Folders and Files",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "type": "integer",
          "description": "ID of the company",
          "required": true
        }
      ],
      "post": {
        "summary": "Create company file version",
        "description": "Create a new Version of a specific File.\n",
        "tags": [
          "Company Folders and Files"
        ],
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "query",
            "description": "The id of the File",
            "type": "integer",
            "required": true
          },
          {
            "$ref": "#\/parameters\/FileVersionBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/FileVersion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/file_versions\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Company Folders and Files",
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "type": "integer",
          "description": "ID of the company",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "ID of the file version",
          "required": true
        }
      ],
      "get": {
        "summary": "Show company file version",
        "description": "Show detailed information about a File Version.\n",
        "tags": [
          "Company Folders and Files"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/FileVersion"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List RFIs",
        "description": "Returns all RFIs in a specified Project.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "$ref": "#\/parameters\/FilterRfiStatus"
          },
          {
            "$ref": "#\/parameters\/FilterAssignedId"
          },
          {
            "$ref": "#\/parameters\/FilterResponsibleContractorId"
          },
          {
            "$ref": "#\/parameters\/FilterCostCodeId"
          },
          {
            "$ref": "#\/parameters\/FilterReceivedFromLoginInformationId"
          },
          {
            "$ref": "#\/parameters\/FilterBallInCourtId"
          },
          {
            "$ref": "#\/parameters\/FilterLocationId"
          },
          {
            "name": "sort[attribute]",
            "in": "query",
            "type": "string",
            "description": "The attribute by which to sort the list of RFIs",
            "enum": [
              "assigned_id",
              "ball_in_court_id",
              "cost_code_id",
              "cost_impact",
              "created_by_id",
              "date_created",
              "drawing_number",
              "due_date",
              "due_date_variance",
              "initiated_at",
              "location_id",
              "number",
              "position",
              "received_from_login_information_id",
              "reference",
              "responsible_contractor_id",
              "schedule_impact",
              "specification_section_id",
              "subject",
              "time_resolved"
            ]
          },
          {
            "name": "sort[direction]",
            "in": "query",
            "type": "string",
            "description": "If passed a sort attribute, determines which direction to sort",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/RFINormal"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "RFIs"
        ],
        "summary": "Create RFI",
        "description": "Creates a new RFI in a specified Project.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/RFICreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/RFIExtended"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/recycle_bin": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List of deleted RFIs",
        "description": "The RFIs endpoint returns all RFIs in a project",
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/RFINormal"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/potential_assignees": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "Get a list of possible assignees for an RFI",
        "description": "Returns all potential Assignees for an RFI.\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/default_distribution": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List RFI Default Distribution",
        "description": "List of contacts that comprise the RFI default distribution",
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "RFI ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "Get RFI",
        "description": "Return detailed information about a specified RFI in a specified Project.\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/RFIExtended"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "RFIs"
        ],
        "summary": "Update RFI",
        "description": "Updates a specified RFI in a specified Project.\n",
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/RFIUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/RFIExtended"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/{id}\/recycle": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "RFI ID",
          "required": true
        }
      ],
      "patch": {
        "tags": [
          "RFIs"
        ],
        "summary": "Send an RFI to the recycle bin",
        "description": "Send a specified RFI to the Recycle Bin.\n",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/{id}\/retrieve": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "RFI ID",
          "required": true
        }
      ],
      "patch": {
        "tags": [
          "RFIs"
        ],
        "summary": "Retrieve an RFI from the recycle bin",
        "description": "Retrieve a specified RFI from the Recycle Bin.\n",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/{rfi_id}\/replies": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFI Replies",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "rfi_id",
          "in": "path",
          "type": "integer",
          "description": "RFI ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List RFI Replies",
        "description": "The RFI Replies endpoint represents replies for a given RFI\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/RFI_Reply"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "RFIs"
        ],
        "summary": "Create RFI Replies",
        "description": "The RFI Replies endpoint represents all replies for a given RFI\n",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "reply"
              ],
              "properties": {
                "reply": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string",
                      "description": "Body"
                    },
                    "official": {
                      "type": "boolean",
                      "description": "Official Status"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/RFI_Reply"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/{rfi_id}\/replies\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFI Replies",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "rfi_id",
          "in": "path",
          "type": "integer",
          "description": "RFI ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Reply ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "Get RFI Reply",
        "description": "The RFI Replies endpoint represents all replies for a given RFI\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/RFI_Reply"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "RFIs"
        ],
        "summary": "Update RFI Reply",
        "description": "The RFI Replies endpoint represents all replies for a given RFI\n",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "reply"
              ],
              "properties": {
                "reply": {
                  "type": "object",
                  "properties": {
                    "official": {
                      "type": "boolean",
                      "description": "Official Status"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RFI Reply",
            "schema": {
              "$ref": "#\/definitions\/RFI_Reply"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/filter_options": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List available RFI filters",
        "description": "The RFI Filter Options endpoint represents filter fields and options for RFIs\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Key name is the filter field, and the value a link to the corresponding options endpoint"
                }
              },
              "example": {
                "status": "\/vapid\/projects\/12345\/rfis\/filter_options\/status",
                "location_id": "\/vapid\/projects\/12345\/rfis\/filter_options\/location_id",
                "assigned_id": "\/vapid\/projects\/12345\/rfis\/filter_options\/assigned_id",
                "cost_code_id": "\/vapid\/projects\/12345\/rfis\/filter_options\/cost_code_id",
                "received_from_login_information_id": "\/vapid\/projects\/12345\/rfis\/filter_options\/received_from_login_information_id",
                "responsible_contractor_id": "\/vapid\/projects\/12345\/rfis\/filter_options\/responsible_contractor_id",
                "ball_in_court_id": "\/vapid\/projects\/12345\/rfis\/filter_options\/ball_in_court_id"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/filter_options\/status": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List available RFI status filter options",
        "description": "The RFI Filter Options endpoint represents filter fields and options for RFIs\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Key name is generally the ID of the filter option object"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value is the rendered name for the filter option object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/filter_options\/assigned_id": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List available RFI assigned_id filter options",
        "description": "The RFI Filter Options endpoint represents filter fields and options for RFIs\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Key name is generally the ID of the filter option object"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value is the rendered name for the filter option object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/filter_options\/location_id": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List available RFIs locations\n",
        "description": "The RFI Filter Options endpoint represents filter fields and options for RFIs\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Key name is generally the ID of the filter option object"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value is the rendered name for the filter option object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/filter_options\/cost_code_id": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List available RFI cost code options",
        "description": "The RFI Filter Options endpoint represents filter fields and options for RFIs\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Key name is generally the ID of the filter option object"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value is the rendered name for the filter option object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/filter_options\/received_from_login_information_id": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List available RFI received from filter options",
        "description": "The RFI Filter Options endpoint represents filter fields and options for RFIs\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Key name is generally the ID of the filter option object"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value is the rendered name for the filter option object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/filter_options\/responsible_contractor_id": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List available RFI responsible contractor filter options",
        "description": "The RFI Filter Options endpoint represents filter fields and options for RFIs\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Key name is generally the ID of the filter option object"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value is the rendered name for the filter option object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/rfis\/filter_options\/ball_in_court_id": {
      "x-support-level": "Prototype",
      "x-gelato-group": "RFIs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "RFIs"
        ],
        "summary": "List available RFI ball in court filter options",
        "description": "The RFI Filter Options endpoint represents filter fields and options for RFIs\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Key name is generally the ID of the filter option object",
                    "example": 999
                  },
                  "value": {
                    "type": "string",
                    "description": "Value is the rendered name for the filter option object",
                    "example": "John Doe"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/observations\/types": {
      "x-support-level": "Production",
      "x-gelato-group": "Observations",
      "get": {
        "tags": [
          "Observations"
        ],
        "summary": "List Observation Types",
        "description": "Returns a collection of Observation Types from the Project's Company.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "required": true,
            "description": "ID of the Project"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Array of Observation Types",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ObservationType"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/observations\/items": {
      "x-support-level": "Production",
      "x-gelato-group": "Observations",
      "get": {
        "tags": [
          "Observations"
        ],
        "summary": "List Observation Items",
        "description": "Returns a collection of Observation Items.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          },
          {
            "$ref": "#\/parameters\/FilterObservationTypeId"
          },
          {
            "$ref": "#\/parameters\/FilterTradeIds"
          },
          {
            "$ref": "#\/parameters\/FilterObservationAssigneeId"
          },
          {
            "$ref": "#\/parameters\/FilterObservationStatus"
          },
          {
            "$ref": "#\/parameters\/FilterObservationPriority"
          },
          {
            "$ref": "#\/parameters\/FilterLocationIds"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedById"
          },
          {
            "$ref": "#\/parameters\/FilterAssigneeCompanyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Array of Observation Items",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ObservationItemIndex"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Observations"
        ],
        "summary": "Create Observation Item",
        "description": "Creates an Observation Item.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ObservationItemCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ObservationItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/observations\/items\/send_unsent": {
      "x-support-level": "Production",
      "x-gelato-group": "Observations",
      "post": {
        "tags": [
          "Observations"
        ],
        "summary": "Send unsent Observation Items",
        "description": "Sends email notifications for unsent Observation Items.\n",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "project_id"
              ],
              "properties": {
                "project_id": {
                  "type": "integer",
                  "description": "ID of the Project"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Array of Observation Items that were sent out",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ObservationItemIndex"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/observations\/items\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Observations",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Observation Item ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Observations"
        ],
        "summary": "Get Observation Item",
        "description": "Returns an Observation Item.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ObservationItem"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Observations"
        ],
        "summary": "Update Observation Item",
        "description": "Updates an Observation Item.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ObservationItemBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ObservationItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/observations\/items\/{item_id}\/response_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Observations",
      "parameters": [
        {
          "name": "item_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Observation Item ID"
        }
      ],
      "get": {
        "tags": [
          "Observations"
        ],
        "summary": "List Observation Item Response Logs",
        "description": "Returns a collection of Response Logs for a given Observation Item.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Array of Observation Item Response Logs",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ObservationItemResponseLog"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Observations"
        ],
        "summary": "Create Observation Item Response Log",
        "description": "Creates a new Response Log for a given Observation Item.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ObservationItemResponseLogBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ObservationItemResponseLog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/observations\/items\/{item_id}\/response_logs\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Observations",
      "parameters": [
        {
          "name": "item_id",
          "in": "path",
          "type": "integer",
          "description": "Observation Item ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Observation Item Response Log ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Observations"
        ],
        "summary": "Get Observation Item Response Log",
        "description": "Returns a Response Log of an Observation Item.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ProjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ObservationItemResponseLog"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/plan_revision_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Plan Revision Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Plan Revision Logs belong to"
        }
      ],
      "get": {
        "summary": "List Plan Revision Logs",
        "description": "Returns all Plan Revision Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Plan Revision Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/PlanRevisionLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Plan Revision Log",
        "description": "Creates single Plan Revision Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Plan Revision Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PlanRevisionLogBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/PlanRevisionLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/plan_revision_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Plan Revision Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Plan Revision Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Plan Revision Log ID"
        }
      ],
      "get": {
        "summary": "Show Plan Revision Logs",
        "description": "Returns single Plan Revision Log.\n",
        "tags": [
          "Plan Revision Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PlanRevisionLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Plan Revision Log",
        "description": "Update single Plan Revision Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Plan Revision Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PlanRevisionLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PlanRevisionLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Plan Revision Log",
        "description": "Delete single Plan Revision Log.\n",
        "tags": [
          "Plan Revision Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/waste_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Waste Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Waste Logs belong to"
        }
      ],
      "get": {
        "summary": "List Waste Logs",
        "description": "Returns all Waste Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Waste Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/WasteLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Waste Log",
        "description": "Creates single Waste Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n[Project Vendor List](https:\/\/developers.procore.com\/docs\/list-project-vendors)\n",
        "tags": [
          "Waste Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/WasteLogBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/WasteLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/waste_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Waste Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Waste Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Waste Log ID"
        }
      ],
      "get": {
        "summary": "Show Waste Logs",
        "description": "Returns single Waste Log.\n",
        "tags": [
          "Waste Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/WasteLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Waste Log",
        "description": "Update single Waste Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Waste Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/WasteLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/WasteLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Waste Log",
        "description": "Delete single Waste Log.\n",
        "tags": [
          "Waste Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/safety_violation_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Safety Violation Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Safety Violation Logs belong to"
        }
      ],
      "get": {
        "summary": "List Safety Violation Logs",
        "description": "Returns all Safety Violation Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Safety Violation Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/SafetyViolationLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Safety Violation Log",
        "description": "Creates single Safety Violation Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Safety Violation Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/SafetyViolationLogBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/SafetyViolationLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/safety_violation_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Safety Violation Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Safety Violation Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Safety Violation Log ID"
        }
      ],
      "get": {
        "summary": "Show Safety Violation Logs",
        "description": "Returns single Safety Violation Log.\n",
        "tags": [
          "Safety Violation Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/SafetyViolationLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Safety Violation Log",
        "description": "Update single Safety Violation Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Safety Violation Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/SafetyViolationLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/SafetyViolationLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Safety Violation Log",
        "description": "Delete single Safety Violation Log.\n",
        "tags": [
          "Safety Violation Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/accident_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Accident Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Accident Logs belongs to"
        }
      ],
      "get": {
        "summary": "List Accident Logs",
        "description": "Returns all Accident Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Accident Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/AccidentLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Accident Log",
        "description": "Creates single Accident Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Accident Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/AccidentLogBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/AccidentLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/accident_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Accident Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the accident log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Accident log ID"
        }
      ],
      "get": {
        "summary": "Show Accident Logs",
        "description": "Returns single Accident Log.\n",
        "tags": [
          "Accident Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/AccidentLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Accident Log",
        "description": "Update single Accident Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Accident Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/AccidentLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/AccidentLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Accident Log",
        "description": "Delete single Accident Log.\n",
        "tags": [
          "Accident Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/visitor_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Visitor Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Visitor Logs belong to"
        }
      ],
      "get": {
        "summary": "List Visitor Logs",
        "description": "Returns all Visitor Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Visitor Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/VisitorLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Visitor Log",
        "description": "Creates single Visitor Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Visitor Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/VisitorLogBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/VisitorLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/visitor_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Visitor Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Visitor Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Visitor Log ID"
        }
      ],
      "get": {
        "summary": "Show Visitor Logs",
        "description": "Returns single Visitor Log.\n",
        "tags": [
          "Visitor Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/VisitorLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Visitor Log",
        "description": "Update single Visitor Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Visitor Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/VisitorLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/VisitorLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Visitor Log",
        "description": "Delete single Visitor Log.\n",
        "tags": [
          "Visitor Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/call_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Call Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the call logs belongs to"
        }
      ],
      "get": {
        "summary": "List Call Logs",
        "description": "Returns all Call Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Call Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/CallLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Call Log",
        "description": "Creates single Call Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Call Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/CallLogBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/CallLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/call_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Call Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the call log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Call log ID"
        }
      ],
      "get": {
        "summary": "Show Call Logs",
        "description": "Returns single Call Log.\n",
        "tags": [
          "Call Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CallLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Call Log",
        "description": "Update single Call Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Call Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/CallLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CallLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Call Log",
        "description": "Delete single Call Log.\n",
        "tags": [
          "Call Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/work_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Work Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Work Logs belong to"
        }
      ],
      "get": {
        "summary": "List Work Logs",
        "description": "Returns all Work Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Work Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/WorkLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Work Log",
        "description": "Creates single Work Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Work Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/WorkLogBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/WorkLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/work_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Work Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Work Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Work Log ID"
        }
      ],
      "get": {
        "summary": "Show Work Logs",
        "description": "Returns single Work Log.\n",
        "tags": [
          "Work Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/WorkLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Work Log",
        "description": "Update single Work Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Work Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/WorkLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/WorkLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Work Log",
        "description": "Delete single Work Log.\n",
        "tags": [
          "Work Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/dumpster_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Dumpster Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Dumpster Logs belong to"
        }
      ],
      "get": {
        "summary": "List Dumpster Logs",
        "description": "Returns all Dumpster Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Dumpster Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/DumpsterLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Dumpster Log",
        "description": "Creates single Dumpster Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Dumpster Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DumpsterLogBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/DumpsterLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/dumpster_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Dumpster Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Dumpster Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Dumpster Log ID"
        }
      ],
      "get": {
        "summary": "Show Dumpster Logs",
        "description": "Returns single Dumpster Log.\n",
        "tags": [
          "Dumpster Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DumpsterLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Dumpster Log",
        "description": "Update single Dumpster Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Dumpster Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DumpsterLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DumpsterLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Dumpster Log",
        "description": "Delete single Dumpster Log.\n",
        "tags": [
          "Dumpster Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/inspection_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Inspection Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Inspection Logs belong to"
        }
      ],
      "get": {
        "summary": "List Inspection Logs",
        "description": "Returns all Inspection Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Inspection Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/InspectionLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Inspection Log",
        "description": "Creates single Inspection Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Location Creation\nThe daily log endpoints support both single location creation as well as multi-tier location\ncreation.\n\n##### Existing Location\nIf want to use an existing location and you have the ID of that existing location use the following:\n```\ninspection_log[location_id]\n```\n\n##### New Location\nIf you are creating a new location use the following:\n```\ninspection_log[mt_location][ ]\n```\nIt's capable of making both single-tier and multi-tier locations.\n",
        "tags": [
          "Inspection Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/InspectionLogCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/InspectionLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/inspection_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Inspection Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Inspection Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Inspection Log ID"
        }
      ],
      "get": {
        "summary": "Show Inspection Logs",
        "description": "Returns single Inspection Log.\n",
        "tags": [
          "Inspection Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/InspectionLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Inspection Log",
        "description": "Update single Inspection Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Location Creation\nThe daily log endpoints support both single location creation as well as multi-tier location\ncreation.\n\n##### Existing Location\nIf want to use an existing location and you have the ID of that existing location use the following:\n```\ninspection_log[location_id]\n```\n\n##### New Location\nIf you are creating a new location use the following:\n```\ninspection_log[mt_location][ ]\n```\nIt's capable of making both single-tier and multi-tier locations.\n",
        "tags": [
          "Inspection Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/InspectionLogUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/InspectionLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Inspection Log",
        "description": "Delete single Inspection Log.\n",
        "tags": [
          "Inspection Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/daily_construction_report_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Daily Construction Report Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Daily Construction Report Logs belongs to"
        }
      ],
      "get": {
        "summary": "List Daily Construction Report Logs",
        "description": "Returns all Daily Construction Report Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Daily Construction Report Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/DailyConstructionReportLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Daily Construction Report Log",
        "description": "Creates single Daily Construction Report Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Daily Construction Report Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DailyConstructionReportLogCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/DailyConstructionReportLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/daily_construction_report_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Daily Construction Report Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Daily Construction Report Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Daily Construction Report Log ID"
        }
      ],
      "get": {
        "summary": "Show Daily Construction Report Logs",
        "description": "Returns single Daily Construction Report Log.\n",
        "tags": [
          "Daily Construction Report Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DailyConstructionReportLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Daily Construction Report Log",
        "description": "Update single Daily Construction Report Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Daily Construction Report Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DailyConstructionReportLogUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DailyConstructionReportLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Daily Construction Report Log",
        "description": "Delete single Daily Construction Report Log.\n",
        "tags": [
          "Daily Construction Report Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/quantity_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Quantity Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Quantity Logs belong to"
        }
      ],
      "get": {
        "summary": "List Quantity Logs",
        "description": "Returns all Quantity Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Quantity Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/QuantityLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Quantity Log",
        "description": "Creates single Quantity Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Location Creation\nThe Daily Log endpoints support both single location creation as well as multi-tier location\ncreation.\n\n##### Existing Location\nIf want to use an existing location and you have the ID of that existing location use the following:\n```\nquantity_log[location_id]\n```\n\n##### New Location\nIf you are creating a new location use the following:\n```\nquantity_log[mt_location][ ]\n```\nIt's capable of making both single-tier and multi-tier locations.\n",
        "tags": [
          "Quantity Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/QuantityLogBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/QuantityLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/quantity_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Quantity Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Quantity Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Quantity Log ID"
        }
      ],
      "get": {
        "summary": "Show Quantity Logs",
        "description": "Returns single Quantity Log.\n",
        "tags": [
          "Quantity Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/QuantityLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Quantity Log",
        "description": "Update single Quantity Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Location Creation\nThe Daily Log endpoints support both single location creation as well as multi-tier location\ncreation.\n\n##### Existing Location\nIf want to use an existing location and you have the ID of that existing location use the following:\n```\nquantity_log[location_id]\n```\n\n##### New Location\nIf you are creating a new location use the following:\n```\nquantity_log[mt_location][ ]\n```\nIt's capable of making both single-tier and multi-tier locations.\n",
        "tags": [
          "Quantity Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/QuantityLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/QuantityLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Quantity Log",
        "description": "Delete single Quantity Log.\n",
        "tags": [
          "Quantity Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/notes_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Notes Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Notes Logs belong to"
        }
      ],
      "get": {
        "summary": "List Notes Logs",
        "description": "Returns all Notes Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Notes Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/NotesLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Notes Log",
        "description": "Creates single Notes Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Location Creation\nThe Daily Log endpoints support both single location creation as well as multi-tier location\ncreation.\n\n##### Existing Location\nIf want to use an existing location and you have the ID of that existing location use the following:\n```\nnotes_log[location_id]\n```\n\n##### New Location\nIf you are creating a new location use the following:\n```\nnotes_log[mt_location][ ]\n```\nIt's capable of making both single-tier and multi-tier locations.\n",
        "tags": [
          "Notes Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/NotesLogCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/NotesLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/notes_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Notes Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Notes Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Notes Log ID"
        }
      ],
      "get": {
        "summary": "Show Notes Logs",
        "description": "Returns single Notes Log.\n",
        "tags": [
          "Notes Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/NotesLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Notes Log",
        "description": "Update single Notes Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Location Creation\nThe Daily Log endpoints support both single location creation as well as multi-tier location\ncreation.\n\n##### Existing Location\nIf want to use an existing location and you have the ID of that existing location use the following:\n```\nnotes_log[location_id]\n```\n\n##### New Location\nIf you are creating a new location use the following:\n```\nnotes_log[mt_location][ ]\n```\nIt's capable of making both single-tier and multi-tier locations.\n",
        "tags": [
          "Notes Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/NotesLogUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/NotesLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Notes Log",
        "description": "Delete single Notes Log.\n",
        "tags": [
          "Notes Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/manpower_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Manpower Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Manpower Logs belong to"
        }
      ],
      "get": {
        "summary": "List Manpower Logs",
        "description": "Returns all Manpower Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Manpower Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ManpowerLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Manpower Log",
        "description": "Creates single Manpower Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Location Creation\nThe daily log endpoints support both single location creation as well as multi-tier location\ncreation.\n\n##### Existing Location\nIf want to use an existing location and you have the ID of that existing location use the following:\n```\nmanpower_log[location_id]\n```\n\n##### New Location\nIf you are creating a new location use the following:\n```\nmanpower_log[mt_location][ ]\n```\nIt's capable of making both single-tier and multi-tier locations.\n",
        "tags": [
          "Manpower Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ManpowerLogCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ManpowerLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/manpower_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Manpower Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Manpower Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Manpower Log ID"
        }
      ],
      "get": {
        "summary": "Show Manpower Logs",
        "description": "Returns single Manpower Log.\n",
        "tags": [
          "Manpower Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ManpowerLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Manpower Log",
        "description": "Update single Manpower Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Location Creation\nThe daily log endpoints support both single location creation as well as multi-tier location\ncreation.\n\n##### Existing Location\nIf want to use an existing location and you have the ID of that existing location use the following:\n```\nmanpower_log[location_id]\n```\n\n##### New Location\nIf you are creating a new location use the following:\n```\nmanpower_log[mt_location][ ]\n```\nIt's capable of making both single-tier and multi-tier locations.\n",
        "tags": [
          "Manpower Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ManpowerLogUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ManpowerLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Manpower Log",
        "description": "Delete single Manpower Log.\n",
        "tags": [
          "Manpower Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/equipment_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Equipment Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Equipment Logs belong to"
        }
      ],
      "get": {
        "summary": "List Equipment Logs",
        "description": "Returns all Equipment Logs.\n\n[Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Equipment Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/EquipmentLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Equipment Log",
        "description": "Creates single Equipment Log.\n\n[Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Location Creation\nThe daily log endpoints support both single location creation as well as multi-tier location\ncreation.\n\n##### Existing Location\nIf want to use an existing location and you have the ID of that existing location use the following:\n```\nequipment_log[location_id]\n```\n\n##### New Location\nIf you are creating a new location use the following:\n```\nequipment_log[mt_location][ ]\n```\nIt's capable of making both single-tier and multi-tier locations.\n",
        "tags": [
          "Equipment Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/EquipmentLogCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/EquipmentLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/equipment_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Equipment Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Equipment Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Equipment Log ID"
        }
      ],
      "get": {
        "summary": "Show Equipment Logs",
        "description": "Returns single Equipment Log.\n",
        "tags": [
          "Equipment Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/EquipmentLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Equipment Log",
        "description": "Update single Equipment Log.\n\n[Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Equipment Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/EquipmentLogUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/EquipmentLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Equipment Log",
        "description": "Delete single Equipment Log.\n",
        "tags": [
          "Equipment Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/delivery_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Delivery Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Delivery Logs belong to"
        }
      ],
      "get": {
        "summary": "List Delivery Logs",
        "description": "Returns all Delivery Logs.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n\n##### **Note:** If none of these parameters are used the date will default to today's date\n",
        "tags": [
          "Delivery Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/DeliveryLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Delivery Log",
        "description": "Creates single Delivery Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Delivery Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DeliveryLogCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/DeliveryLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/delivery_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Delivery Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Delivery Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Delivery Log ID"
        }
      ],
      "get": {
        "summary": "Show Delivery Log",
        "description": "Returns single Delivery Log.\n",
        "tags": [
          "Delivery Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DeliveryLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Delivery Log",
        "description": "Update single Delivery Log.\n\n#### [Daily Log guide](https:\/\/developers.procore.com\/documentation\/getting_started\/daily-logs)\n",
        "tags": [
          "Delivery Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/DeliveryLogUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/DeliveryLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Delivery Log",
        "description": "Delete single Delivery Log.\n",
        "tags": [
          "Delivery Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/weather_logs": {
      "x-gelato-group": "Weather Logs",
      "x-support-level": "Production",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Weather Logs belongs to"
        }
      ],
      "get": {
        "summary": "List Weather Logs",
        "description": "Returns all Weather Logs.\n\n#### Filter by date\n\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n",
        "tags": [
          "Weather Logs"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "log_date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/WeatherLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Weather Log",
        "description": "Creates single Weather Log.\n",
        "tags": [
          "Weather Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/WeatherLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/WeatherLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/weather_logs\/{id}": {
      "x-gelato-group": "Weather Logs",
      "x-support-level": "Production",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Weather Log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Use log date as your ID. Format YYYMMDD ie:20161108"
        },
        {
          "name": "log_date",
          "in": "query",
          "type": "string",
          "format": "date",
          "description": "Weather Log Date"
        }
      ],
      "get": {
        "summary": "Show Weather Logs",
        "description": "Returns single Weather Log.\n",
        "tags": [
          "Weather Logs"
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/WeatherLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Weather Log",
        "description": "Update single Weather Log.\n",
        "tags": [
          "Weather Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/WeatherLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/WeatherLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/productivity_logs": {
      "x-support-level": "Production",
      "x-gelato-group": "Productivity Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Productivity logs belongs to"
        }
      ],
      "get": {
        "summary": "List Productivity Logs",
        "description": "Returns all Productivity Logs.\n#### Filter by date\n* Use query parameters **start_date** and **end_date** to retreive logs from specified date range\n* Use query parameter **log_date** to retreive logs from specified day\n",
        "tags": [
          "Productivity Logs"
        ],
        "parameters": [
          {
            "name": "log_date",
            "in": "query",
            "description": "Date of specific logs desired in YYYY-MM-DD format",
            "type": "string",
            "format": "log_date"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date of specific logs desired in YYYY-MM-DD format (use together with end_date)",
            "type": "string",
            "format": "date"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date of specific logs desired in YYYY-MM-DD format (use together with start_date)",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ProductivityLog"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Productivity Log",
        "description": "Creates single Productivity Log.\n",
        "tags": [
          "Productivity Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProductivityLogBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ProductivityLog"
            }
          },
          "400": {
            "description": "Can not create due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/productivity_logs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Productivity Logs",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Project ID of which the Productivity log belongs to"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "required": true,
          "description": "Productivity Log ID"
        }
      ],
      "get": {
        "summary": "Show Productivity Logs",
        "description": "Returns single Productivity Log.\n",
        "tags": [
          "Productivity Logs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ProductivityLog"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Productivity Log",
        "description": "Update single Productivity Log.\n",
        "tags": [
          "Productivity Logs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ProductivityLogBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ProductivityLog"
            }
          },
          "400": {
            "description": "Can not update due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Productivity Log",
        "description": "Delete single Productivity Log.\n",
        "tags": [
          "Productivity Logs"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Can not delete due to errors",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/potential_change_orders": {
      "x-support-level": "Production",
      "x-gelato-group": "Potential Change Orders",
      "get": {
        "summary": "List Potential Change Orders",
        "description": "Return a list of all Potential Change Orders (PCO).\n",
        "tags": [
          "Potential Change Orders"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "type": "integer",
            "required": true
          },
          {
            "$ref": "#\/parameters\/FilterId"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterReviewedAt"
          },
          {
            "$ref": "#\/parameters\/FilterDueDate"
          },
          {
            "$ref": "#\/parameters\/FilterInvoicedDate"
          },
          {
            "$ref": "#\/parameters\/FilterPaidDate"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PotentialChangeOrderIndex"
            }
          },
          "404": {
            "description": "User does not have right permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Potential Change Order",
        "description": "Create a new Potential Change Order (PCO).\n",
        "tags": [
          "Potential Change Orders"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PotentialChangeOrderBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/PotentialChangeOrder"
            }
          },
          "400": {
            "description": "Can not create change order due to errors.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/potential_change_orders\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Potential Change Orders",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer",
          "description": "ID"
        }
      ],
      "get": {
        "summary": "Show Potential Change Orders",
        "description": "Return detailed information about a Potential Change Order (PCO).\n",
        "tags": [
          "Potential Change Orders"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PotentialChangeOrder"
            }
          },
          "403": {
            "description": "User does not have right permission.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Potential Change Order",
        "description": "Update information about a specific Potential Change Order (PCO).\n",
        "tags": [
          "Potential Change Orders"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/PotentialChangeOrderBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/PotentialChangeOrder"
            }
          },
          "400": {
            "description": "Can not update change order due to errors.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/potential_change_orders\/sync": {
      "x-support-level": "Production",
      "x-gelato-group": "Potential Change Orders",
      "patch": {
        "tags": [
          "Potential Change Orders"
        ],
        "summary": "Potential Change Orders Sync",
        "description": "This endpoint creates or updates a batch of Potential Change Orders (PCO).\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "Project ID",
            "required": true
          },
          {
            "name": "contract_id",
            "in": "query",
            "type": "integer",
            "description": "Contract ID",
            "required": true
          },
          {
            "$ref": "#\/parameters\/PotentialChangeOrderSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Potential Change Orders",
            "schema": {
              "title": "arrayOfPotentialChangeOrders",
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/PotentialChangeOrder"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/PotentialChangeOrderSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      }
    },
    "\/vapid\/change_order_requests": {
      "x-support-level": "Production",
      "x-gelato-group": "Change Order Requests",
      "get": {
        "summary": "List Change Order Requests",
        "description": "Return a list of all Change Order Requests (COR) to a specific contract in a project.\n",
        "tags": [
          "Change Order Requests"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "type": "integer",
            "required": true
          },
          {
            "$ref": "#\/parameters\/FilterId"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterReviewedAt"
          },
          {
            "$ref": "#\/parameters\/FilterDueDate"
          },
          {
            "$ref": "#\/parameters\/FilterInvoicedDate"
          },
          {
            "$ref": "#\/parameters\/FilterPaidDate"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChangeOrderRequestIndex"
            }
          },
          "404": {
            "description": "User does not have correct permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Change Order Requests",
        "description": "Create Change Order Request (COR).\n",
        "tags": [
          "Change Order Requests"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ChangeOrderRequestBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ChangeOrderRequest"
            }
          },
          "400": {
            "description": "Unable to create Change Order Request due to errors.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have correct permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/change_order_requests\/sync": {
      "x-support-level": "Production",
      "x-gelato-group": "Change Order Requests",
      "patch": {
        "tags": [
          "Change Order Requests"
        ],
        "summary": "Sync Change Order Requests",
        "description": "Creates or updates a batch of Change Order Requests (COR).\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "Project ID",
            "required": true
          },
          {
            "name": "contract_id",
            "in": "query",
            "type": "integer",
            "description": "Contract ID",
            "required": true
          },
          {
            "$ref": "#\/parameters\/ChangeOrderRequestSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Change Order Requests",
            "schema": {
              "title": "arrayOfChangeOrderRequests",
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ChangeOrderRequest"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ChangeOrderRequestSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Project is not valid",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "404": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      }
    },
    "\/vapid\/change_order_requests\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Change Order Requests",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer",
          "description": "ID"
        }
      ],
      "get": {
        "summary": "Show Change Order Request",
        "description": "Return detailed information about a specified Change Order Request (COR).\n",
        "tags": [
          "Change Order Requests"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChangeOrderRequest"
            }
          },
          "403": {
            "description": "User does not have right permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Change Order Requests",
        "description": "Update information about a specific Change Order Request (COR).\n",
        "tags": [
          "Change Order Requests"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ChangeOrderRequestBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChangeOrderRequest"
            }
          },
          "400": {
            "description": "Can not update Change Order Request due to errors.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/change_order_packages": {
      "x-support-level": "Production",
      "x-gelato-group": "Change Order Packages",
      "get": {
        "summary": "List Change Order Packages",
        "description": "List Change Order Packages\n",
        "tags": [
          "Change Order Packages"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "type": "integer",
            "required": true
          },
          {
            "$ref": "#\/parameters\/FilterId"
          },
          {
            "$ref": "#\/parameters\/FilterCreatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterUpdatedAt"
          },
          {
            "$ref": "#\/parameters\/FilterReviewedAt"
          },
          {
            "$ref": "#\/parameters\/FilterDueDate"
          },
          {
            "$ref": "#\/parameters\/FilterInvoicedDate"
          },
          {
            "$ref": "#\/parameters\/FilterPaidDate"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChangeOrderPackageIndex"
            }
          },
          "404": {
            "description": "User does not have correct permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Change Order Package",
        "description": "Create Change Order Package\n",
        "tags": [
          "Change Order Packages"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ChangeOrderPackageBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ChangeOrderPackage"
            }
          },
          "400": {
            "description": "Unable to create Change Order Package due to errors.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have correct permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/change_order_packages\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Change Order Packages",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer",
          "description": "ID"
        }
      ],
      "get": {
        "summary": "Show Change Order Package",
        "description": "Show Change Order Package\n",
        "tags": [
          "Change Order Packages"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          },
          {
            "name": "contract_id",
            "in": "query",
            "description": "Contract ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChangeOrderPackage"
            }
          },
          "403": {
            "description": "User does not have correct permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Change Order Package",
        "description": "Update Change Order Package\n",
        "tags": [
          "Change Order Packages"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ChangeOrderPackageBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChangeOrderPackage"
            }
          },
          "400": {
            "description": "Unable to update Change Order Package due to errors.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have correct permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/change_order_change_reasons": {
      "x-support-level": "Production",
      "x-gelato-group": "Change Order Change Reasons",
      "get": {
        "summary": "List Change Order Change Reasons",
        "description": "List Change Order Change Reasons\n",
        "tags": [
          "Change Order Change Reasons"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ChangeOrderChangeReason"
              }
            }
          },
          "403": {
            "description": "User does not have permission to access Change Order Change Reasons.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/change_order\/statuses": {
      "x-support-level": "Production",
      "x-gelato-group": "Change Orders",
      "get": {
        "summary": "List Change Order Statuses",
        "description": "Return a list of all Change Order Statuses.\n",
        "tags": [
          "Change Orders"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "ID",
                    "example": 324737
                  },
                  "name": {
                    "type": "string",
                    "description": "Name",
                    "example": "No Charge"
                  },
                  "mapped_to_status": {
                    "type": "string",
                    "description": "Mapped to status",
                    "example": "approved"
                  },
                  "show_in_select": {
                    "type": "boolean",
                    "description": "Whether available for GUI selection",
                    "example": true
                  }
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access Change Order Statuses.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/change_types": {
      "x-support-level": "Production",
      "x-gelato-group": "Change Types",
      "get": {
        "summary": "List Change Types",
        "description": "List Change Types\n",
        "tags": [
          "Change Types"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ChangeType"
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have permission to access Change Types.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/change_events": {
      "x-support-level": "Production",
      "x-gelato-group": "Change Events",
      "get": {
        "summary": "List Change Events",
        "description": "List Change Events.\n",
        "tags": [
          "Change Events"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ChangeEvent"
              }
            }
          },
          "403": {
            "description": "User does not have permission to access Change Event.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Change Event",
        "description": "Create Change Event\n",
        "tags": [
          "Change Events"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          },
          {
            "$ref": "#\/parameters\/ChangeEventBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ChangeEvent"
            }
          },
          "400": {
            "description": "Can not create Change Event due to errors.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have permission access to create Change Events.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/change_events\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Change Events",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer",
          "description": "ID"
        }
      ],
      "get": {
        "summary": "Show Change Event",
        "description": "Show Change Event.\n",
        "tags": [
          "Change Events"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChangeEvent"
            }
          },
          "403": {
            "description": "User does not have permission access to Change Event.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update Change Event",
        "description": "Update Change Event.\n",
        "tags": [
          "Change Events"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          },
          {
            "$ref": "#\/parameters\/ChangeEventBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ChangeEvent"
            }
          },
          "400": {
            "description": "Can not update Change Event due to errors.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have permission access to update Change Events.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/change_event\/statuses": {
      "x-support-level": "Production",
      "x-gelato-group": "Change Events",
      "get": {
        "summary": "List Change Event Statuses",
        "tags": [
          "Change Events"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ChangeEventStatus"
              }
            }
          },
          "403": {
            "description": "User does not have permission to access Change Event Statuses.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/submittals": {
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "post": {
        "x-support-level": "Prototype",
        "summary": "Create Submittal",
        "description": "Create a new Submittal associated with the specified Project.\n",
        "tags": [
          "Submittals"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/SendEmails"
          },
          {
            "$ref": "#\/parameters\/SubmittalBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Submittal created successfully",
            "schema": {
              "$ref": "#\/definitions\/SubmittalExtended"
            }
          },
          "403": {
            "description": "User does not have permission to create Submittal",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "422": {
            "description": "Error creating Submittal",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "get": {
        "x-support-level": "Prototype",
        "summary": "List Submittals on a project",
        "description": "Return a list of all Submittals from a specified Project.\n",
        "tags": [
          "Submittals"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "Project submittals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/SubmittalNormal"
              }
            }
          }
        }
      },
      "delete": {
        "x-support-level": "Internal",
        "summary": "Bulk Delete Submittals",
        "description": "Bulk Delete Submittals from a specified Project. The delete is performed atomically - if one delete fails, none of the deletions succeed.\n",
        "tags": [
          "Submittals"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/NonAtomic"
          },
          {
            "$ref": "#\/parameters\/SubmittalIDs"
          }
        ],
        "responses": {
          "200": {
            "description": "All Submittals sucessfully deleted'"
          },
          "207": {
            "x-support-level": "Internal",
            "description": "Some submittals were successfully deleted, others could not be deleted",
            "schema": {
              "$ref": "#\/definitions\/SubmittalUndeletedIDs"
            }
          },
          "422": {
            "description": "Some Submittals were not deleted successfully - delete was aborted",
            "schema": {
              "$ref": "#\/definitions\/SubmittalUndeletedIDs"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/submittals\/{id}": {
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Submittal ID",
          "required": true
        }
      ],
      "get": {
        "x-support-level": "Production",
        "summary": "Show Submittal",
        "description": "Return detailed information on the specified Submittal.\n",
        "tags": [
          "Submittals"
        ],
        "responses": {
          "200": {
            "description": "Submittal shown successfully",
            "schema": {
              "$ref": "#\/definitions\/SubmittalExtended"
            }
          },
          "403": {
            "description": "User does not have permission to view Submittal",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Submittal not found",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "x-support-level": "Prototype",
        "summary": "Update Submittal",
        "description": "Update the specified Submittal.\n",
        "tags": [
          "Submittals"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/SendEmails"
          },
          {
            "$ref": "#\/parameters\/SubmittalBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Submittal updated successfully",
            "schema": {
              "$ref": "#\/definitions\/SubmittalExtended"
            }
          },
          "403": {
            "description": "User does not have permission to update Submittal",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Submittal not found",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "422": {
            "description": "Error updating Submittal",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "x-support-level": "Production",
        "summary": "Delete Submittal",
        "description": "Delete the specified Submittal.\n",
        "tags": [
          "Submittals"
        ],
        "responses": {
          "200": {
            "description": "Submittal deleted successfully"
          },
          "403": {
            "description": "User does not have permission to delete Submittal",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "404": {
            "description": "Submittal not found",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "500": {
            "description": "Error deleting Submittal",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/submittals\/potential_submittal_managers": {
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "x-support-level": "Prototype",
        "summary": "List potential submittal managers",
        "description": "Return a list of valid contacts that can be set as a submittal manager on submittals for a specified project.\n",
        "tags": [
          "Submittals"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "Project submittals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/submittals\/potential_received_froms": {
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "x-support-level": "Prototype",
        "summary": "List potential received from contacts",
        "description": "Return a list of valid contacts that can be set as received from on submittals for a specified project.\n",
        "tags": [
          "Submittals"
        ],
        "parameters": [
          {
            "name": "responsible_contractor_id",
            "in": "query",
            "type": "integer",
            "description": "(optional) ID of the Responsible Contractor to filter the potential Received Froms"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "Project submittals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/submittals\/filter_options": {
      "x-support-level": "development",
      "x-gelato-group": "Submittals",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Submittals"
        ],
        "summary": "List available Submittal filters",
        "description": "The Submittal Filter Options endpoint represents filter fields and options for Submittals\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "example": [
                "submittal_type",
                "\/vapid\/projects\/123\/submittals\/filter_options\/submittal_type"
              ],
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Key name is the filter field, and the value a link to the corresponding options endpoint"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/submittals\/filter_options\/submittal_type": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Submittals",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Submittals"
        ],
        "summary": "List Submittal Types",
        "description": "Returns all Submittal Types defined for the project\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Submittal Type as it is stored on Submittals",
                    "example": "G&E's (Electrical)"
                  },
                  "value": {
                    "type": "string",
                    "description": "Display for Submittal Type, at the moment it is the same as id",
                    "example": "G&E's (Electrical)"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/submittal_logs": {
      "x-support-level": "Prototype",
      "x-gelato-group": "submittal_logs",
      "get": {
        "summary": "List Submittals",
        "description": "This is a deprecated endpoint. Please use \/submittals endpoint.",
        "deprecated": true,
        "tags": [
          "submittal_logs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of Project where you will retrieve submittals",
            "type": "integer",
            "required": true
          },
          {
            "$ref": "#\/parameters\/FilterDueBy"
          },
          {
            "$ref": "#\/parameters\/FilterDateRange"
          },
          {
            "$ref": "#\/parameters\/FilterStartDate"
          },
          {
            "$ref": "#\/parameters\/FilterEndDate"
          },
          {
            "$ref": "#\/parameters\/FilterStatus"
          },
          {
            "$ref": "#\/parameters\/FilterLocationId"
          },
          {
            "$ref": "#\/parameters\/FilterIncludeSublocations"
          },
          {
            "$ref": "#\/parameters\/FilterSubmittalPackageId"
          },
          {
            "$ref": "#\/parameters\/FilterResponse"
          },
          {
            "$ref": "#\/parameters\/FilterApprovedId"
          },
          {
            "$ref": "#\/parameters\/FilterSubmittalType"
          },
          {
            "$ref": "#\/parameters\/FilterSpecSectionId"
          },
          {
            "$ref": "#\/parameters\/FilterSpecDivision"
          },
          {
            "$ref": "#\/parameters\/FilterReceivedFromId"
          },
          {
            "$ref": "#\/parameters\/FilterResponsibleContractorId"
          },
          {
            "$ref": "#\/parameters\/FilterQuery"
          },
          {
            "$ref": "#\/parameters\/FilterBallInCourt"
          },
          {
            "$ref": "#\/parameters\/FilterOnlyCurrentRevision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/SubmittalLogIndex"
            }
          },
          "401": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/submittal_logs\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "submittal_logs",
      "get": {
        "summary": "Show Submittal",
        "description": "This is a deprecated endpoint. Please use \/submittals\/{id} endpoint.",
        "deprecated": true,
        "tags": [
          "submittal_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Submittal",
            "type": "integer",
            "required": true
          },
          {
            "name": "project_id",
            "in": "query",
            "description": "ID of Project where you will retrieve submittals",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/SubmittalLog"
            }
          },
          "401": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/sub_jobs": {
      "x-support-level": "Production",
      "x-gelato-group": "Sub Jobs",
      "get": {
        "summary": "List Sub Jobs",
        "description": "Return a list of all Sub Jobs in a specified Project.\n",
        "tags": [
          "Sub Jobs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/SubJob"
              }
            }
          },
          "403": {
            "description": "User does not have right permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create Sub Job",
        "description": "Create a new Sub Job.\n",
        "tags": [
          "Sub Jobs"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/SubJob"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/SubJob"
            }
          },
          "400": {
            "description": "Can not create Sub Job due to errors.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "User does not have right permissions.",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/sub_jobs\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Sub Jobs",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "Show Sub Job",
        "description": "Return a specified Sub Jobs in a specified Project.\n",
        "tags": [
          "Sub Jobs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#\/definitions\/SubJob"
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Sub Job",
        "description": "Update a specified Sub Job.\n",
        "tags": [
          "Sub Jobs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#\/definitions\/SubJob"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Sub Job",
        "description": "Delete a specified Sub Job.\n",
        "tags": [
          "Sub Jobs"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Project ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#\/definitions\/SubJob"
              }
            }
          }
        }
      }
    },
    "\/vapid\/dashboards": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Dashboards",
      "parameters": [
        {
          "in": "query",
          "name": "company_id",
          "type": "integer",
          "description": "company_id for company level dashboard (either company_id or\nproject_id is required)\n",
          "required": false
        },
        {
          "in": "query",
          "name": "project_id",
          "type": "integer",
          "description": "project_id for project level dashboard (either project_id or\ncompany_id is required)\n",
          "required": false
        }
      ],
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "List Dashboards",
        "description": "List of all dashboards visible to a user\n",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "title": "arrayOfDashboards",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/Dashboard"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Create Dashboard",
        "description": "Create a Dashboard\n",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "type": "string",
            "description": "desired name of the dashboard"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/Dashboard"
            }
          }
        }
      }
    },
    "\/vapid\/dashboards\/{dashboard_id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Dashboards",
      "parameters": [
        {
          "in": "query",
          "name": "company_id",
          "type": "integer",
          "description": "company_id for company level dashboard (either company_id or\nproject_id is required)\n",
          "required": false
        },
        {
          "in": "query",
          "name": "project_id",
          "type": "integer",
          "description": "project_id for project level dashboard (either project_id or\ncompany_id is required)\n",
          "required": false
        },
        {
          "in": "path",
          "name": "dashboard_id",
          "type": "integer",
          "description": "dashboard id",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Show Dashboard",
        "description": "Return the desired Dashboard\n",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/Dashboard"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Update Dashboard",
        "description": "Update the desired Dashboard\n",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "type": "string",
            "description": "name you want to update dashboard to"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/Dashboard"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Delete Dashboard",
        "description": "Delete a Dashboard\n",
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "\/vapid\/charts": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Dashboards",
      "parameters": [
        {
          "in": "query",
          "name": "company_id",
          "type": "integer",
          "description": "company_id for company level dashboard (either company_id or\nproject_id is required)\n",
          "required": false
        },
        {
          "in": "query",
          "name": "project_id",
          "type": "integer",
          "description": "project_id for project level dashboard (either project_id or\ncompany_id is required)\n",
          "required": false
        }
      ],
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "List Charts",
        "description": "List of all Charts visible to a user\n",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "title": "arrayOfCharts",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/Chart"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Create Chart",
        "description": "Create a Chart\n",
        "parameters": [
          {
            "name": "report_tab_id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "tool_type",
            "in": "query",
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "type": "string"
          },
          {
            "name": "measure",
            "in": "query",
            "type": "string"
          },
          {
            "name": "chart_type",
            "in": "query",
            "type": "string"
          },
          {
            "name": "chart_title",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/Chart"
            }
          }
        }
      }
    },
    "\/vapid\/charts\/{chart_id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Dashboards",
      "parameters": [
        {
          "in": "query",
          "name": "company_id",
          "type": "integer",
          "description": "company_id for company level dashboard (either company_id or\nproject_id is required)\n",
          "required": false
        },
        {
          "in": "query",
          "name": "project_id",
          "type": "integer",
          "description": "project_id for project level dashboard (either project_id or\ncompany_id is required)\n",
          "required": false
        },
        {
          "in": "path",
          "name": "chart_id",
          "type": "integer",
          "description": "chart id",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Show Chart",
        "description": "Return the desired Chart\n",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/ChartWithData"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Update Chart",
        "description": "Update the desired Chart\n",
        "parameters": [
          {
            "name": "report_tab_id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "tool_type",
            "in": "query",
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "type": "string"
          },
          {
            "name": "measure",
            "in": "query",
            "type": "string"
          },
          {
            "name": "chart_type",
            "in": "query",
            "type": "string"
          },
          {
            "name": "chart_title",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/Chart"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Delete Chart",
        "description": "Delete a Chart\n",
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "\/vapid\/dashboard_charts": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Dashboards",
      "parameters": [
        {
          "in": "query",
          "name": "company_id",
          "type": "integer",
          "description": "company_id for company level dashboard (either company_id or\nproject_id is required)\n",
          "required": false
        },
        {
          "in": "query",
          "name": "project_id",
          "type": "integer",
          "description": "project_id for project level dashboard (either project_id or\ncompany_id is required)\n",
          "required": false
        },
        {
          "in": "query",
          "name": "dashboard_id",
          "type": "integer",
          "description": "id of dashboard you want to add chart to",
          "required": true
        },
        {
          "in": "query",
          "name": "chart_id",
          "type": "integer",
          "description": "id of chart you want to add to dashboard",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Get specific chart linked to dashboard",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/DashboardChart"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Add chart to dashboard",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/DashboardChartShow"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Update chart's layout on dashboard",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/DashboardChart"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Update chart's layout on dashboard",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/DashboardChart"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Delete a chart off a dashboard",
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "\/vapid\/company\/{company_id}\/report\/{id}\/show": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Reports",
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get company level report details",
        "description": "Show detail on the specified Report.\n",
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "description": "company id",
            "type": "integer",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "report id",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/Report"
            }
          }
        }
      }
    },
    "\/vapid\/project\/{project_id}\/report\/{id}\/show": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Reports",
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get project level report details",
        "description": "Show detail on the specified Report.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "project id",
            "type": "integer",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "report id",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/Report"
            }
          }
        }
      }
    },
    "\/vapid\/erp_vendor_types": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "type": "integer",
          "description": "Company ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "List ERP Vendor Types",
        "description": "Return a list of all ERP Vendor Types for a given Company",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpVendorType"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "Create ERP Vendor Type",
        "description": "Creates an ERP Vendor Type on a given Company",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpVendorTypeCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpVendorType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_vendor_types\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "type": "string",
          "description": "Either the Procore ID or Third-party ID of the ERP Vendor Type\n",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "Show ERP Vendor Type",
        "description": "Show detailed information for a specific ERP Vendor Type\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpVendorType"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "Update ERP Vendor Type",
        "description": "Update an ERP Vendor Type's attributes",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpVendorTypeUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpVendorType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_vendor_types\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Vendor Types",
        "tags": [
          "ERP Integration"
        ],
        "description": "This endpoint creates or updates a batch of ERP Vendor Types\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpVendorTypeSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpVendorType"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpVendorTypeSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_insurance_types": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "get": {
        "summary": "List ERP Insurance Types",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "title": "arrayOfErpInsuranceTypes",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpInsuranceType"
              }
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Insurance Type",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "company_id",
                "insurance_type"
              ],
              "properties": {
                "company_id": {
                  "type": "integer"
                },
                "insurance_type": {
                  "$ref": "#\/definitions\/ErpInsuranceTypeCreate"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpInsuranceType"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      }
    },
    "\/vapid\/erp_insurance_types\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Insurance Types",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "company_id",
                "updates"
              ],
              "properties": {
                "company_id": {
                  "type": "integer"
                },
                "updates": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpInsuranceType"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "title": "arrayOfErpInsuranceTypes",
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpInsuranceType"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpInsuranceTypeSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      }
    },
    "\/vapid\/erp_insurance_types\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ERP Insurance Type ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "Get ERP Insurance Type",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/ErpInsuranceType"
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Insurance Type",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "company_id",
                "insurance_type"
              ],
              "properties": {
                "company_id": {
                  "type": "integer"
                },
                "insurance_type": {
                  "$ref": "#\/definitions\/ErpInsuranceTypeCreate"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#\/definitions\/ErpInsuranceType"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      }
    },
    "\/vapid\/erp_change_order_packages_line_items": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "change_order_package_id",
          "in": "query",
          "description": "ERP Change Order Package ID (Caller must supply either a change_order_package_id or a change_order_package_origin_id)",
          "type": "integer",
          "required": false
        },
        {
          "name": "change_order_package_origin_id",
          "in": "query",
          "description": "ERP Change Order Package Origin ID (Caller must supply either a change_order_package_id or a change_order_package_origin_id)",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "List ERP Change Order Package Line Items",
        "description": "Return a list of all ERP Change Order Package Line Items for a given Erp Change Order Package",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpChangeOrderPackagesLineItems"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Change Order Package Line Item",
        "description": "Creates an ERP Change Order Package Line Item on a given Company",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpChangeOrderPackagesLineItemCreateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#\/definitions\/ErpChangeOrderPackagesLineItems"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_change_order_packages_line_items\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "change_order_package_id",
          "in": "query",
          "description": "ERP Change Order Package ID (Caller must supply either a change_order_package_id or a change_order_package_origin_id)",
          "type": "integer",
          "required": false
        },
        {
          "name": "change_order_package_origin_id",
          "in": "query",
          "description": "ERP Change Order Package Origin ID (Caller must supply either a change_order_package_id or a change_order_package_origin_id)",
          "type": "string",
          "required": false
        }
      ],
      "patch": {
        "summary": "Sync ERP Change Order Package Line Items",
        "description": "This endpoint creates or updates a batch of ERP Change Order Package Line Items",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpChangeOrderPackagesLineItemSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpChangeOrderPackagesLineItems"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpChangeOrderPackagesLineItemsSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_change_order_packages_line_items\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ERP Change Order Package Line Item ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "change_order_package_id",
          "in": "query",
          "description": "ERP Change Order Package ID (Caller must supply either a change_order_package_id or a change_order_package_origin_id)",
          "type": "integer",
          "required": false
        },
        {
          "name": "change_order_package_origin_id",
          "in": "query",
          "description": "ERP Change Order Package Origin ID (Caller must supply either a change_order_package_id or a change_order_package_origin_id)",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "Show ERP Change Order Package Line Item",
        "description": "Show detailed information for a specific ERP Change Order Package Line Item",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpChangeOrderPackagesLineItems"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Change Order Package Line Item",
        "description": "Update an ERP Change Order Package Line Item's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpChangeOrderPackagesLineItemUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#\/definitions\/ErpChangeOrderPackagesLineItems"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_change_order_packages": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "commitment_id",
          "in": "query",
          "description": "The Procore ID of the ERP Change Order Package's ERP Commitment Contract. REQUIRED if commitment_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "commitment_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Change Order Package's ERP Commitment Contract. REQUIRED if commitment_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "List ERP Change Order Packages",
        "description": "Return a list of all ERP Change Order Packages for a given ERP Commitment",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpChangeOrderPackage"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Change Order Package",
        "description": "Creates an ERP Change Order Package on a given ERP Commitment Contract",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpChangeOrderPackageCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpChangeOrderPackage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_change_order_packages\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Change Order Package",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "commitment_id",
          "in": "query",
          "description": "The Procore ID of the ERP Change Order Package's ERP Commitment Contract. REQUIRED if commitment_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "commitment_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Change Order Package's ERP Commitment Contract. REQUIRED if commitment_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "Show ERP Change Order Package",
        "description": "Show detailed information for a specific ERP Change Order Package",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpChangeOrderPackage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Change Order Package",
        "description": "Update an ERP Change Order Package's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpChangeOrderPackageUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpChangeOrderPackage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_change_order_packages\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Change Order Package",
        "description": "Create or Update a batch of ERP Change Order Packages",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpChangeOrderPackageSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpChangeOrderPackage"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpChangeOrderPackageSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_work_order_contracts": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "job_id",
          "in": "query",
          "description": "The Procore ID of the ERP Work Order Contract's ERP Project. REQUIRED if job_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "job_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Work Order Contract's ERP Project. REQUIRED if job_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "List ERP Work Order Contracts",
        "description": "Return a list of all ERP Work Order Contracts for a given ERP Project",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpWorkOrderContract"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Work Order Contract",
        "description": "Creates an ERP Work Order Contract on a given ERP Project",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpWorkOrderContractCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpWorkOrderContract"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_work_order_contracts\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Work Order Contract\n",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "job_id",
          "in": "query",
          "description": "The Procore ID of the ERP Work Order Contract's ERP Project. REQUIRED if job_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "job_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Work Order Contract's ERP Project. REQUIRED if job_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "Get ERP Work Order Contract",
        "description": "Show detailed information for a specific ERP Work Order Contract",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpWorkOrderContract"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Work Order Contract",
        "description": "Update an ERP Work Order Contract's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpWorkOrderContractUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpWorkOrderContract"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_work_order_contracts\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Work Order Contracts",
        "description": "This endpoint creates or updates a batch of ERP Work Order Contracts",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpWorkOrderContractSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpWorkOrderContract"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpWorkOrderContractSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_purchase_order_contracts": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "job_id",
          "in": "query",
          "description": "The Procore ID of the ERP Purchase Order Contract's ERP Project. REQUIRED if job_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "job_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Purchase Order Contract's ERP Project. REQUIRED if job_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "List ERP Purchase Order Contracts",
        "description": "Return a list of all ERP Purchase Order Contracts for a given ERP Project",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpPurchaseOrderContract"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Purchase Order Contract",
        "description": "Creates an ERP Purchase Order Contract on a given ERP Project",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpPurchaseOrderContractCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpPurchaseOrderContract"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_purchase_order_contracts\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Purchase Order Contract\n",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "job_id",
          "in": "query",
          "description": "The Procore ID of the ERP Purchase Order Contract's ERP Project. REQUIRED if job_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "job_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Purchase Order Contract's ERP Project. REQUIRED if job_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "Get ERP Purchase Order Contract",
        "description": "Show detailed information for a specific ERP Purchase Order Contract",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpPurchaseOrderContract"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Purchase Order Contract",
        "description": "Update an ERP Purchase Order Contract's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpPurchaseOrderContractUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpPurchaseOrderContract"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_purchase_order_contracts\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Purchase Order Contracts",
        "description": "This endpoint creates or updates a batch of ERP Purchase Order Contracts",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpPurchaseOrderContractSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpPurchaseOrderContract"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpPurchaseOrderContractSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_job_costs": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "job_id",
          "in": "query",
          "description": "The Procore ID of the ERP Job Costs's ERP Project. REQUIRED if job_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "job_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Job Costs's ERP Project. REQUIRED if job_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "List ERP Job Costs",
        "description": "Return a list of all ERP Job Costs for a given ERP Project",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpJobCost"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Job Cost",
        "description": "Creates an ERP Job Cost on a given ERP Project",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpJobCostCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpJobCost"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_job_costs\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Job Cost\n",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "job_id",
          "in": "query",
          "description": "The Procore ID of the ERP Job Costs's ERP Project. REQUIRED if job_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "job_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Job Costs's ERP Project. REQUIRED if job_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "Get ERP Job Cost",
        "description": "Show detailed information for a specific ERP Job Cost",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpJobCost"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Job Cost",
        "description": "Update an ERP Job Cost's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpJobCostUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpJobCost"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      }
    },
    "\/vapid\/erp_job_costs\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Job Costs",
        "description": "Create or update a batch of ERP Job Costs",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpJobCostSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpJobCost"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpJobCostSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_budgets": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "job_id",
          "in": "query",
          "description": "The Procore ID of the ERP Budget's ERP Project. REQUIRED if job_origin_id is not provided.",
          "type": "integer",
          "required": false
        },
        {
          "name": "job_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Budget's ERP Project. REQUIRED if job_id is not provided.",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "List ERP Budgets",
        "description": "Return a list of all ERP Budgets for a given Company",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpBudget"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Budget",
        "description": "Creates an ERP Budget on a given Company",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpBudgetCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpBudget"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_budgets\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Budget",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "job_id",
          "in": "query",
          "description": "The Procore ID of the ERP Budget's ERP Project. REQUIRED if job_origin_id is not provided.",
          "type": "integer",
          "required": false
        },
        {
          "name": "job_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Budget's ERP Project. REQUIRED if job_id is not provided.",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "Get ERP Budget",
        "description": "Show detailed information for a specific ERP Budget",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpBudget"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Budget",
        "description": "Update an ERP Budget's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpBudgetUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpBudget"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_budgets\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Budgets",
        "description": "Create or update a batch of ERP Budgets",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpBudgetSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpBudget"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpBudgetSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_line_item_types": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "List ERP Line Item Types",
        "description": "Return a list of all ERP Line Item Types for a given Company",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpLineItemType"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Line Item Type",
        "description": "Creates an ERP Line Item Type on a given Company",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpLineItemTypeCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpLineItemType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_line_item_types\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Line Item Type\n",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "Show ERP Line Item Type",
        "description": "Show detailed information for a specific ERP Line Item Type",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpLineItemType"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Line Item Type",
        "description": "Update an ERP Line Item Type's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpLineItemTypeUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#\/definitions\/ErpLineItemType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_line_item_types\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Line Item Types",
        "description": "This endpoint creates or updates a batch of ERP Line Item Types",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpLineItemTypeSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpLineItemType"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpLineItemTypeSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_cost_codes": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "job_id",
          "in": "query",
          "description": "ERP Job ID (Caller must supply either a job_id or a job_origin_id)",
          "type": "integer",
          "required": false
        },
        {
          "name": "job_origin_id",
          "in": "query",
          "description": "ERP Job Origin ID (Caller must supply either a job_id or a job_origin_id)",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "List ERP Cost Codes",
        "tags": [
          "ERP Integration"
        ],
        "description": "Return a list of all ERP Cost Codes for a given Company",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpCostCode"
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "Create ERP Cost Code",
        "description": "Create Erp Cost Code",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpCostCodeCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpCostCode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_cost_codes\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "job_id",
          "in": "query",
          "description": "ERP Job ID (Caller must supply either a job_id or a job_origin_id)",
          "type": "integer",
          "required": false
        },
        {
          "name": "job_origin_id",
          "in": "query",
          "description": "ERP Job Origin ID (Caller must supply either a job_id or a job_origin_id)",
          "type": "string",
          "required": false
        }
      ],
      "patch": {
        "summary": "Sync ERP Cost Codes",
        "tags": [
          "ERP Integration"
        ],
        "description": "Creates or updates a batch of ERP Cost Codes",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpCostCodeSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpCostCode"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpCostCodeSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_cost_codes\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Cost Code",
          "type": "integer",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "Show ERP Cost Code",
        "tags": [
          "ERP Integration"
        ],
        "description": "Show detailed information for a specific ERP Cost Code",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpCostCode"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Cost Code",
        "tags": [
          "ERP Integration"
        ],
        "description": "Update an ERP Cost Code's attributes",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpCostCodeUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpCostCode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_sub_jobs": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "get": {
        "summary": "List ERP Sub Jobs",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "title": "arrayOfErpSubJobs",
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpSubJob"
              }
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Sub Job",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "company_id",
                "sub_job"
              ],
              "properties": {
                "company_id": {
                  "type": "integer"
                },
                "sub_job": {
                  "$ref": "#\/definitions\/ErpSubJobCreate"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpSubJob"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      }
    },
    "\/vapid\/erp_sub_jobs\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Sub Jobs",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "company_id",
                "updates"
              ],
              "properties": {
                "company_id": {
                  "type": "integer"
                },
                "updates": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpSubJob"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "title": "arrayOfErpSubJobs",
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpSubJob"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpSubJobSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      }
    },
    "\/vapid\/erp_sub_jobs\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ERP Sub Job ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "Get ERP Sub Job",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "description": "Company ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#\/definitions\/ErpSubJob"
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Sub Job",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "company_id",
                "sub_job"
              ],
              "properties": {
                "company_id": {
                  "type": "integer"
                },
                "sub_job": {
                  "$ref": "#\/definitions\/ErpSubJobCreate"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#\/definitions\/ErpSubJob"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      }
    },
    "\/vapid\/erp_customers": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "List ERP Customers",
        "description": "Return a list of all ERP Customers for a given Company",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpCustomer"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Customer",
        "description": "Creates an ERP Customer on a given Company",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpCustomerCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpCustomer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_customers\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Customer\n",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "Show ERP Customer",
        "description": "Show detailed information for a specific ERP Customer",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpCustomer"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Customer",
        "description": "Update an ERP Customer's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpCustomerUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#\/definitions\/ErpCustomer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_customers\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Customers",
        "description": "This endpoint creates or updates a batch of ERP Customers",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpCustomerSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpCustomer"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpCustomerSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_accounts": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "List ERP Accounts",
        "tags": [
          "ERP Integration"
        ],
        "description": "Returns a list of all ERP Accounts for a given Company",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpAccount"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Account",
        "tags": [
          "ERP Integration"
        ],
        "description": "Create ERP Account",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpAccountCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_accounts\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "patch": {
        "summary": "Sync ERP Accounts",
        "tags": [
          "ERP Integration"
        ],
        "description": "Creates or updates a batch of ERP Accounts",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpAccountSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpAccount"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpAccountSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_accounts\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Account",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "Show ERP Account",
        "tags": [
          "ERP Integration"
        ],
        "description": "Show detailed infromation for a specific ERP Cost Code",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpAccount"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Account",
        "tags": [
          "ERP Integration"
        ],
        "description": "Update an ERP Account's attributes",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpAccountUpdateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_vendors": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "List ERP Vendors",
        "description": "Return a list of all ERP Vendors for a given Company",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpVendor"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "Create ERP Vendor",
        "description": "Creates an ERP Vendor on a given Company",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpVendorCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpVendor"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_vendors\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Vendor\n",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "Show ERP Vendor",
        "description": "Show detailed information for a specific ERP Vendor\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpVendor"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "Update ERP Vendor",
        "description": "Update an ERP Vendor's attributes",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpVendorUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#\/definitions\/ErpVendor"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_vendors\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Vendors",
        "tags": [
          "ERP Integration"
        ],
        "description": "This endpoint creates or updates a batch of ERP Vendors\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpVendorSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpVendor"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpVendorSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_projects": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "List ERP Projects",
        "description": "Return a list of all ERP Projects for a given Company",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpProject"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Project",
        "description": "Creates an ERP Project on a given Company",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpProjectCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpProject"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_projects\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Project\n",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "Get ERP Project",
        "description": "Show detailed information for a specific ERP Project",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpProject"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Project",
        "description": "Update an ERP Project's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpProjectUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#\/definitions\/ErpProject"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_projects\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Projects",
        "description": "This endpoint creates or updates a batch of ERP Projects",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpProjectSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpProject"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpProjectSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_standard_cost_codes": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "type": "integer",
          "description": "Company ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "List ERP Standard Cost Codes",
        "description": "Return a list of all ERP Standard Cost Codes for a given Company",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpStandardCostCode"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "Create ERP Standard Cost Code",
        "description": "Create ERP Standard Cost Code",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpStandardCostCodeCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpStandardCostCode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_standard_cost_codes\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Either the Procore ID or Third-party ID of the ERP Standard Cost Code",
          "required": true
        },
        {
          "name": "Company",
          "in": "query",
          "type": "integer",
          "description": "Company ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "Show ERP Standard Cost Code",
        "description": "Show detailed infromation for a specific ERP Standard Cost Code",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpStandardCostCode"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ERP Integration"
        ],
        "summary": "Update ERP Standard Cost Code",
        "description": "Update an ERP Standard Cost Code's attributes",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpStandardCostCodeUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpStandardCostCode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unathorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_standard_cost_codes\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "type": "integer",
          "description": "Company ID",
          "required": true
        }
      ],
      "patch": {
        "summary": "Sync ERP Standard Cost Codes",
        "tags": [
          "ERP Integration"
        ],
        "description": "Creates or updates a batch of ERP Standard Cost Codes",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpStandardCostCodeSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpStandardCostCode"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpStandardCostCodeSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_work_order_contract_line_items": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "commitment_id",
          "in": "query",
          "description": "The Procore ID of the ERP Line Item's ERP Work Order Contract. REQUIRED if commitment_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "commitment_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Line Item's ERP Work Order Contract. REQUIRED if commitment_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "List ERP Work Order Contract Line Items",
        "description": "Return a list of all ERP Work Order Contract Line Items for a given ERP Work Order Contract",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpCommitmentLineItem"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Work Order Contract Line Item",
        "description": "Creates an ERP Work Order Contract Line Item on a given ERP Work Order Contract",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpWorkOrderContractLineItemCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpCommitmentLineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_work_order_contract_line_items\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Work Order Contract Line Item\n",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "commitment_id",
          "in": "query",
          "description": "The Procore ID of the ERP Line Item's ERP Work Order Contract. REQUIRED if commitment_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "commitment_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Line Item's ERP Work Order Contract. REQUIRED if commitment_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "Get ERP Work Order Contract Line Item",
        "description": "Show detailed information for a specific ERP Work Order Contract Line Item",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpCommitmentLineItem"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Work Order Contract Line Item",
        "description": "Update an ERP Work Order Contract Line Item's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpWorkOrderContractLineItemUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpCommitmentLineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_work_order_contract_line_items\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Work Order Contract Line Items",
        "description": "Create or Update a batch of ERP Work Order Contract Line Items",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpWorkOrderContractLineItemSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpCommitmentLineItem"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpCommitmentLineItemSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_purchase_order_contract_line_items": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "commitment_id",
          "in": "query",
          "description": "The Procore ID of the ERP Line Item's ERP Purchase Order Contract. REQUIRED if commitment_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "commitment_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Line Item's ERP Purchase Order Contract. REQUIRED if commitment_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "List ERP Purchase Order Contract Line Items",
        "description": "Return a list of all ERP Purchase Order Contract Line Items for a given ERP Purchase Order Contract",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ErpCommitmentLineItem"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create ERP Purchase Order Contract Line Item",
        "description": "Creates an ERP Purchase Order Contract Line Item on a given ERP Purchase Order Contract",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpPurchaseOrderContractLineItemCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/ErpCommitmentLineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_purchase_order_contract_line_items\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Either the Procore ID or Third-party ID of the ERP Purchase Order Contract Line Item\n",
          "type": "string",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "commitment_id",
          "in": "query",
          "description": "The Procore ID of the ERP Line Item's ERP Purchase Order Contract. REQUIRED if commitment_origin_id is not provided.\n",
          "type": "integer",
          "required": false
        },
        {
          "name": "commitment_origin_id",
          "in": "query",
          "description": "The Third-party ID of the ERP Line Item's ERP Purchase Order Contract. REQUIRED if commitment_id is not provided.\n",
          "type": "string",
          "required": false
        }
      ],
      "get": {
        "summary": "Get ERP Purchase Order Contract Line Item",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpCommitmentLineItem"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Purchase Order Contract Line Item",
        "description": "Update an ERP Purchase Order Contract Line Item's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpPurchaseOrderContractLineItemUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpCommitmentLineItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_purchase_order_contract_line_items\/sync": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "patch": {
        "summary": "Sync ERP Purchase Order Contract Line Items",
        "description": "Create or Update a batch of ERP Purchase Order Contract Line Items",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpPurchaseOrderContractLineItemSyncBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpCommitmentLineItem"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/definitions\/ErpCommitmentLineItemSyncError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_sync_events": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "List ERP Sync Events",
        "tags": [
          "ERP Integration"
        ],
        "description": "Return a list of all ERP Sync Events for a given Company",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The ID of the Erp Sync Event",
                    "example": 123
                  },
                  "success": {
                    "type": "boolean",
                    "description": "Flag that denotes if the Sync Event was a success or not",
                    "example": true
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_sync_events\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ERP Sync Event ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "Show ERP Sync Event",
        "tags": [
          "ERP Integration"
        ],
        "description": "Show detailed information for a specific ERP Sync Event",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpSyncEvent"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Sync Event",
        "tags": [
          "ERP Integration"
        ],
        "description": "Update an ERP Sync Event's attributes",
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpSyncEventUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpSyncEvent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_connections": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "List ERP Connections",
        "description": "Return a list of all ERP Connections for a given Company",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpConnection"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/erp_connections\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "ERP Integration",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ERP Connection ID",
          "type": "integer",
          "required": true
        },
        {
          "name": "company_id",
          "in": "query",
          "description": "Company ID",
          "type": "integer",
          "required": true
        }
      ],
      "get": {
        "summary": "Show ERP Connection",
        "description": "Show detailed information for a specific ERP Connection",
        "tags": [
          "ERP Integration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpConnection"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update ERP Connection",
        "description": "Update an ERP Connection's attributes",
        "tags": [
          "ERP Integration"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/ErpConnectionUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/ErpConnection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/user_access_levels": {
      "x-support-level": "Prototype",
      "x-gelato-group": "User Access Level",
      "get": {
        "summary": "List of user access levels",
        "tags": [
          "User Access Level"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/UserAccessLevel"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/user_access_levels\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "User Access Level",
      "get": {
        "summary": "Show user access level",
        "parameters": [
          {
            "name": "id",
            "description": "access level id",
            "required": true,
            "in": "path",
            "type": "integer"
          }
        ],
        "tags": [
          "User Access Level"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/UserAccessLevel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/settings\/permissions": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Permissions",
      "parameters": [
        {
          "in": "query",
          "name": "project_id",
          "type": "integer",
          "description": "Provide for project level permissions"
        },
        {
          "in": "query",
          "name": "company_id",
          "type": "integer",
          "description": "Provide for company level permissions"
        }
      ],
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Show permission manifest",
        "description": "Company or project permission manifest for the current user",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Permission"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/specification_sections": {
      "x-gelato-group": "Specification Sections",
      "x-support-level": "Development",
      "get": {
        "summary": "List Specification Sections",
        "description": "List the Specification Sections in a Project\n",
        "tags": [
          "Specifications"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/SpecificationSection"
              }
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      }
    },
    "\/vapid\/specification_section_revisions": {
      "x-support-level": "Development",
      "x-gelato-group": "Specification Section Revisions",
      "get": {
        "summary": "List Specification Section Revisions for a Specification Section Division",
        "tags": [
          "Specifications"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "type": "integer"
          },
          {
            "name": "specification_section_division_id",
            "in": "query",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/SpecificationSectionRevision"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/specification_sets": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Specification Sets",
      "get": {
        "summary": "List Specification Sets",
        "description": "List the Specification Sets in a Project\n",
        "tags": [
          "Specifications"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/SpecificationSet"
              }
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      },
      "post": {
        "summary": "Create Specification Set",
        "description": "Create a new Specification Set\n",
        "tags": [
          "Specifications"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "The ID of the project for the new set",
            "type": "integer",
            "required": true
          },
          {
            "name": "name",
            "in": "formData",
            "type": "string",
            "required": true
          },
          {
            "name": "date",
            "in": "formData",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#\/definitions\/SpecificationSet"
            }
          },
          "400": {
            "description": "Invalid set",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/specification_sets\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Specification Sets",
      "get": {
        "summary": "Show Specification Set",
        "description": "Show a specific Specification Set",
        "tags": [
          "Specifications"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "description": "ID of the specification section to show",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#\/definitions\/SpecificationSet"
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "404": {
            "description": "Invalid specification set ID",
            "schema": {
              "$ref": "#\/definitions\/NotFoundError"
            }
          }
        }
      }
    },
    "\/vapid\/specification_section_divisions": {
      "x-support-level": "Development",
      "x-gelato-group": "Specification Section Divisions",
      "get": {
        "summary": "List Specification Section Divisions for a Project",
        "tags": [
          "Specifications"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/SpecificationSectionDivision"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/specification_uploads": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Specification Uploads",
      "post": {
        "summary": "Upload Specifications",
        "description": "Upload Specifications that will be pending review\n",
        "tags": [
          "Specifications"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "The ID of the project to upload to",
            "type": "integer",
            "required": true
          },
          {
            "name": "specification_set_id",
            "in": "formData",
            "description": "The ID of the specification set to upload to",
            "required": true,
            "type": "integer"
          },
          {
            "name": "files[]",
            "in": "formData",
            "description": "The specification files to upload (must be in PDF format)",
            "type": "file",
            "required": true
          },
          {
            "name": "issued_date",
            "in": "formData",
            "description": "The date the specifications were authored",
            "type": "string",
            "format": "date"
          },
          {
            "name": "received_date",
            "in": "formData",
            "description": "The date the specifications were received",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/SpecificationUpload"
            }
          },
          "400": {
            "description": "Invalid upload",
            "schema": {
              "$ref": "#\/definitions\/ActiveRecordError"
            }
          },
          "401": {
            "description": "Company or project is not valid, user is not an active contact, company does not have an ERP connection",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "403": {
            "description": "User has insufficient access",
            "schema": {
              "$ref": "#\/definitions\/SimpleError"
            }
          },
          "404": {
            "description": "Invalid specification set ID",
            "schema": {
              "$ref": "#\/definitions\/NotFoundError"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/permission_templates": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Permission Templates",
      "get": {
        "tags": [
          "Permission Templates"
        ],
        "summary": "List permission templates of a company",
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "type": "integer",
            "description": "The ID of the Company from which to fetch permission templates.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#\/definitions\/PermissionTemplates"
            },
            "examples": {
              "application\/json": {
                "id": 1,
                "name": "Owner"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/permission_templates\/{id}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Permission Templates",
      "patch": {
        "tags": [
          "Permission Templates"
        ],
        "summary": "Update permission templates",
        "description": "Updates Permission Template in the specified Company.\n",
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "type": "integer",
            "description": "The ID of the Company from which to the permission template belongs to.",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "The ID of the permission template that is being updated",
            "required": true
          },
          {
            "$ref": "#\/parameters\/PermissionTemplateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#\/definitions\/PermissionTemplate"
            },
            "examples": {
              "application\/json": {
                "id": 1,
                "name": "Owner",
                "template": [
                  [
                    1,
                    2
                  ],
                  [
                    3,
                    1
                  ]
                ]
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/permission_templates": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Permission Templates",
      "get": {
        "tags": [
          "Permission Templates"
        ],
        "summary": "List permission templates",
        "description": "Returns the Permission Template names and IDs for the specified Project.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "type": "integer",
            "description": "The ID of the Project from which to retrieve permission templates.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#\/definitions\/PermissionTemplates"
            },
            "examples": {
              "application\/json": [
                {
                  "id": 1,
                  "name": "General Contractor"
                },
                {
                  "id": 2,
                  "name": "Subcontractor"
                }
              ]
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/transmittals": {
      "x-gelato-group": "Transmittals",
      "x-support-level": "development",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Transmittals"
        ],
        "summary": "List transmittals",
        "description": "Returns a list of transmittals on a given project",
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "name": "filters[query]",
            "in": "query",
            "type": "string",
            "description": "Search Query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/TransmittalNormal"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transmittals"
        ],
        "summary": "Create transmittal",
        "description": "Creates a transmittal on a given project",
        "parameters": [
          {
            "$ref": "#\/parameters\/TransmittalCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/TransmittalExtended"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/transmittals\/{id}": {
      "x-gelato-group": "Transmittals",
      "x-support-level": "development",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Transmittal ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Transmittals"
        ],
        "summary": "Show transmittal",
        "description": "Show detailed information for a specific transmittal\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/TransmittalExtended"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Transmittals"
        ],
        "summary": "Update transmittal",
        "description": "Update a transmittal's attributes",
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/TransmittalUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/TransmittalExtended"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Transmittals"
        ],
        "summary": "Destroy Transmittal",
        "description": "Send a transmittal to the recycle bin. Note: admin only\n",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/transmittals\/{id}\/restore": {
      "x-gelato-group": "Transmittals",
      "x-support-level": "development",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Transmittal ID",
          "required": true
        }
      ],
      "patch": {
        "tags": [
          "Transmittals"
        ],
        "summary": "Retrieve a recycled transmittal",
        "description": "If a transmittal has been sent to the recycle bin, this endpoint\nwill restore it. Note: admin only.\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/TransmittalExtended"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/transmittals\/recycle_bin": {
      "x-gelato-group": "Transmittals",
      "x-support-level": "development",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Transmittals"
        ],
        "summary": "List recycled transmittals",
        "description": "The Recycle Bin endpoint represents a project's recycled transmittals. Note: admin only\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          },
          {
            "name": "filters[query]",
            "in": "query",
            "type": "string",
            "description": "Search Query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/TransmittalRecycled"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/transmittals\/potential_assignees": {
      "x-gelato-group": "Transmittals",
      "x-support-level": "development",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Transmittals"
        ],
        "summary": "List potential transmittal assignees",
        "description": "Returns all valid logins assignable to a transmittal for the current\nuser and project.\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/transmittals\/potential_actions": {
      "x-gelato-group": "Transmittals",
      "x-support-level": "development",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Transmittals"
        ],
        "summary": "List potential transmittal actions",
        "description": "Returns all potential actions for a transmittal",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "example": {
                "0": "Out for Signature",
                "1": "Approved as Submitted",
                "2": "Approved as Noted",
                "3": "Submit",
                "4": "Resubmitted",
                "5": "Returned",
                "6": "Returned for Corrections",
                "7": "Resubmit",
                "8": "Due By",
                "9": "Received",
                "10": "Received as Noted",
                "11": "Sent date"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/transmittals\/potential_reasons": {
      "x-gelato-group": "Transmittals",
      "x-support-level": "development",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Transmittals"
        ],
        "summary": "List potential transmittal reasons",
        "description": "Returns all potential reasons for a transmittal",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "example": {
                "1": "Approval",
                "2": "Your Use",
                "3": "As Requested",
                "4": "Review and Comment",
                "5": "Further Processing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/transmittals\/{transmittal_id}\/items": {
      "x-gelato-group": "Transmittals",
      "x-support-level": "development",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "transmittal_id",
          "in": "path",
          "type": "integer",
          "description": "Transmittal ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Transmittals"
        ],
        "summary": "List transmittal items",
        "description": "Lists a transmittals related items, such as records or attachments.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/TransmittalItemNormal"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transmittals"
        ],
        "summary": "Create transmittal item",
        "description": "Creates a related item record on a transmittal.\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/TransmittalItemCreateBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/TransmittalItemExtended"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/transmittals\/{transmittal_id}\/items\/{id}": {
      "x-gelato-group": "Transmittals",
      "x-support-level": "development",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "transmittal_id",
          "in": "path",
          "type": "integer",
          "description": "Transmittal ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Transmittal ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Transmittals"
        ],
        "summary": "Show transmittal item",
        "description": "Returns the details information for a transmittal item\n",
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              }
            },
            "schema": {
              "$ref": "#\/definitions\/TransmittalItemExtended"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Transmittals"
        ],
        "summary": "Update transmittal item",
        "description": "Updates attributes for a specific transmittal item",
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/TransmittalItemUpdateBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/TransmittalItemExtended"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Transmittals"
        ],
        "summary": "Delete transmittal item",
        "description": "Delete a transmittal item. Note: This does not recycle, and will permanently destroy the item. Exercise with caution!\n",
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/TransmittalItemUpdateBody"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/sticky_filters": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Sticky Filters",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "x-support-level": "Internal",
        "tags": [
          "Sticky Filters"
        ],
        "summary": "List Sticky Filters",
        "description": "Return a list of all Sticky Filters associated with the specified Project.\n\nSticky Filters endpoint defines a persistent store for front end filters.\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/StickyFilters"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/sticky_filters\/{tool}": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Sticky Filters",
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "tool",
          "in": "path",
          "type": "string",
          "description": "Sticky filter tool identifier",
          "required": true,
          "enum": [
            "submittal_log",
            "budgeting",
            "observations",
            "checklist",
            "configurable_budgeting",
            "rfi"
          ]
        }
      ],
      "get": {
        "x-support-level": "Internal",
        "tags": [
          "Sticky Filters"
        ],
        "summary": "Show Sticky Filter",
        "description": "Return detailed information on the specified Sticky Filter for a specified Tool and Project.\n\nSticky Filters endpoint defines a persistent store for front end filters.\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/StickyFilter"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "x-support-level": "Internal",
        "tags": [
          "Sticky Filters"
        ],
        "summary": "Update Sticky Filter",
        "description": "Update the specified Sticky Filter for a specified Tool and Project.\n\nSticky Filters endpoint defines a persistent store for front end filters\n",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "example": {
                "filters": {
                  "status": [
                    2141
                  ],
                  "location_id": [
                    917832
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "delete": {
        "x-support-level": "Internal",
        "tags": [
          "Sticky Filters"
        ],
        "summary": "Delete Sticky Filter",
        "description": "Delete the specified Sticky Filter for a specified Tool and Project.\n\nSticky Filters endpoint defines a persistent store for front end filters\n",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/projects\/{project_id}\/tools": {
      "x-support-level": "Prototype",
      "x-gelato-group": "Project Tools",
      "get": {
        "tags": [
          "Project Tools"
        ],
        "summary": "List project tools",
        "description": "Returns all Tools available to the provided Project.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "type": "integer",
            "description": "The ID of the Project from which to retrieve available tools.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#\/definitions\/Tools"
            },
            "examples": {
              "application\/json": [
                {
                  "id": 1,
                  "engine_name": "home",
                  "is_active": true,
                  "position": 1,
                  "required": true
                },
                {
                  "id": 2,
                  "engine_name": "rfi",
                  "is_active": true,
                  "position": 2,
                  "required": false
                },
                {
                  "id": 3,
                  "engine_name": "admin",
                  "is_active": true,
                  "position": 3,
                  "required": true
                }
              ]
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Project Tools"
        ],
        "summary": "Update project tools",
        "description": "Updates the order and active status of Project Tools.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "type": "integer",
            "description": "The ID of the Project from which to update tools.",
            "required": true
          },
          {
            "name": "tools[]",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the Tool",
                  "example": 1
                },
                "is_active": {
                  "type": "boolean",
                  "description": "Indicates whether the tool is currently active",
                  "example": true
                },
                "position": {
                  "type": "integer",
                  "description": "The ordering position of the Tool",
                  "example": 3
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#\/definitions\/Tools"
            },
            "examples": {
              "application\/json": [
                {
                  "id": 1,
                  "engine_name": "home",
                  "is_active": true,
                  "position": 1,
                  "required": true
                },
                {
                  "id": 2,
                  "engine_name": "rfi",
                  "is_active": true,
                  "position": 2,
                  "required": false
                },
                {
                  "id": 3,
                  "engine_name": "admin",
                  "is_active": true,
                  "position": 3,
                  "required": true
                }
              ]
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/communications\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Communications",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Communication ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Show Communication",
        "description": "Shows detailed information around a single email communication",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CommunicationExtended"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/communications": {
      "x-support-level": "Internal",
      "x-gelato-group": "Communications",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Communications"
        ],
        "summary": "Create communication",
        "description": "Creates a communication on a given project",
        "consumes": [
          "multipart\/form-data"
        ],
        "parameters": [
          {
            "name": "file[data]",
            "type": "file",
            "in": "formData",
            "description": "The file to create a communication must be an msg file",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#\/definitions\/CommunicationExtended"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/communications\/{communication_id}\/threads": {
      "x-support-level": "Production",
      "x-gelato-group": "Communications",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "communication_id",
          "in": "path",
          "type": "integer",
          "description": "Communication ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Get Communication Threads",
        "description": "The Communications endpoint represents email communications\n",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CommunicationThreadNormal"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/communications\/{communication_id}\/threads\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Communications",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "communication_id",
          "in": "path",
          "type": "integer",
          "description": "Communication ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Communication Thread ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Show Communication Thread",
        "description": "Shows detailed information for a specific email communication thread",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/CommunicationThreadExtended"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/bids": {
      "x-support-level": "Production",
      "x-gelato-group": "Bids",
      "get": {
        "summary": "List bids",
        "description": "Return a list of your assigned Bids within a Company.\n",
        "tags": [
          "Bids"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Bids",
              "items": {
                "$ref": "#\/definitions\/BidIndex"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/companies\/{company_id}\/bids\/{id}": {
      "x-support-level": "Production",
      "x-gelato-group": "Bids",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Show bid",
        "description": "Return detailed information about a specified Bid.\n",
        "tags": [
          "Bids"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Bid"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update bid",
        "description": "Update a Bid.\n",
        "tags": [
          "Bids"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/BidBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Bid"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update bid",
        "description": "Update a Bid.\n",
        "tags": [
          "Bids"
        ],
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "type": "integer"
          },
          {
            "$ref": "#\/parameters\/BidBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#\/definitions\/Bid"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/bids": {
      "x-support-level": "Production",
      "x-gelato-group": "Bids",
      "get": {
        "summary": "List bids",
        "description": "Return a list of your assigned bids across companies.\n",
        "tags": [
          "Bids"
        ],
        "parameters": [
          {
            "$ref": "#\/parameters\/Page"
          },
          {
            "$ref": "#\/parameters\/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items retrieved per page"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              },
              "Link": {
                "type": "array",
                "description": "Link headers for the first, prev, next, and last link.",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "type": "array",
              "description": "Array of Bids",
              "items": {
                "$ref": "#\/definitions\/BidIndex"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    },
    "\/vapid\/project_configuration": {
      "x-gelato-group": "Project Configuration",
      "x-support-level": "internal",
      "parameters": [
        {
          "name": "project_id",
          "in": "query",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Project Configuration"
        ],
        "summary": "List project configurations",
        "description": "Returns a list of configurations on a given project",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Per-Page": {
                "type": "integer",
                "description": "Number of items per page that will be retrieved"
              },
              "Total": {
                "type": "integer",
                "description": "Total number of items to be retrieved"
              }
            },
            "schema": {
              "$ref": "#\/definitions\/ProjectConfigurationExtended"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#\/definitions\/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "string"
        }
      }
    },
    "SimpleError": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "string"
        }
      }
    },
    "ActiveRecordError": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "properties": {
            "field_name": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "NotFoundError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        }
      }
    },
    "Me": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "login": {
          "type": "string",
          "description": "The email address that the user uses to log into Procore."
        },
        "name": {
          "type": "string",
          "description": "User name."
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 160586
        },
        "login": {
          "type": "string",
          "description": "Email",
          "example": "gino+standard@procore.com"
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Gino Standard"
        }
      }
    },
    "Communication": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "subject": {
          "type": "string",
          "description": "Subject"
        }
      }
    },
    "CommunicationNormal": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "created_at": {
              "type": "string",
              "description": "Date created",
              "format": "date"
            },
            "private": {
              "type": "boolean",
              "description": "Private flag"
            },
            "closed": {
              "type": "boolean",
              "description": "Closed flag"
            }
          }
        },
        {
          "$ref": "#\/definitions\/Communication"
        }
      ]
    },
    "CommunicationExtended": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "initial_post": {
              "$ref": "#\/definitions\/CommunicationThread"
            }
          }
        },
        {
          "$ref": "#\/definitions\/CommunicationNormal"
        }
      ]
    },
    "CommunicationThread": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "subject": {
          "type": "string",
          "description": "Subject"
        },
        "email_sent_at": {
          "type": "string",
          "description": "Date email sent",
          "format": "date-time"
        }
      }
    },
    "CommunicationThreadNormal": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "from_external_email": {
              "type": "boolean",
              "description": "Flag indicating whether the communication originated outside of Procore"
            },
            "from": {
              "$ref": "#\/definitions\/User"
            },
            "to": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            }
          }
        },
        {
          "$ref": "#\/definitions\/CommunicationThread"
        }
      ]
    },
    "CommunicationThreadExtended": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "string",
              "description": "Body"
            },
            "cc": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            },
            "bcc": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            },
            "attachments": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/ProstoreFile"
              }
            }
          }
        },
        {
          "$ref": "#\/definitions\/CommunicationThreadNormal"
        }
      ]
    },
    "Company": {
      "type": "object",
      "title": "Company",
      "description": "Company",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Company id",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "Company name",
          "example": "ABC Drywall"
        },
        "is_active": {
          "type": "boolean",
          "description": "Company is active status",
          "example": true
        }
      }
    },
    "CompanyFull": {
      "allOf": [
        {
          "$ref": "#\/definitions\/Company"
        },
        {
          "type": "object",
          "properties": {
            "company_type": {
              "type": "string",
              "enum": [
                "general_contractor",
                "heavy_highway_civil",
                "owner",
                "professional_services",
                "subcontractor",
                "real_estate_developer",
                "engineer",
                "architect",
                "consultant",
                "construction_manager_as_agent",
                "unrelated_industry"
              ],
              "description": "Company type",
              "example": "subcontractor"
            },
            "logo_url": {
              "type": "string",
              "description": "Company logo url",
              "example": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20130828035959_production_14343315.gif?AWSAccessKeyId=0PFNH01C4MZVXKXZNK82&Expires=2074113135&Signature=Brx6iog1TMm0Kn%2BtX1AMh3kVfvo%3D"
            }
          }
        }
      ]
    },
    "CompanyUser": {
      "type": "object",
      "title": "Company User",
      "description": "Company User",
      "properties": {
        "address": {
          "type": "string",
          "description": "Company user address",
          "example": "6305 Carpinteria Ave"
        },
        "avatar": {
          "type": "string",
          "description": "Company user avatar url",
          "example": "http:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20150713184222_production_74548228.gif?AWSAccessKeyId=0PFNH01C4MZVXKXZNK82&Expires=2067964943&Signature=l4zpZIM3bgxydrr4hn6lM%2FdtreQ%3D"
        },
        "business_phone": {
          "type": "string",
          "description": "Company user business phone",
          "example": "1234567890"
        },
        "business_phone_extension": {
          "type": "string",
          "description": "Company user business phone extension"
        },
        "city": {
          "type": "string",
          "description": "Company user city",
          "example": "Carpinteria"
        },
        "country_code": {
          "type": "string",
          "description": "Company user country code",
          "example": "US"
        },
        "email_address": {
          "type": "string",
          "format": "email",
          "description": "Company user email",
          "example": "leah@procore.com"
        },
        "email_signature": {
          "type": "string",
          "description": "Company user email signature",
          "example": "<p>Sent from Procore.<\/p>"
        },
        "employee_id": {
          "type": "string",
          "description": "Company user employee id",
          "example": "123456789"
        },
        "fax_number": {
          "type": "string",
          "description": "Company user fax number",
          "example": "5555555555"
        },
        "first_name": {
          "type": "string",
          "description": "Company user first name",
          "example": "Leah"
        },
        "id": {
          "type": "integer",
          "description": "Company user id",
          "example": 381006
        },
        "initials": {
          "type": "string",
          "description": "Company user initials",
          "example": "LR"
        },
        "is_active": {
          "type": "boolean",
          "description": "Company user active status",
          "example": true
        },
        "is_employee": {
          "type": "boolean",
          "description": "Company user employee status",
          "example": false
        },
        "job_title": {
          "type": "string",
          "description": "Company user job title",
          "example": "QA Manager"
        },
        "last_login_at": {
          "type": "string",
          "format": "date-time",
          "description": "Company user last login at",
          "example": "2016-06-30T20:41:58Z"
        },
        "last_name": {
          "type": "string",
          "description": "Company user last name",
          "example": "Russell"
        },
        "mobile_phone": {
          "type": "string",
          "description": "Company user mobile phone",
          "example": 5555555555
        },
        "notes": {
          "type": "string",
          "description": "Company user notes",
          "example": "notes"
        },
        "state_code": {
          "type": "string",
          "description": "Company user state code",
          "example": "CA"
        },
        "zip": {
          "type": "string",
          "description": "Company user zip code",
          "example": "93013"
        },
        "origin_id": {
          "type": "string",
          "description": "Company user origin id"
        },
        "origin_data": {
          "type": "string",
          "description": "Company user origin data"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Project user created at",
          "example": "2016-10-23T21:39:40Z"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Project user updated at",
          "example": "2016-10-23T21:39:40Z"
        },
        "vendor": {
          "$ref": "#\/definitions\/VendorCompact"
        }
      }
    },
    "Department": {
      "title": "Department",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Department ID"
        },
        "name": {
          "type": "string",
          "description": "Department name"
        }
      },
      "example": {
        "id": 1,
        "name": "Department A"
      }
    },
    "DrawingUpload": {
      "title": "DrawingUpload",
      "type": "object",
      "description": "Drawing Upload",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Drawing Upload ID",
          "example": 85
        },
        "project_id": {
          "type": "integer",
          "description": "Project ID",
          "example": 2
        },
        "created_by_id": {
          "type": "integer",
          "description": "ID of creator",
          "example": 5
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Drawing Upload created at",
          "example": "2016-08-08T21:35:58Z"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Drawing Upload updated at",
          "example": "2016-08-08T21:35:58Z"
        },
        "error_email_sent": {
          "type": "boolean",
          "description": "Error email sent status",
          "example": false
        },
        "notify_on_success": {
          "type": "boolean",
          "description": "Notify on success status",
          "example": false
        },
        "deletion_in_progress": {
          "type": "boolean",
          "description": "Deletion in progress status",
          "example": false
        },
        "success_email_sent": {
          "type": "boolean",
          "description": "Success email sent status",
          "example": false
        },
        "drawing_area_id": {
          "type": "integer",
          "description": "Drawing Area ID",
          "example": 1
        },
        "status": {
          "type": "string",
          "enum": [
            "in_queue",
            "in_progress",
            "mechanical_turk",
            "failed",
            "ready_for_review",
            "reviewed"
          ],
          "example": "in_progress"
        },
        "pre_adaptive_complete": {
          "type": "boolean",
          "description": "Pre adaptive complete status",
          "example": false
        },
        "drawing_number_contains_revision": {
          "type": "boolean",
          "description": "Drawing number contains revision",
          "example": false
        },
        "get_info_from_filename": {
          "type": "boolean",
          "description": "Get info from filename",
          "example": false
        }
      }
    },
    "DrawingSet": {
      "type": "object",
      "title": "DrawingSet",
      "description": "Drawing Set",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Drawing Set ID",
          "example": 268062
        },
        "project_id": {
          "type": "integer",
          "description": "Drawing Set project ID",
          "example": 225096
        },
        "name": {
          "type": "string",
          "description": "Drawing Set name",
          "example": "another new drawing set"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Drawing Set created at",
          "example": "2016-09-01T20:02:27Z"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Drawing Set updated at",
          "example": "2016-09-01T20:02:27Z"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Drawing Set date",
          "example": "2016-08-31"
        },
        "position": {
          "type": "integer",
          "description": "Drawing Set position",
          "example": 1
        }
      }
    },
    "DrawingArea": {
      "type": "object",
      "description": "Drawing Area",
      "title": "DrawingArea",
      "properties": {
        "drawings_count": {
          "type": "integer",
          "description": "Amount of Drawings",
          "example": 3
        },
        "id": {
          "type": "integer",
          "description": "Drawing Area ID",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "Drawing Area name",
          "example": "Building A"
        },
        "drawing_sets": {
          "type": "array",
          "description": "Array of Drawing Sets",
          "items": {
            "type": "object",
            "properties": {
              "drawing_revisions_count": {
                "type": "integer",
                "description": "Amount of Drawing Revisions",
                "example": 3
              },
              "id": {
                "type": "integer",
                "description": "Drawing Set ID",
                "example": 1122
              },
              "name": {
                "type": "string",
                "description": "Drawing Set name",
                "example": "Drawing Set 1"
              }
            }
          }
        },
        "drawing_disciplines": {
          "type": "array",
          "description": "Array of Drawing Disciplines",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Drawing Discipline ID",
                "example": 6739
              },
              "name": {
                "type": "string",
                "description": "Drawing Discipline name",
                "example": "Architectural"
              },
              "position": {
                "type": "integer",
                "description": "Drawing Discipline position",
                "example": 1
              }
            }
          }
        }
      }
    },
    "DrawingRevision": {
      "allOf": [
        {
          "$ref": "#\/definitions\/DrawingRevisionCurrent"
        },
        {
          "type": "object",
          "title": "DrawingRevision",
          "description": "Drawing Revision",
          "properties": {
            "drawing_set": {
              "type": "object",
              "description": "Drawing Set",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Drawing Set ID",
                  "example": 123
                }
              }
            },
            "drawing_area": {
              "type": "object",
              "description": "Drawing Area",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Drawing Area ID",
                  "example": 456
                }
              }
            },
            "current": {
              "type": "boolean",
              "description": "Current Drawing Revision",
              "example": true
            },
            "drawing_id": {
              "type": "integer",
              "description": "Drawing ID",
              "example": 1
            },
            "number": {
              "type": "string",
              "description": "Drawing Revision number",
              "example": "A2"
            },
            "height": {
              "type": "integer",
              "description": "Height",
              "example": 3431
            },
            "width": {
              "type": "integer",
              "description": "Width",
              "example": 4803
            },
            "title": {
              "type": "string",
              "description": "Title",
              "example": "Floor 2"
            },
            "drawing_sketches_count": {
              "type": "integer",
              "description": "Amount of drawing sketches",
              "example": 2
            },
            "has_public_markup_layer_elements": {
              "type": "boolean",
              "description": "Has public markup layer elements status",
              "example": true
            },
            "received_date": {
              "type": "string",
              "format": "date",
              "description": "Received date",
              "example": "2015-03-17"
            },
            "drawing_date": {
              "type": "string",
              "format": "date",
              "description": "Drawing date",
              "example": "2015-03-17"
            },
            "activity_stream_last_viewed_at": {
              "type": "string",
              "format": "date-time",
              "description": "Activity stream last viewed at",
              "example": "2015-03-19T12:11:00Z"
            },
            "position": {
              "type": "integer",
              "description": "Drawing Revision position",
              "example": 2
            },
            "discipline": {
              "type": "object",
              "description": "Drawing discipline",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Discipline ID",
                  "example": 1234
                },
                "name": {
                  "type": "string",
                  "description": "Discipline name",
                  "example": "Architectural"
                },
                "position": {
                  "type": "integer",
                  "description": "Discipline position",
                  "example": 1
                }
              }
            }
          }
        }
      ]
    },
    "DrawingRevisionCurrent": {
      "type": "object",
      "description": "Current revision",
      "properties": {
        "floorplan": {
          "type": "boolean",
          "description": "Revision floorplan status",
          "example": false
        },
        "has_drawing_sketches": {
          "type": "boolean",
          "description": "Revision has drawing sketches status",
          "example": true
        },
        "id": {
          "type": "integer",
          "description": "Revision ID",
          "example": 2
        },
        "pdf_size": {
          "type": "integer",
          "description": "PDF file size",
          "example": 1024000
        },
        "pdf_url": {
          "type": "string",
          "description": "PDF url address",
          "example": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/drawing.pdf"
        },
        "png_size": {
          "type": "integer",
          "description": "PNG file size",
          "example": 1024000
        },
        "png_url": {
          "type": "string",
          "description": "PNG url address",
          "example": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/drawing.png"
        },
        "revision_number": {
          "type": "string",
          "description": "Revision number",
          "example": "0"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "Thumbnail url",
          "example": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/drawing_thumbnail.png"
        },
        "large_thumbnail_url": {
          "type": "string",
          "description": "Large thumbnail url",
          "example": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/drawing_thumbnail_large.png"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Revision updated at",
          "example": "2015-03-19T12:00:00Z"
        }
      }
    },
    "DrawingTile": {
      "title": "DrawingTile",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Drawing Tile ID",
          "example": 402785892
        },
        "x": {
          "type": "integer",
          "description": "Tile X",
          "example": 8
        },
        "y": {
          "type": "integer",
          "description": "Tile Y",
          "example": 6
        },
        "z": {
          "type": "integer",
          "description": "Zoom level",
          "example": 2
        },
        "url": {
          "type": "string",
          "description": "Tile url",
          "example": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20160822203650_production_615139946.png?AWSAccessKeyId=AKIAJ5EH2SRCJA6V2DKA&Expires=2103050211&Signature=SaIqaFCh4gKqLteq7r2FLHGra0Q%3D"
        }
      }
    },
    "Drawing": {
      "type": "object",
      "description": "Drawing",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Drawing ID",
          "example": 1
        },
        "discipline": {
          "type": "string",
          "description": "Drawing discipline",
          "example": "Architectural"
        },
        "number": {
          "type": "string",
          "description": "Drawing number",
          "example": "A2"
        },
        "title": {
          "type": "string",
          "description": "Drawing title",
          "example": "Architectural 2nd Floor"
        },
        "obsolete": {
          "type": "boolean",
          "description": "Obsolete status",
          "example": true
        },
        "current_revision": {
          "$ref": "#\/definitions\/DrawingRevisionCurrent"
        }
      }
    },
    "ProjectIndex": {
      "title": "Project",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Project ID"
        },
        "name": {
          "type": "string",
          "description": "Project name"
        },
        "display_name": {
          "type": "string",
          "description": "Project display name"
        },
        "project_number": {
          "type": "string",
          "description": "Project number"
        },
        "address": {
          "type": "string",
          "description": "Project address"
        },
        "city": {
          "type": "string",
          "description": "Project city"
        },
        "state_code": {
          "type": "string",
          "description": "Project state code"
        },
        "country_code": {
          "type": "string",
          "description": "Project country code"
        },
        "zip": {
          "type": "string",
          "description": "Project zip code"
        },
        "stage": {
          "type": "string",
          "description": "Project stage name"
        },
        "phone": {
          "type": "string",
          "description": "Project phone"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Project created at"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Project updated at"
        },
        "active": {
          "type": "boolean",
          "description": "Project active status"
        },
        "origin_id": {
          "type": "string",
          "description": "Project third party id"
        },
        "origin_data": {
          "type": "string",
          "description": "Project third party data"
        },
        "company": {
          "title": "ProjectCompany",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Company ID"
            },
            "name": {
              "type": "string",
              "description": "Company name"
            }
          }
        }
      },
      "example": {
        "id": 12738,
        "name": "Lakeside Mised Use",
        "display_name": "12 - Lakeside Mised Use",
        "project_number": "12",
        "address": "123 First St.",
        "city": "Carpinteria",
        "state_code": "CA",
        "country_code": "US",
        "zip": "93103",
        "stage": "Course of Construction",
        "phone": "480-800-5555",
        "created_at": "2014-12-29T21:53:56Z",
        "updated_at": "2015-04-20T18:09:33Z",
        "active": true,
        "company": {
          "id": 1234,
          "name": "CA Construction"
        }
      }
    },
    "PermittedAction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 12
        },
        "action_name": {
          "type": "string",
          "example": "destroy_files_and_folders"
        },
        "label": {
          "type": "string",
          "example": "Delete folders and files"
        },
        "tool_name": {
          "type": "string",
          "example": "documents"
        }
      }
    },
    "Permission": {
      "type": "object",
      "properties": {
        "tools": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/PermissionTool"
          }
        }
      }
    },
    "PermissionTool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "documents"
        },
        "domain_id": {
          "type": "integer",
          "example": 14
        },
        "user_access_level": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 4
            },
            "name": {
              "type": "string",
              "example": "Admin"
            }
          }
        },
        "permitted_actions": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/PermittedAction"
          }
        }
      }
    },
    "Project": {
      "title": "Project",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Project ID"
        },
        "logo_url": {
          "type": "string",
          "description": "Project logo url"
        },
        "name": {
          "type": "string",
          "description": "Project name"
        },
        "display_name": {
          "type": "string",
          "description": "Project display name"
        },
        "project_number": {
          "type": "string",
          "description": "Project number"
        },
        "address": {
          "type": "string",
          "description": "Project address"
        },
        "city": {
          "type": "string",
          "description": "Project city"
        },
        "state_code": {
          "type": "string",
          "description": "Project state code"
        },
        "country_code": {
          "type": "string",
          "description": "Project country code"
        },
        "zip": {
          "type": "string",
          "description": "Project zip code"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "description": "Project latitude"
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "description": "Project longitude"
        },
        "description": {
          "type": "string",
          "description": "Project description"
        },
        "square_feet": {
          "type": "integer",
          "description": "Project square feet"
        },
        "estimated_start_date": {
          "type": "string",
          "format": "date",
          "description": "Project estimated start date"
        },
        "estimated_completion_date": {
          "type": "string",
          "format": "date",
          "description": "Project estimated completion date"
        },
        "active": {
          "type": "boolean",
          "description": "Project active status"
        },
        "flag": {
          "type": "string",
          "enum": [
            "Red",
            "Yellow",
            "Green"
          ],
          "description": "Project flag"
        },
        "phone": {
          "type": "string",
          "description": "Project phone"
        },
        "public_notes": {
          "type": "string",
          "description": "Project public notes"
        },
        "actual_start_date": {
          "type": "string",
          "format": "date",
          "description": "Project actual start date"
        },
        "projected_finish_date": {
          "type": "string",
          "format": "date",
          "description": "Project finish date"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Project created at"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Project updated at"
        },
        "origin_id": {
          "type": "string",
          "description": "Project third party id"
        },
        "origin_data": {
          "type": "string",
          "description": "Project third party data"
        },
        "persistent_message": {
          "title": "ProjectPersistentMessage",
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Project persistent message title"
            },
            "message": {
              "type": "string",
              "description": "Project persistent message"
            }
          }
        },
        "office": {
          "title": "ProjectOffice",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Office ID"
            },
            "name": {
              "type": "string",
              "description": "Office name"
            }
          }
        },
        "project_stage": {
          "title": "ProjectStage",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Stage ID"
            },
            "name": {
              "type": "string",
              "description": "Stage name"
            }
          }
        },
        "project_type": {
          "title": "ProjectType",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Type ID"
            },
            "name": {
              "type": "string",
              "description": "Type name"
            }
          }
        },
        "program": {
          "title": "ProjectProgram",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Program ID"
            },
            "name": {
              "type": "string",
              "description": "Program name"
            }
          }
        },
        "departments": {
          "type": "array",
          "description": "Array of project departments",
          "items": {
            "title": "ProjectDepartment",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Department ID"
              },
              "name": {
                "type": "string",
                "description": "Department name"
              }
            }
          }
        }
      },
      "example": {
        "id": 89025,
        "logo_url": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20150904220156_production_105341655.png?AWSAccessKeyId=0PFNH01C4MZVXKXZNK82&Expires=2091808024&Signature=qELZAktHou5QICU747PbcEcN0AY%3D",
        "name": "Casa de Casper",
        "display_name": "A-1 Casa de Casper",
        "project_number": "A-1",
        "address": "500 Construction Way",
        "city": "Carpinteria",
        "state_code": "CA",
        "country_code": "US",
        "zip": "93110",
        "latitude": 34.385046485573,
        "longitude": -119.49084912133,
        "description": "Very cool project.",
        "square_feet": 5000,
        "estimated_start_date": "2015-05-15",
        "estimated_completion_date": "2015-05-31",
        "active": true,
        "flag": "Yellow",
        "phone": "707-555-9866",
        "public_notes": "We're building a large private residence.",
        "actual_start_date": "2015-05-15",
        "projected_finish_date": "2015-05-31",
        "created_at": "2014-12-29T21:53:56Z",
        "updated_at": "2016-03-14T16:52:22Z",
        "persistent_message": {
          "title": "General Scope of Work",
          "message": "Provide and install HVAC systems."
        },
        "office": {
          "id": 3610,
          "name": "Carpinteria"
        },
        "project_stage": {
          "id": 3,
          "name": "Course of Construction"
        },
        "project_type": {
          "id": 1,
          "name": "Project Type A"
        },
        "departments": [
          {
            "id": 2,
            "name": "Residential"
          },
          {
            "id": 3,
            "name": "Southwest"
          }
        ]
      }
    },
    "ProjectSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/Project"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ProjectUser": {
      "type": "object",
      "title": "Project User",
      "description": "Project User",
      "properties": {
        "address": {
          "type": "string",
          "description": "Project user address",
          "example": "6305 Carpinteria Ave"
        },
        "avatar": {
          "type": "string",
          "description": "Project user avatar url",
          "example": "http:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20150713184222_production_74548228.gif?AWSAccessKeyId=0PFNH01C4MZVXKXZNK82&Expires=2067964943&Signature=l4zpZIM3bgxydrr4hn6lM%2FdtreQ%3D"
        },
        "business_phone": {
          "type": "string",
          "description": "Project user business phone",
          "example": "1234567890"
        },
        "business_phone_extension": {
          "type": "string",
          "description": "Project user business phone extension"
        },
        "city": {
          "type": "string",
          "description": "Project user city",
          "example": "Carpinteria"
        },
        "country_code": {
          "type": "string",
          "description": "Project user country code",
          "example": "US"
        },
        "email_address": {
          "type": "string",
          "format": "email",
          "description": "Project user email",
          "example": "leah@procore.com"
        },
        "email_signature": {
          "type": "string",
          "description": "Project user email signature",
          "example": "<p>Sent from Procore.<\/p>"
        },
        "employee_id": {
          "type": "string",
          "description": "Project user employee id",
          "example": "123456789"
        },
        "fax_number": {
          "type": "string",
          "description": "Project user fax number",
          "example": "5555555555"
        },
        "first_name": {
          "type": "string",
          "description": "Project user first name",
          "example": "Leah"
        },
        "id": {
          "type": "integer",
          "description": "Project user id",
          "example": 381006
        },
        "initials": {
          "type": "string",
          "description": "Project user initials",
          "example": "LR"
        },
        "is_active": {
          "type": "boolean",
          "description": "Project user active status",
          "example": true
        },
        "is_employee": {
          "type": "boolean",
          "description": "Project user employee status",
          "example": false
        },
        "job_title": {
          "type": "string",
          "description": "Project user job title",
          "example": "QA Manager"
        },
        "last_login_at": {
          "type": "string",
          "format": "date-time",
          "description": "Project user last login at",
          "example": "2016-06-30T20:41:58Z"
        },
        "last_name": {
          "type": "string",
          "description": "Project user last name",
          "example": "Russell"
        },
        "mobile_phone": {
          "type": "string",
          "description": "Project user mobile phone",
          "example": 5555555555
        },
        "notes": {
          "type": "string",
          "description": "Project user notes",
          "example": "notes"
        },
        "state_code": {
          "type": "string",
          "description": "Project user state code",
          "example": "CA"
        },
        "zip": {
          "type": "string",
          "description": "Project user zip code",
          "example": "93013"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Project user created at",
          "example": "2016-10-23T21:39:40Z"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Project user updated at",
          "example": "2016-10-23T21:39:40Z"
        },
        "vendor": {
          "$ref": "#\/definitions\/VendorCompact"
        }
      }
    },
    "ProjectType": {
      "title": "ProjectType",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Project Type ID"
        },
        "name": {
          "type": "string",
          "description": "Project Type name"
        }
      },
      "example": {
        "id": 1,
        "name": "Project Type A"
      }
    },
    "ProjectStage": {
      "title": "ProjectStage",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Project Stage ID"
        },
        "name": {
          "type": "string",
          "description": "Project Stage name"
        },
        "is_bidding_stage": {
          "type": "boolean",
          "description": "Project Stage is bidding stage status"
        }
      },
      "example": {
        "id": 1,
        "name": "Project Stage A",
        "is_bidding_stage": false
      }
    },
    "ProjectRole": {
      "title": "ProjectRole",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Project role member name"
        },
        "role": {
          "type": "string",
          "description": "Project role name"
        },
        "contact_id": {
          "type": "integer",
          "description": "Project role member contact id"
        }
      },
      "example": {
        "name": "Mau Mixers LLC",
        "role": "Owner",
        "contact_id": 13515
      }
    },
    "ProjectDatesIndex": {
      "type": "object",
      "properties": {
        "schedule_dates": {
          "type": "object",
          "title": "ScheduleDates",
          "properties": {
            "substantial_completion_date": {
              "type": "string",
              "format": "date",
              "description": "Substantial completion date"
            },
            "finish_variance": {
              "type": "string",
              "description": "Finish variance"
            },
            "percentage_complete": {
              "type": "integer",
              "description": "Percentage complete"
            }
          }
        },
        "project_dates": {
          "type": "array",
          "description": "Array of Project Dates",
          "items": {
            "type": "object",
            "title": "ProjectDate",
            "properties": {
              "name": {
                "type": "string",
                "description": "Project date name"
              },
              "date": {
                "type": "string",
                "format": "string",
                "description": "Project date"
              }
            }
          }
        }
      },
      "example": {
        "schedule_dates": {
          "substantial_completion_date": "2015-02-25T17:00:00Z",
          "finish_variance": "0 days",
          "percentage_complete": 5
        },
        "project_dates": [
          {
            "name": "Start",
            "date": "2014-07-09"
          },
          {
            "name": "caseys last day",
            "date": "2014-09-19"
          },
          {
            "name": "Finish",
            "date": "2015-05-13"
          }
        ]
      }
    },
    "ProjectTemplate": {
      "title": "ProjectTemplate",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Project Template ID"
        },
        "name": {
          "type": "string",
          "description": "Project Template name"
        }
      },
      "example": {
        "id": 101,
        "name": "Procore Project"
      }
    },
    "PrimeContract": {
      "type": "object",
      "description": "Prime Contract",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Prime Contract ID",
          "example": 34219
        },
        "accounting_method": {
          "type": "string",
          "enum": [
            "amount",
            "unit"
          ],
          "description": "Accounting method",
          "example": "amount"
        },
        "actual_completion_date": {
          "type": "string",
          "format": "date",
          "description": "Actual completion date",
          "example": "2015-12-31"
        },
        "allow_comments": {
          "type": "boolean",
          "description": "Allow comments status",
          "example": true
        },
        "allow_markups": {
          "type": "boolean",
          "description": "Allow markups status",
          "example": false
        },
        "allow_payment_applications": {
          "type": "boolean",
          "description": "Enable\/Disable Payment Applications",
          "example": true
        },
        "allow_payments": {
          "type": "boolean",
          "description": "Enable\/Disable payments",
          "example": true
        },
        "allow_redistributions": {
          "type": "boolean",
          "description": "Deprecated - always false",
          "example": false
        },
        "bill_to": {
          "type": "string",
          "description": "Bill to address",
          "example": "5000 Construction Street"
        },
        "budget_line_item_id": {
          "type": "integer",
          "description": "Budget line item ID",
          "example": 50123
        },
        "contract_estimated_completion_date": {
          "type": "string",
          "format": "date",
          "description": "Contract estimated completion date",
          "example": "2016-01-31"
        },
        "contract_start_date": {
          "type": "string",
          "format": "date",
          "description": "Contract start date",
          "example": "2014-01-31"
        },
        "contract_termination_date": {
          "type": "string",
          "format": "date",
          "description": "Contract termination date",
          "example": "2016-12-31"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2014-01-01T21:55:10Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-01-04T23:55:19Z"
        },
        "delivery_date": {
          "type": "string",
          "format": "date",
          "description": "Delivery date",
          "example": "2014-02-15"
        },
        "description": {
          "type": "string",
          "description": "Description of the Prime Contract",
          "example": "<p>Owner Contract<\/p>"
        },
        "display_materials_retainage": {
          "type": "boolean",
          "description": "Display materials retainage status",
          "example": true
        },
        "display_stored_materials": {
          "type": "boolean",
          "description": "Enable\/Disable stored materials",
          "example": false
        },
        "display_work_retainage": {
          "type": "boolean",
          "description": "Display work retainage",
          "example": true
        },
        "erp_rejected": {
          "type": "boolean",
          "description": "ERP rejected status",
          "example": false
        },
        "erp_reviewable": {
          "type": "boolean",
          "description": "ERP reviewable status",
          "example": false
        },
        "exclusions": {
          "type": "string",
          "description": "Exclusions",
          "example": "<p>Interior finishing<\/p>"
        },
        "executed": {
          "type": "boolean",
          "description": "Executed status",
          "example": true
        },
        "grand_total": {
          "type": "string",
          "description": "Total of Line items including markup, plus project level (vertical) markup, if any",
          "example": "57750.00"
        },
        "inclusions": {
          "type": "string",
          "description": "Inclusions"
        },
        "line_items_extended_total": {
          "type": "string",
          "description": "Total of Line items including markup",
          "example": "55000.00"
        },
        "line_items_total": {
          "type": "string",
          "description": "Total of Line items without markup",
          "example": "50000.00"
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "A-1"
        },
        "payment_terms": {
          "type": "string",
          "description": "Payment terms",
          "example": "Net 30"
        },
        "percentage_paid": {
          "type": "string",
          "description": "Percentage paid",
          "example": "0"
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": "2"
        },
        "private": {
          "type": "boolean",
          "description": "If true, visible to admins only; otherwise visible to those with access to the parent contract.",
          "example": true
        },
        "rejected_message": {
          "type": "string",
          "description": "Rejected message",
          "example": "do not send to ERP"
        },
        "requisition_number": {
          "type": "string",
          "description": "Requisition number",
          "example": "2011"
        },
        "retainage_percent": {
          "type": "string",
          "description": "Retainage percent",
          "example": "10"
        },
        "ship_to": {
          "type": "string",
          "description": "Ship to address",
          "example": "<p>5000 Construction Street<\/p>"
        },
        "ship_via": {
          "type": "string",
          "description": "Ship via",
          "example": "Your truck"
        },
        "signed_contract_received_date": {
          "type": "string",
          "format": "date",
          "description": "Signed contract received date",
          "example": "2014-02-15"
        },
        "status": {
          "type": "string",
          "enum": [
            "Draft",
            "Out For Bid",
            "Out For Signature",
            "Approved",
            "Complete",
            "Terminated"
          ],
          "description": "Status",
          "example": "Approved"
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "ABC Owner Contract"
        },
        "total_payments": {
          "type": "string",
          "description": "Total payments",
          "example": "0.00"
        },
        "type": {
          "type": "string",
          "description": "Type",
          "example": "PrimeContract"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2016-01-04T23:55:19Z"
        },
        "architect": {
          "$ref": "#\/definitions\/User"
        },
        "assigned_to": {
          "$ref": "#\/definitions\/User"
        },
        "attachments": {
          "type": "array",
          "description": "Attachments",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "change_order_packages": {
          "type": "array",
          "description": "Change order packages",
          "items": {
            "$ref": "#\/definitions\/ChangeOrderPackageSummary"
          }
        },
        "change_order_requests": {
          "type": "array",
          "description": "Change order requests",
          "items": {
            "$ref": "#\/definitions\/ChangeOrderRequestIndex"
          }
        },
        "contractor": {
          "$ref": "#\/definitions\/Vendor"
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCode"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "line_items": {
          "type": "array",
          "description": "Line items",
          "items": {
            "$ref": "#\/definitions\/LineItem"
          }
        },
        "potential_change_orders": {
          "type": "array",
          "description": "Potential change orders",
          "items": {
            "$ref": "#\/definitions\/PotentialChangeOrderSummary"
          }
        },
        "payments_received": {
          "type": "array",
          "description": "Payments received",
          "items": {
            "$ref": "#\/definitions\/ContractPayment"
          }
        },
        "received_from": {
          "$ref": "#\/definitions\/User"
        },
        "vendor": {
          "$ref": "#\/definitions\/Vendor"
        }
      }
    },
    "Program": {
      "allOf": [
        {
          "$ref": "#\/definitions\/ProgramIndex"
        },
        {
          "type": "object",
          "properties": {
            "zip": {
              "type": "string",
              "description": "Program zip-code"
            },
            "longitude": {
              "type": "string",
              "description": "Program longitude"
            },
            "latitude": {
              "type": "string",
              "description": "Program latitude"
            },
            "projects": {
              "type": "array",
              "description": "Array of program projects",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Project ID"
                  },
                  "name": {
                    "type": "string",
                    "description": "Project name"
                  },
                  "project_number": {
                    "type": "string",
                    "description": "Project number"
                  }
                }
              }
            }
          }
        }
      ],
      "example": {
        "id": 1712,
        "name": "New Program",
        "address_freeform": "",
        "website": "",
        "zip": "",
        "longitude": "",
        "latitude": "",
        "projects": [
          {
            "id": 46146,
            "name": "2014 Draft",
            "project_number": ""
          }
        ]
      }
    },
    "ProgramIndex": {
      "title": "Program",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Program ID"
        },
        "name": {
          "type": "string",
          "description": "Program name"
        },
        "address_freeform": {
          "type": "string",
          "description": "Program address"
        },
        "website": {
          "type": "string",
          "description": "Program website"
        }
      },
      "example": {
        "id": 1,
        "name": "NW USA",
        "address_freeform": "Seattle",
        "website": "http:\/\/nwexampleprogram.com"
      }
    },
    "Image": {
      "allOf": [
        {
          "$ref": "#\/definitions\/ImageIndex"
        },
        {
          "title": "Image",
          "type": "object"
        }
      ],
      "example": {
        "id": 9122752,
        "filename": "2015-07-15_Photo 1042_bull nosed flashing to roof overhang on south elevation_time 16.21.JPG",
        "thumbnail_url": "http:\/\/prostore-thumbnail-bucket-production.s3.amazonaws.com\/83200871_thumbnail_large.PNG?AWSAccessKeyId=0PFNH01C4MZVXKXZNK82&Expires=1753912481&Signature=X4b27yIyfP3sxXwQuYG3aOgFh%2BU%3D",
        "url": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20150730215438_production_83200871.JPG?AWSAccessKeyId=AKIAJ5EH2SRCJA6V2DKA&Expires=2099098110&Signature=hIkhmk3dWICVHm4b7e0ilpZ0CJc%3D",
        "size": 3423146,
        "description": "Image description",
        "image_category_id": 186339,
        "image_category_name": "Unclassified",
        "private": false,
        "uploader": {
          "id": 1,
          "name": "Customer Support",
          "login": "procore@procore.com"
        },
        "taken_at": "2015-07-15T23:21:56Z",
        "created_at": "2015-07-30T21:54:39Z",
        "location": {
          "id": 2,
          "name": "main building > kitchen",
          "node_name": "kitchen",
          "parent_id": 1
        },
        "links": {
          "self": "\/vapid\/images\/9122752?image_category_id=186339&project_id=173074",
          "update": "\/vapid\/images\/9122752?image_category_id=186339&project_id=173074",
          "delete": "\/vapid\/images\/9122752?image_category_id=186339&project_id=173074",
          "retrieve": "\/vapid\/images\/9122752\/retrieve?project_id=173074"
        }
      }
    },
    "ImageIndex": {
      "title": "Image",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Image ID"
        },
        "url": {
          "type": "string",
          "description": "Image url"
        },
        "size": {
          "type": "integer",
          "description": "Image size"
        },
        "filename": {
          "type": "string",
          "description": "Image file name"
        },
        "description": {
          "type": "string",
          "description": "Image description"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "Image thumbnail url"
        },
        "taken_at": {
          "type": "string",
          "format": "date-time",
          "description": "Image taken at"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Image created at"
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "image_category_name": {
          "type": "string",
          "description": "Image Category Name"
        },
        "image_category_id": {
          "type": "integer",
          "description": "Image Category ID"
        },
        "private": {
          "type": "boolean",
          "description": "Image private status"
        },
        "uploader": {
          "$ref": "#\/definitions\/User"
        },
        "links": {
          "type": "object",
          "description": "Links to perform actions on the Image"
        }
      },
      "example": {
        "id": 9122752,
        "url": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20150730215438_production_83200871.JPG?AWSAccessKeyId=AKIAJ5EH2SRCJA6V2DKA&Expires=2099098110&Signature=hIkhmk3dWICVHm4b7e0ilpZ0CJc%3D",
        "size": 3423146,
        "filename": "2015-07-15_Photo 1042_bull nosed flashing to roof overhang on south elevation_time 16.21.JPG",
        "description": "Image description",
        "thumbnail_url": "http:\/\/prostore-thumbnail-bucket-production.s3.amazonaws.com\/83200871_thumbnail_large.PNG?AWSAccessKeyId=0PFNH01C4MZVXKXZNK82&Expires=1753912481&Signature=X4b27yIyfP3sxXwQuYG3aOgFh%2BU%3D",
        "taken_at": "2015-07-15T23:21:56Z",
        "created_at": "2015-07-30T21:54:39Z",
        "image_category_id": 186339,
        "image_category_name": "Unclassified",
        "private": false,
        "uploader": {
          "id": 1,
          "name": "Customer Support",
          "login": "procore@procore.com"
        },
        "location": {
          "id": 2,
          "name": "main building > kitchen",
          "node_name": "kitchen",
          "parent_id": 1
        },
        "links": {
          "self": "\/vapid\/images\/9122752?image_category_id=186339&project_id=173074",
          "update": "\/vapid\/images\/9122752?image_category_id=186339&project_id=173074",
          "delete": "\/vapid\/images\/9122752?image_category_id=186339&project_id=173074",
          "retrieve": "\/vapid\/images\/9122752\/retrieve?project_id=173074"
        }
      }
    },
    "ImageGrouped": {
      "type": "object",
      "properties": {
        "start_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The start of the group time period"
        },
        "end_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The end of the group time period"
        },
        "images": {
          "$ref": "#\/definitions\/ImageIndex"
        }
      },
      "example": {
        "start_timestamp": "2015-07-15T23:21:56Z",
        "end_timestamp": "2015-07-15T23:21:56Z",
        "images": {
          "id": 9122752,
          "filename": "2015-07-15_Photo 1042_bull nosed flashing to roof overhang on south elevation_time 16.21.JPG",
          "thumbnail_url": "http:\/\/prostore-thumbnail-bucket-production.s3.amazonaws.com\/83200871_thumbnail_large.PNG?AWSAccessKeyId=0PFNH01C4MZVXKXZNK82&Expires=1753912481&Signature=X4b27yIyfP3sxXwQuYG3aOgFh%2BU%3D",
          "url": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20150730215438_production_83200871.JPG?AWSAccessKeyId=AKIAJ5EH2SRCJA6V2DKA&Expires=2099098110&Signature=hIkhmk3dWICVHm4b7e0ilpZ0CJc%3D",
          "size": 3423146,
          "description": "Image description",
          "image_category_id": 186339,
          "image_category_name": "Unclassified",
          "private": false,
          "uploader": {
            "id": 1,
            "name": "Customer Support",
            "login": "procore@procore.com"
          },
          "taken_at": "2015-07-15T23:21:56Z",
          "created_at": "2015-07-30T21:54:39Z",
          "location": {
            "id": 2,
            "name": "main building > kitchen",
            "node_name": "kitchen",
            "parent_id": 1
          },
          "links": {
            "self": "\/vapid\/images\/9122752?image_category_id=186339&project_id=173074",
            "update": "\/vapid\/images\/9122752?image_category_id=186339&project_id=173074",
            "delete": "\/vapid\/images\/9122752?image_category_id=186339&project_id=173074",
            "retrieve": "\/vapid\/images\/9122752\/retrieve?project_id=173074"
          }
        }
      }
    },
    "ImageCategory": {
      "title": "ImageCategory",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Image Category ID"
        },
        "name": {
          "type": "string",
          "description": "Image Category name"
        },
        "position": {
          "type": "integer",
          "description": "Image Category position"
        },
        "album_cover_id": {
          "type": "integer",
          "description": "Album cover ID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Image Category created at"
        },
        "private": {
          "type": "boolean",
          "description": "Private status"
        },
        "count": {
          "type": "integer",
          "description": "Amount of images in category"
        }
      },
      "example": {
        "id": 51065,
        "count": 3,
        "cover_photo": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20141028153752_production_28603561.jpg?AWSAccessKeyId=AKIAJ5EH2SRCJA6V2DKA&Expires=2099098110&Signature=M7gx3Hp9q7xg7PyM87oJW%2BDOvr4%3D",
        "created_at": "2013-11-08T00:00:00Z",
        "links": {
          "show": "\/22585\/project\/images\/show_album?id=51065",
          "update": "\/vapid\/image_categories\/1301434?project_id=173074",
          "delete": "\/vapid\/image_categories\/51065?project_id=22585"
        },
        "name": "Test",
        "private": false,
        "updated_at": "2016-04-27T17:45:18Z",
        "postion": 1
      }
    },
    "ImageCategoryIndex": {
      "title": "ImageCategory",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Image Category ID"
        },
        "count": {
          "type": "integer",
          "description": "Amount of images in category"
        },
        "cover_photo": {
          "type": "string",
          "description": "Cover photo url"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Image Category created at"
        },
        "links": {
          "type": "object",
          "description": "Action links",
          "properties": {
            "show": {
              "type": "string",
              "description": "Link to show images in category"
            },
            "delete": {
              "type": "string",
              "description": "Link to delete the category"
            },
            "update": {
              "type": "string",
              "description": "Link to update the category"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Image Category name"
        },
        "private": {
          "type": "boolean",
          "description": "Private status"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Image Category updated at"
        },
        "position": {
          "type": "integer",
          "description": "Image Category Position"
        }
      },
      "example": {
        "id": 51065,
        "count": 3,
        "cover_photo": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20141028153752_production_28603561.jpg?AWSAccessKeyId=AKIAJ5EH2SRCJA6V2DKA&Expires=2099098110&Signature=M7gx3Hp9q7xg7PyM87oJW%2BDOvr4%3D",
        "created_at": "2013-11-08T00:00:00Z",
        "links": {
          "show": "\/22585\/project\/images\/show_album?id=51065",
          "update": "\/vapid\/image_categories\/1301434?project_id=173074",
          "delete": "\/vapid\/image_categories\/51065?project_id=22585"
        },
        "name": "Test",
        "private": false,
        "updated_at": "2016-04-27T17:45:18Z",
        "postion": 1
      }
    },
    "Insurance": {
      "title": "Insurance",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 311823
        },
        "effective_date": {
          "type": "string",
          "format": "date",
          "description": "Effective date",
          "example": "2015-03-03T00:00:00.000Z"
        },
        "enable_expired_insurance_notifications": {
          "type": "boolean",
          "description": "Enable\/Disable expired insurance notifications",
          "example": false
        },
        "exempt": {
          "type": "boolean",
          "description": "Exempt status",
          "example": false
        },
        "expiration_date": {
          "type": "string",
          "format": "date",
          "description": "Expiration date",
          "example": "2016-03-02T00:00:00.000Z"
        },
        "info_received": {
          "type": "boolean",
          "description": "Information received (or not)",
          "example": false
        },
        "insurance_provider": {
          "type": "string",
          "description": "Insurance provider",
          "example": "GL Insurance Inc."
        },
        "insurance_type": {
          "type": "string",
          "description": "Insurance type",
          "example": "General Liability"
        },
        "limit": {
          "type": "string",
          "description": "Limit",
          "example": 1000000
        },
        "notes": {
          "type": "string",
          "description": "Notes",
          "example": "Meets minimum requirements"
        },
        "policy_number": {
          "type": "string",
          "description": "Policy number",
          "example": "12345GL"
        },
        "status": {
          "type": "string",
          "enum": [
            "compliant",
            "compliant_in_progress",
            "expired",
            "non_compliant",
            "non_compliant_in_progress",
            "undecided",
            "unregistered"
          ],
          "description": "Status",
          "example": "compliant"
        },
        "vendor_id": {
          "type": "integer",
          "description": "Vendor ID",
          "example": 2627684
        }
      }
    },
    "RFICommon": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 999
        },
        "assignee": {
          "$ref": "#\/definitions\/User"
        },
        "ball_in_court": {
          "$ref": "#\/definitions\/User"
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCodeCompact"
        },
        "cost_impact": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Cost impact status",
              "example": "yes_known",
              "enum": [
                "yes_known",
                "yes_unknown",
                "no_impact",
                "tbd",
                "n_a"
              ]
            },
            "value": {
              "type": "number",
              "format": "float",
              "description": "Cost impact value in dollars",
              "example": 12039.55
            }
          }
        },
        "created_at": {
          "type": "string",
          "description": "Date created",
          "format": "date-time",
          "example": "2016-08-23T15:23:57.000Z"
        },
        "due_date": {
          "type": "string",
          "description": "Due Date",
          "format": "date",
          "example": "2017-01-18T00:00:00.000Z"
        },
        "initiated_at": {
          "type": "string",
          "description": "Date initiated",
          "format": "date-time",
          "example": "2016-08-23T15:23:57.000Z"
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "C-1477"
        },
        "private": {
          "type": "boolean",
          "description": "Private Status",
          "example": true
        },
        "received_from": {
          "$ref": "#\/definitions\/User"
        },
        "reference": {
          "type": "string",
          "description": "Reference",
          "example": "Schedule C"
        },
        "responsible_contractor": {
          "$ref": "#\/definitions\/VendorCompact"
        },
        "schedule_impact": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Schedule impact status",
              "example": "yes_known",
              "enum": [
                "yes_known",
                "yes_unknown",
                "no_impact",
                "tbd",
                "n_a"
              ]
            },
            "value": {
              "type": "integer",
              "description": "Schedule impact value",
              "example": 14
            }
          }
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "open",
          "enum": [
            "open",
            "closed",
            "draft",
            "recycled"
          ]
        },
        "subject": {
          "type": "string",
          "description": "Subject",
          "example": "Specifications [99 14.44B]"
        },
        "time_resolved": {
          "type": "string",
          "format": "date-time",
          "description": "Time RFI was closed",
          "example": "2017-01-12T17:09:15.000Z"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        }
      }
    },
    "RFINormal": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "link": {
              "type": "string",
              "format": "url",
              "description": "Web link to resource",
              "example": "https:\/\/app.procore.com\/123456\/project\/rfi\/show\/123456"
            },
            "location_id": {
              "type": "integer",
              "description": "ID of the associated Location",
              "example": 999
            },
            "questions": {
              "type": "array",
              "description": "RFI Questions",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "ID",
                    "example": 999
                  },
                  "body": {
                    "type": "string",
                    "description": "Body",
                    "example": "<p>Are the items listed on Schedule C acceptable?<\/p>"
                  },
                  "errors": {
                    "type": "array",
                    "description": "Errors",
                    "items": {
                      "$ref": "#\/definitions\/SimpleError"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "$ref": "#\/definitions\/RFICommon"
        }
      ]
    },
    "RFIExtended": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "accepted": {
              "type": "boolean",
              "description": "RFI Acceptance status, true means the RFI is accepted and closed",
              "example": false
            },
            "created_by": {
              "$ref": "#\/definitions\/User"
            },
            "custom_textfield_1": {
              "type": "object",
              "description": "Custom RFI text field 1",
              "properties": {
                "label": {
                  "type": "string",
                  "description": "Project label for RFI custom text field 1"
                },
                "value": {
                  "type": "string",
                  "description": "Value for RFI custom text field 1"
                }
              }
            },
            "custom_textfield_2": {
              "type": "object",
              "description": "Custom RFI text field 2",
              "properties": {
                "label": {
                  "type": "string",
                  "description": "Project label for RFI custom text field 2"
                },
                "value": {
                  "type": "string",
                  "description": "Value for RFI custom text field 2"
                }
              }
            },
            "distribution_list": {
              "type": "array",
              "description": "RFI Distribution List of Users",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            },
            "draft": {
              "type": "boolean",
              "description": "Draft status, true if draft",
              "example": false
            },
            "drawing_ids": {
              "type": "array",
              "description": "Array of IDs for associated Drawings",
              "items": {
                "type": "integer",
                "description": "Drawing ID",
                "example": 999
              }
            },
            "drawing_number": {
              "type": "string",
              "description": "Drawing Number",
              "example": "107.3D"
            },
            "questions": {
              "type": "array",
              "description": "List of questions",
              "items": {
                "$ref": "#\/definitions\/RFI_Question"
              }
            },
            "specification_section": {
              "$ref": "#\/definitions\/SpecificationSectionCompact"
            }
          }
        },
        {
          "$ref": "#\/definitions\/RFICommon"
        }
      ]
    },
    "RFI_Question": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "question_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date",
          "example": "2016-08-02T20:49:35.000Z"
        },
        "plain_text_body": {
          "type": "string",
          "description": "Plain text body",
          "example": "Are the items listed on Schedule C acceptable?"
        },
        "rich_text_body": {
          "type": "string",
          "description": "Rich text body",
          "example": "<p>Are the items listed on Schedule C acceptable?<\/p>"
        },
        "created_by": {
          "type": "string",
          "description": "Creator name",
          "example": "Joseph Shabadoo"
        },
        "attachments": {
          "type": "array",
          "description": "Attachments",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        },
        "answers": {
          "type": "array",
          "description": "Answers",
          "items": {
            "$ref": "#\/definitions\/RFI_Reply"
          }
        }
      }
    },
    "RFI_Reply": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 999
        },
        "official": {
          "type": "boolean",
          "description": "Official response, true if official",
          "example": true
        },
        "answer_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date",
          "example": "2016-08-29T14:37:22.000Z"
        },
        "plain_text_body": {
          "type": "string",
          "description": "Plain text body",
          "example": "No, they need to follow the guidelines on Schedule D"
        },
        "rich_text_body": {
          "type": "string",
          "description": "Rich text body",
          "example": "<p>No, they need to follow the guidelines on Schedule D<\/p>"
        },
        "created_by": {
          "type": "string",
          "description": "Creator name",
          "example": "Jane Doe"
        },
        "attachments": {
          "type": "array",
          "description": "Attachments",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        }
      }
    },
    "RFQ": {
      "type": "object",
      "title": "RFQ",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 1199
        },
        "commitment_contract_id": {
          "type": "integer",
          "description": "Commitment Contract ID",
          "example": 418232
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2016-06-30T20:41:58.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2016-08-30T18:11:43.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Please see attached documentation for Bulletin 3 and provide pricing within 1 week. If you don't get back to me, I'll assume you have no cost impact."
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "description": "Due date",
          "example": "2016-10-13"
        },
        "estimated_amount": {
          "type": "number",
          "format": "float",
          "description": "Estimated amount",
          "example": "4302.0"
        },
        "estimated_schedule_impact": {
          "type": "integer",
          "description": "Estimated schedule impact in days",
          "example": 2
        },
        "estimated_status": {
          "type": "string",
          "description": "Estimated status",
          "example": "rom",
          "enum": [
            "rom",
            "final"
          ]
        },
        "intent_to_quote": {
          "type": "boolean",
          "description": "Intent to quote status",
          "example": false
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "013"
        },
        "original_quote": {
          "type": "number",
          "format": "float",
          "description": "Original quote",
          "example": "4500.0"
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": 13
        },
        "private": {
          "type": "boolean",
          "description": "If true, visible to admins only; otherwise visible to those with access to the parent contract.",
          "example": true
        },
        "prostore_file_ids": {
          "type": "array",
          "description": "Prostore File IDs",
          "example": [
            3423484,
            6983730,
            2736492
          ],
          "items": {
            "type": "integer"
          }
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "under_review",
          "enum": [
            "out_for_pricing",
            "revise_and_resubmit",
            "under_review",
            "pending_final_approval",
            "closed",
            "withdrawn"
          ]
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Field Bulletin #3 - Steel staircase on roof"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2016-08-30T18:11:43.000Z"
        },
        "specification_section": {
          "type": "object",
          "description": "Specification Section",
          "properties": {
            "specification_section_id": {
              "type": "integer",
              "description": "ID",
              "example": 32379
            },
            "spec_section_description": {
              "type": "string",
              "description": "Description",
              "example": "Steel Structure"
            },
            "spec_section_number": {
              "type": "string",
              "description": "Number",
              "example": 236400
            }
          }
        },
        "quotes": {
          "type": "array",
          "description": "Quotes",
          "items": {
            "$ref": "#\/definitions\/RFQQuote"
          }
        },
        "responses": {
          "type": "array",
          "description": "Responses",
          "items": {
            "$ref": "#\/definitions\/RFQResponse"
          }
        },
        "potential_change_orders": {
          "$ref": "#\/definitions\/PotentialChangeOrderSummary"
        },
        "change_order_packages": {
          "$ref": "#\/definitions\/ChangeOrderPackageSummary"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "assigned": {
          "$ref": "#\/definitions\/User"
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCode"
        },
        "change_event": {
          "$ref": "#\/definitions\/ChangeEventWithoutRFQ"
        }
      }
    },
    "RFQWithoutChangeEvent": {
      "type": "object",
      "title": "RFQ",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 1199
        },
        "commitment_contract_id": {
          "type": "integer",
          "description": "Commitment Contract ID",
          "example": 418232
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2016-06-30T20:41:58.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2016-08-30T18:11:43.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Please see attached documentation for Bulletin 3 and provide pricing within 1 week. If you don't get back to me, I'll assume you have no cost impact."
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "description": "Due date",
          "example": "2016-10-13"
        },
        "estimated_amount": {
          "type": "number",
          "format": "float",
          "description": "Estimated amount",
          "example": "4302.0"
        },
        "estimated_schedule_impact": {
          "type": "integer",
          "description": "Estimated schedule impact in days",
          "example": 2
        },
        "estimated_status": {
          "type": "string",
          "description": "Estimated status",
          "example": "rom",
          "enum": [
            "rom",
            "final"
          ]
        },
        "intent_to_quote": {
          "type": "boolean",
          "description": "Intent to quote status",
          "example": false
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "013"
        },
        "original_quote": {
          "type": "number",
          "format": "float",
          "description": "Original quote",
          "example": "4500.0"
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": 13
        },
        "private": {
          "type": "boolean",
          "description": "If true, visible to admins only; otherwise visible to those with access to the parent contract.",
          "example": true
        },
        "prostore_file_ids": {
          "type": "array",
          "description": "Prostore File IDs",
          "example": [
            3423484,
            6983730,
            2736492
          ],
          "items": {
            "type": "integer"
          }
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "under_review",
          "enum": [
            "out_for_pricing",
            "revise_and_resubmit",
            "under_review",
            "pending_final_approval",
            "closed",
            "withdrawn"
          ]
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Field Bulletin #3 - Steel staircase on roof"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2016-08-30T18:11:43.000Z"
        },
        "specification_section": {
          "type": "object",
          "description": "Specification Section",
          "properties": {
            "specification_section_id": {
              "type": "integer",
              "description": "ID",
              "example": 32379
            },
            "spec_section_description": {
              "type": "string",
              "description": "Description",
              "example": "Steel Structure"
            },
            "spec_section_number": {
              "type": "string",
              "description": "Number",
              "example": 236400
            }
          }
        },
        "quotes": {
          "type": "array",
          "description": "Quotes",
          "items": {
            "$ref": "#\/definitions\/RFQQuote"
          }
        },
        "responses": {
          "type": "array",
          "description": "Responses",
          "items": {
            "$ref": "#\/definitions\/RFQResponse"
          }
        },
        "potential_change_orders": {
          "$ref": "#\/definitions\/PotentialChangeOrderSummary"
        },
        "change_order_packages": {
          "$ref": "#\/definitions\/ChangeOrderPackageSummary"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "assigned": {
          "$ref": "#\/definitions\/User"
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCode"
        }
      }
    },
    "RFQQuote": {
      "type": "object",
      "title": "RFQ Quote",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 105445
        },
        "commitment_quote_number": {
          "type": "string",
          "description": "Commitment quote number",
          "example": 2234
        },
        "cost": {
          "type": "number",
          "format": "float",
          "description": "Cost",
          "example": "4500.0"
        },
        "schedule_impact": {
          "type": "integer",
          "description": "Schedule impact",
          "example": 2
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Need to destroy some of the roofing to install this staircase."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2016-10-21T21:39:41.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2016-10-23T21:44:45.000Z"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2016-10-22T21:41:42.000Z"
        },
        "prostore_file_ids": {
          "type": "array",
          "description": "Array of prostore file ids",
          "items": {
            "type": "integer"
          },
          "example": [
            2334,
            776843,
            22456
          ]
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        }
      }
    },
    "RFQResponse": {
      "type": "object",
      "title": "RFQ Response",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 105
        },
        "comment": {
          "type": "string",
          "description": "Comment in response to the latest quote",
          "example": "This quote needs to be revised. See attached files."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2016-10-22T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2016-10-30T21:39:40.000Z"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2016-10-26T21:39:40.000Z"
        },
        "prostore_file_ids": {
          "type": "array",
          "description": "Prostore file IDs",
          "example": [
            3453247,
            6543893,
            3476145
          ],
          "items": {
            "type": "integer"
          }
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 5324
        },
        "url": {
          "type": "string",
          "description": "URL",
          "example": "http:\/\/www.example.com\/"
        },
        "filename": {
          "type": "string",
          "description": "Filename",
          "example": "january_receipt_copy.jpg"
        }
      }
    },
    "Folder": {
      "type": "object",
      "title": "Folder",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Folder id",
          "example": 5655664
        },
        "name": {
          "type": "string",
          "description": "Folder name",
          "example": "test_folder"
        },
        "name_with_path": {
          "type": "string",
          "description": "Full file path with folder name",
          "example": "root_folder\/parent_folder\/test_folder"
        },
        "parent_id": {
          "type": "integer",
          "description": "Folder parent id",
          "example": 123
        },
        "private": {
          "type": "boolean",
          "description": "Folder private status",
          "example": false
        },
        "read_only": {
          "type": "boolean",
          "description": "Folder read only status",
          "example": false
        },
        "has_children": {
          "type": "boolean",
          "description": "Folder has children status",
          "example": true
        },
        "is_tracked": {
          "type": "boolean",
          "description": "Folder is tracked status",
          "example": false
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Folder updated at",
          "example": "2017-01-04T21:27:18.000Z"
        },
        "is_recycle_bin": {
          "type": "boolean",
          "description": "Folder is recycle bin status",
          "example": false
        },
        "is_deleted": {
          "type": "boolean",
          "description": "File is in the recycle bin status",
          "example": false
        },
        "folders": {
          "type": "array",
          "description": "The child Folders of the Folder",
          "items": {
            "type": "object"
          }
        },
        "files": {
          "type": "array",
          "description": "The child Files of the Folder",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "FolderFull": {
      "type": "object",
      "title": "Folder",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Folder id",
          "example": 5655664
        },
        "name": {
          "type": "string",
          "description": "Folder name",
          "example": "Test Project"
        },
        "name_with_path": {
          "type": "string",
          "description": "Full file path with Folder name",
          "example": "root_folder\/parent_folder\/test_folder"
        },
        "parent_id": {
          "type": "integer",
          "description": "Folder parent id",
          "example": 123
        },
        "private": {
          "type": "boolean",
          "description": "Folder private status",
          "example": false
        },
        "read_only": {
          "type": "boolean",
          "description": "Folder read only status",
          "example": false
        },
        "has_children": {
          "type": "boolean",
          "description": "Folder has children status",
          "example": true
        },
        "is_tracked": {
          "type": "boolean",
          "description": "Folder is tracked status",
          "example": false
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Folder updated at",
          "example": "2017-01-04T21:27:18.000Z"
        },
        "is_recycle_bin": {
          "type": "boolean",
          "description": "Folder is recycle bin status",
          "example": false
        },
        "folders": {
          "type": "array",
          "description": "Folder subfolders",
          "items": {
            "$ref": "#\/definitions\/Folder"
          }
        },
        "files": {
          "type": "array",
          "description": "Folder files",
          "items": {
            "$ref": "#\/definitions\/File"
          }
        }
      }
    },
    "File": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "File id",
          "example": 12
        },
        "legacy_id": {
          "type": "integer",
          "description": "Legacy File id",
          "example": 12
        },
        "name": {
          "type": "string",
          "description": "File name",
          "example": "file.pdf"
        },
        "name_with_path": {
          "type": "string",
          "description": "Full file path with filename",
          "example": "root_folder\/parent_folder\/file.pdf"
        },
        "parent_id": {
          "type": "integer",
          "description": "File parent id",
          "example": 11
        },
        "size": {
          "type": "integer",
          "description": "File size",
          "example": 54332
        },
        "description": {
          "type": "string",
          "description": "File description",
          "example": "this is a cool file"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "File updated at",
          "example": "2017-01-04T21:27:18.000Z"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "File created at",
          "example": "2017-01-04T21:27:18.000Z"
        },
        "private": {
          "type": "boolean",
          "description": "File private status",
          "example": false
        },
        "is_tracked": {
          "type": "boolean",
          "description": "File is tracked status",
          "example": false
        },
        "is_deleted": {
          "type": "boolean",
          "description": "File is in the recycle bin status",
          "example": false
        },
        "checked_out_until": {
          "type": "string",
          "format": "date-time",
          "description": "File checked out until",
          "example": "2017-01-04T21:27:18.000Z"
        },
        "checked_out_by": {
          "$ref": "#\/definitions\/User"
        },
        "file_versions": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/FileVersion"
          }
        }
      }
    },
    "FileVersion": {
      "type": "object",
      "properties": {
        "number": {
          "type": "integer",
          "description": "File version number",
          "example": 1
        },
        "url": {
          "type": "string",
          "description": "File version url",
          "example": "www.file.com"
        },
        "prostore_file": {
          "$ref": "#\/definitions\/ProstoreFile"
        },
        "id": {
          "type": "integer",
          "description": "File version id",
          "example": 12
        },
        "notes": {
          "type": "string",
          "description": "File version notes",
          "example": "this is a cool file version"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "File version created at",
          "example": "2017-01-04T21:27:18.000Z"
        }
      }
    },
    "PropertyValues": {
      "type": "object",
      "title": "PropertyValues",
      "properties": {
        "strokeColor": {
          "type": "string",
          "enum": [
            "red",
            "black",
            "green",
            "blue",
            "orange",
            "purple",
            "yellow"
          ]
        },
        "fontFace": {
          "type": "string",
          "example": "verdana"
        },
        "fontStyle": {
          "type": "string",
          "example": "regular"
        },
        "stroke": {
          "type": "string",
          "enum": [
            "solid1",
            "solid2",
            "solid4",
            "solid8"
          ]
        },
        "color": {
          "type": "string",
          "enum": [
            "red",
            "black",
            "green",
            "blue",
            "orange",
            "purple",
            "yellow"
          ]
        },
        "fontSize": {
          "type": "integer"
        },
        "fillColor": {
          "type": "string",
          "enum": [
            "red",
            "black",
            "green",
            "blue",
            "orange",
            "purple",
            "yellow"
          ]
        },
        "fill": {
          "type": "string",
          "enum": [
            "nofill",
            "alpha30",
            "alpha50",
            "solid"
          ]
        }
      }
    },
    "ProstoreFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Vendor": {
      "type": "object",
      "properties": {
        "abbreviated_name": {
          "type": "string",
          "description": "Abbreviated name",
          "example": "PE"
        },
        "address": {
          "type": "string",
          "description": "Address",
          "example": "846 Dogglesworth Drive"
        },
        "authorized_bidder": {
          "type": "boolean",
          "description": "Authorized bidder status",
          "example": true
        },
        "business_phone": {
          "type": "string",
          "description": "Business phone",
          "example": "(812) 989-9810"
        },
        "city": {
          "type": "string",
          "description": "City",
          "example": "Jeffersonville"
        },
        "company": {
          "type": "string",
          "description": "Company",
          "example": "Stock Construction"
        },
        "country_code": {
          "type": "string",
          "description": "Country code",
          "example": "US"
        },
        "email_address": {
          "type": "string",
          "format": "email",
          "description": "Email address",
          "example": "marcia@procore.com"
        },
        "fax_number": {
          "type": "string",
          "description": "Fax number",
          "example": "(812) 989-9810"
        },
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 3740487
        },
        "is_active": {
          "type": "boolean",
          "description": "Active status",
          "example": true
        },
        "labor_union": {
          "type": "string",
          "description": "Labor union",
          "example": "IWW 872"
        },
        "license_number": {
          "type": "string",
          "description": "License number",
          "example": "1901XYZ"
        },
        "logo": {
          "type": "string",
          "description": "Logo url",
          "example": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20160718141208_development_528209843.jpeg?AWSAccessKeyId=AKIAJ5EH2SRCJA6V2DKA&Expires=2100028332&Signature=pjM0nzUOxNrtjM2F0oTG2dbkPa8%3D"
        },
        "mobile_phone": {
          "type": "string",
          "description": "Mobile phone",
          "example": "(812) 989-9810"
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Poodle Electric"
        },
        "non_union_prevailing_wage": {
          "type": "boolean",
          "description": "Non union prevailing wage status",
          "example": false
        },
        "notes": {
          "type": "string",
          "description": "Notes",
          "example": "owned by a dog"
        },
        "origin_data": {
          "type": "string",
          "description": "Origin data"
        },
        "origin_id": {
          "type": "string",
          "description": "Origin ID"
        },
        "prequalified": {
          "type": "boolean",
          "description": "Prequalified status",
          "example": false
        },
        "state_code": {
          "type": "string",
          "description": "State code",
          "example": "IN"
        },
        "union_member": {
          "type": "boolean",
          "description": "Union member status",
          "example": false
        },
        "website": {
          "type": "string",
          "description": "Website url",
          "example": "http:\/\/poodleparade.com"
        },
        "zip": {
          "type": "string",
          "description": "Zip code",
          "example": 47130
        },
        "bidding": {
          "type": "object",
          "description": "Bidding status",
          "properties": {
            "affirmative_action": {
              "type": "boolean",
              "example": true
            },
            "small_business": {
              "type": "boolean",
              "example": false
            },
            "african_american_business": {
              "type": "boolean",
              "example": false
            },
            "hispanic_business": {
              "type": "boolean",
              "example": false
            },
            "womens_business": {
              "type": "boolean",
              "example": false
            },
            "historically_underutilized_business": {
              "type": "boolean",
              "example": false
            },
            "sdvo_business": {
              "type": "boolean",
              "example": false
            },
            "certified_business_enterprise": {
              "type": "boolean",
              "example": false
            },
            "asian_american_business": {
              "type": "boolean",
              "example": false
            },
            "native_american_business": {
              "type": "boolean",
              "example": false
            },
            "disadvantaged_business": {
              "type": "boolean",
              "example": false
            },
            "minority_business_enterprise": {
              "type": "boolean",
              "example": true
            },
            "eight_a_business": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "primary_contact": {
          "type": "object",
          "description": "Primary contact",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 1306796
            },
            "first_name": {
              "type": "string",
              "description": "First name",
              "example": "Forrest"
            },
            "last_name": {
              "type": "string",
              "description": "Last name",
              "example": "Fleming"
            },
            "email_address": {
              "type": "string",
              "format": "email",
              "description": "Email",
              "example": "forrest.fleming_procore.com@procore.com"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "Created at",
              "example": "2016-10-23T21:39:40.000Z"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "description": "Updated at",
              "example": "2016-10-23T21:39:40.000Z"
            }
          }
        },
        "attachments": {
          "type": "array",
          "description": "Attachments",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "project_ids": {
          "type": "array",
          "description": "Project IDs",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "ChartWithData": {
      "type": "object",
      "properties": {
        "chart_id": {
          "type": "integer"
        },
        "category_name": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "measure": {
          "type": "string"
        },
        "measure_name": {
          "type": "string"
        },
        "chart_type": {
          "type": "string",
          "default": "bar"
        },
        "chart_title": {
          "type": "string"
        },
        "report": {
          "$ref": "#\/definitions\/DashboardReport"
        },
        "report_tab": {
          "$ref": "#\/definitions\/DashboardReportTab"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "Chart": {
      "type": "object",
      "properties": {
        "chart_id": {
          "type": "integer"
        },
        "category_name": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "measure": {
          "type": "string"
        },
        "measure_name": {
          "type": "string"
        },
        "chart_type": {
          "type": "string",
          "default": "bar"
        },
        "chart_title": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "report": {
          "$ref": "#\/definitions\/DashboardReport"
        },
        "report_tab": {
          "$ref": "#\/definitions\/DashboardReportTab"
        }
      }
    },
    "DashboardChartShow": {
      "type": "object",
      "properties": {
        "chart_id": {
          "type": "integer"
        },
        "dashboard_id": {
          "type": "integer"
        },
        "category_name": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "measure": {
          "type": "string"
        },
        "measure_name": {
          "type": "string"
        },
        "chart_type": {
          "type": "string",
          "default": "bar"
        },
        "chart_title": {
          "type": "string"
        },
        "report": {
          "$ref": "#\/definitions\/DashboardReport"
        },
        "report_tab": {
          "$ref": "#\/definitions\/DashboardReportTab"
        }
      }
    },
    "DashboardChart": {
      "type": "object",
      "properties": {
        "x": {
          "type": "integer"
        },
        "y": {
          "type": "integer"
        },
        "w": {
          "type": "integer"
        },
        "h": {
          "type": "integer"
        },
        "minW": {
          "type": "integer"
        },
        "maxW": {
          "type": "integer"
        },
        "minH": {
          "type": "integer"
        },
        "maxH": {
          "type": "integer"
        }
      }
    },
    "DashboardReportTab": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "DashboardReport": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Dashboard": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "project_id": {
          "type": "integer"
        },
        "company_id": {
          "type": "integer"
        },
        "charts": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/DashboardChart"
          }
        }
      }
    },
    "DrawRequestCompact": {
      "type": "object",
      "description": "Draw Request",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 58820
        },
        "billing_date": {
          "type": "string",
          "format": "date",
          "description": "Billing date",
          "example": "2013-11-20T00:00:00.000Z"
        },
        "invoice_number": {
          "type": "string",
          "description": "Invoice number",
          "example": 123
        },
        "percent_complete": {
          "type": "string",
          "description": "Percent complete",
          "example": 0
        },
        "period_start": {
          "type": "string",
          "format": "date",
          "description": "Period start date",
          "example": "2013-11-01T00:00:00.000Z"
        },
        "period_end": {
          "type": "string",
          "format": "date",
          "description": "Period end date",
          "example": "2013-11-02T00:00:00.000Z"
        },
        "status": {
          "type": "string",
          "enum": [
            "draft",
            "under_review",
            "revise_and_resubmit",
            "approved"
          ],
          "description": "Status",
          "example": "approved"
        },
        "number": {
          "type": "integer",
          "description": "Draw Request number",
          "example": 1
        },
        "g702": {
          "type": "object",
          "description": "Draw Request summary",
          "properties": {
            "balance_to_finish_including_retainage": {
              "type": "string",
              "description": "Balance to finish including retainage",
              "example": 1268346.55
            },
            "completed_work_retainage_percent": {
              "type": "string",
              "description": "Completed work retainage percent",
              "example": 10
            },
            "completed_work_retainage_amount": {
              "type": "string",
              "description": "Completed work retainage amount",
              "example": 1201
            },
            "contract_sum_to_date": {
              "type": "string",
              "description": "Contract sum to date",
              "example": 1279159.15
            },
            "current_payment_due": {
              "type": "string",
              "description": "Current payment due",
              "example": 10812.6
            },
            "less_previous_certificates_for_payment": {
              "type": "string",
              "description": "Less previous certificates for payment",
              "example": 0
            },
            "net_change_by_change_orders": {
              "type": "string",
              "description": "Net change by change orders",
              "example": 256706.65
            },
            "original_contract_sum": {
              "type": "string",
              "description": "Original contract sum",
              "example": 1022452.5
            },
            "stored_materials_retainage_amount": {
              "type": "string",
              "description": "Stored materials retainage amount",
              "example": 0.4
            },
            "stored_materials_retainage_percent": {
              "type": "string",
              "description": "Stored materials retainage percent",
              "example": 10
            },
            "total_completed_and_stored_to_date": {
              "type": "string",
              "description": "Total completed and stored to date",
              "example": 1201.4
            },
            "total_earned_less_retainage": {
              "type": "string",
              "description": "Total earned less retainage",
              "example": 10812.6
            },
            "total_retainage": {
              "type": "string",
              "description": "Total retainage",
              "example": 1201.4
            }
          }
        },
        "contract": {
          "type": "object",
          "description": "Contract",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Contract ID",
              "example": 133745
            },
            "type": {
              "type": "string",
              "description": "Contract type",
              "example": "PurchaseOrderContract"
            },
            "title": {
              "type": "string",
              "description": "Contract title",
              "example": "ROYALE"
            }
          }
        }
      }
    },
    "DrawRequest": {
      "allOf": [
        {
          "$ref": "#\/definitions\/DrawRequestCompact"
        },
        {
          "type": "object",
          "properties": {
            "g703": {
              "$ref": "#\/definitions\/DrawRequestContractItem"
            }
          }
        }
      ]
    },
    "DrawRequestContractItem": {
      "type": "object",
      "description": "Draw Request Contract Item",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 135135
        },
        "balance_to_finish": {
          "type": "string",
          "description": "Balance to finish amount",
          "example": 1
        },
        "materials_presently_stored": {
          "type": "string",
          "description": "Materials presently stored amount",
          "example": 0
        },
        "scheduled_value": {
          "type": "string",
          "description": "Scheduled value amount",
          "example": 1
        },
        "total_completed_and_stored_to_date": {
          "type": "string",
          "description": "Total completed and stored to date amount",
          "example": 0
        },
        "total_completed_and_stored_to_date_percent": {
          "type": "string",
          "description": "Total completed and stored to date percent",
          "example": 0
        },
        "work_completed_from_previous_application": {
          "type": "string",
          "description": "Work completed from previous application amount",
          "example": 0
        },
        "work_completed_this_period": {
          "type": "string",
          "description": "Work completed this period amount",
          "example": 0
        },
        "description_of_work": {
          "type": "string",
          "description": "Description of work",
          "example": "Install windows"
        },
        "item_number": {
          "type": "integer",
          "description": "Item number",
          "example": 1
        },
        "cost_code": {
          "type": "object",
          "description": "Cost code",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Cost Code ID",
              "example": 80598390
            },
            "code": {
              "type": "string",
              "description": "Code",
              "example": "210"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "Created at",
              "example": "2016-08-22T20:18:58.000Z"
            },
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Cast-In-Place Concrete"
            },
            "position": {
              "type": "integer",
              "description": "Position",
              "example": 1
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "description": "Updated at",
              "example": "2016-08-22T20:18:58.000Z"
            },
            "biller": {
              "type": "string",
              "description": "Biller name",
              "example": "Demo Account Project"
            },
            "full_code": {
              "type": "string",
              "description": "Full code",
              "example": "03-210"
            }
          }
        },
        "scheduled_unit_price": {
          "type": "string",
          "description": "Scheduled unit price",
          "example": 0
        },
        "scheduled_quantity": {
          "type": "string",
          "description": "Scheduled quantity",
          "example": 0
        },
        "total_completed_and_stored_to_date_quantity": {
          "type": "string",
          "description": "Total completed and stored to date quantity",
          "example": 0
        },
        "work_completed_this_period_quantity": {
          "type": "string",
          "description": "Work completed this period quantity",
          "example": 0
        },
        "work_completed_from_previous_application_quantity": {
          "type": "string",
          "description": "Work completed from previous application quantity",
          "example": 0
        },
        "work_completed_retainage_currently_retained": {
          "type": "string",
          "description": "Work completed retainage currently retained amount",
          "example": 0
        },
        "work_completed_retainage_from_previous_application": {
          "type": "string",
          "description": "Work completed retainage amount from previous application",
          "example": 0
        },
        "work_completed_retainage_released_this_period": {
          "type": "string",
          "description": "Work completed retainage amount released this period",
          "example": 0
        },
        "work_completed_retainage_retained_this_period": {
          "type": "string",
          "description": "Work completed retainage amount retained this period",
          "example": 0
        },
        "work_completed_retainage_percent_this_period": {
          "type": "string",
          "description": "Work completed retainage percent this period",
          "example": 10
        },
        "materials_stored_retainage_currently_retained": {
          "type": "string",
          "description": "Materials stored retainage amount currently retained",
          "example": 0
        },
        "materials_stored_retainage_from_previous_application": {
          "type": "string",
          "description": "Materials stored retainage amount from previous application",
          "example": 0
        },
        "materials_stored_retainage_released_this_period": {
          "type": "string",
          "description": "Materials stored retainage amount released this period",
          "example": 0
        },
        "materials_stored_retainage_retained_this_period": {
          "type": "string",
          "description": "Materials stored retainage amount retained this period",
          "example": 0
        },
        "materials_stored_retainage_percent_this_period": {
          "type": "string",
          "description": "Materials stored retainage percent this period",
          "example": 10
        },
        "total_retainage_currently_retained": {
          "type": "string",
          "description": "Total retainage amount currently retained",
          "example": 0
        },
        "total_retainage_from_previous_application": {
          "type": "string",
          "description": "Total retainage amount from previous application",
          "example": 0
        }
      }
    },
    "Report": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "report_tabs_attributes": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ReportTab"
          }
        }
      }
    },
    "ReportTabChart": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "category_column": {
          "type": "string"
        },
        "color_by": {
          "type": "string"
        },
        "graph_type": {
          "type": "string"
        },
        "measure_column": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "tool_type": {
          "type": "string"
        }
      }
    },
    "ReportTabColumn": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "aggregation": {
          "type": "string"
        },
        "attribute": {
          "type": "string"
        },
        "data_type": {
          "type": "string"
        },
        "filterable": {
          "type": "boolean"
        },
        "formula": {
          "type": "string"
        },
        "groupable": {
          "type": "boolean"
        },
        "grouped": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "position": {
          "type": "integer"
        },
        "sortable": {
          "type": "boolean"
        },
        "supported_aggregation": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supported_filter_operators": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "min_values_length": {
                "type": "integer"
              }
            }
          }
        },
        "tool_type": {
          "type": "string"
        }
      }
    },
    "ReportTabFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "attribute": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "supported_filter_operators": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "min_values_length": {
                "type": "integer"
              }
            }
          }
        },
        "tool_type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ReportTabSort": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "attribute": {
          "type": "string"
        },
        "direction": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "position": {
          "type": "integer"
        },
        "tool_type": {
          "type": "string"
        }
      }
    },
    "ReportTab": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "report_tab_charts_attributes": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ReportTabChart"
          }
        },
        "report_tab_columns_attributes": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ReportTabColumn"
          }
        },
        "report_tab_filters_attributes": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ReportTabFilter"
          }
        },
        "report_tab_sorts_attributes": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ReportTabSort"
          }
        },
        "tool_types": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "tool_type": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "ErpVendorType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Vendor Type",
          "example": 123
        },
        "name": {
          "type": "string",
          "description": "The Name of the ERP Vendor Type",
          "example": "Subcontractor"
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Vendor Type",
          "example": "1VT-33778-013"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Vendor Type. Note: This is a free-form text field.",
          "example": "{ parent_ids: [1,2] }"
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Vendor Type",
          "example": 2147483647
        }
      }
    },
    "ErpVendorTypeSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpVendorType"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpInsuranceType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "integer"
        },
        "origin_id": {
          "type": "string"
        },
        "origin_data": {
          "type": "string"
        }
      }
    },
    "ErpInsuranceTypeCreate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "integer"
        },
        "origin_id": {
          "type": "string"
        },
        "origin_data": {
          "type": "string"
        }
      }
    },
    "ErpInsuranceTypeSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpInsuranceType"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpChangeOrderPackagesLineItems": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the Erp Change Order Package Line Item",
          "example": 1234
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of the Change Order Package Line Item",
          "example": "1VT-33778-013"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Change Order Package Line Item. Note: This is a free-form text field.",
          "example": "{ additional_data: [] }"
        },
        "cost_code_origin_id": {
          "type": "string",
          "description": "The 'origin_id' of the associated Erp Cost Code",
          "example": "1VT-33778-014"
        },
        "line_item_type_origin_id": {
          "type": "string",
          "description": "The 'origin_id' of the associated Erp Line Item Type",
          "example": "1VT-33778-015"
        },
        "contract_line_item_id": {
          "type": "integer",
          "description": "The 'id' of the associated Erp Contract Line Item",
          "example": 1234
        },
        "contract_line_item_origin_id": {
          "type": "string",
          "description": "The 'origin_id' of the associated Erp Contract Line Item",
          "example": "1VT-33778-016"
        },
        "amount": {
          "type": "number",
          "description": "ERP Change Order Package Line Item Amount",
          "example": 100
        },
        "description": {
          "type": "string",
          "description": "ERP Change Order Package Line Item Description",
          "example": "Delete heat soak requirement"
        },
        "quantity": {
          "type": "string",
          "description": "ERP Change Order Package Line Item Quantity",
          "example": "1.00"
        },
        "unit_cost": {
          "type": "number",
          "description": "ERP Change Order Package Line Item unit cost",
          "example": 10
        },
        "uom": {
          "type": "string",
          "description": "ERP Change Order Package Line Item units of measurement",
          "example": "Ea"
        },
        "synced": {
          "type": "boolean",
          "description": "A flag indicating whether the ERP Change Order Package Line Item is synced with a Procore Change Order Package Line Item.",
          "example": true
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Change Order Package Line Item",
          "example": 2147483647
        }
      }
    },
    "ErpChangeOrderPackagesLineItemsSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpChangeOrderPackagesLineItems"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpChangeOrderPackage": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The Third-party User-defined Unique Identifier of the ERP Change Order Package",
          "example": "001"
        },
        "created_by_id": {
          "type": "integer",
          "description": "Procore ID of the User that created the Change Order Package",
          "example": 123
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Additional Time & Materials for October"
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "description": "Due date",
          "example": "2016-10-23"
        },
        "executed": {
          "type": "boolean",
          "description": "Executed",
          "example": true
        },
        "grand_total": {
          "type": "string",
          "description": "Total including markup",
          "example": 23474
        },
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Change Order Package",
          "example": 123
        },
        "invoiced_date": {
          "type": "string",
          "format": "date",
          "description": "Invoiced date",
          "example": "2012-10-24"
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "H-38"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Change Order Package. Note: This is a free-form text field.",
          "example": "{ additional_data: [] }"
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Change Order Package",
          "example": "4COP-1001-231"
        },
        "paid_date": {
          "type": "string",
          "format": "date",
          "description": "Paid date",
          "example": "2016-11-23"
        },
        "schedule_impact_amount": {
          "type": "integer",
          "description": "Schedule impact in days",
          "example": 5
        },
        "status": {
          "description": "Status",
          "example": "draft",
          "enum": [
            "draft",
            "not_pricing",
            "pricing",
            "pending",
            "revised",
            "proceeding",
            "not_proceeding",
            "no_charge",
            "approved",
            "rejected"
          ]
        },
        "synced": {
          "type": "boolean",
          "description": "A flag indicating whether the ERP Change Order Package is synced with a Procore Change Order Package. Possible values: (true|false)",
          "example": true
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Additional Time & Materials"
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Change Order Package",
          "example": 2147483647
        }
      }
    },
    "ErpChangeOrderPackageSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpChangeOrderPackage"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpWorkOrderContract": {
      "type": "object",
      "properties": {
        "actual_completion_date": {
          "type": "string",
          "format": "date",
          "description": "Work Order Contract actual completion date",
          "example": "2012-10-27"
        },
        "code": {
          "type": "string",
          "description": "The Third-party User-defined Unique Identifier of the ERP Work Order Contract",
          "example": "SC-001"
        },
        "contract_estimated_completion_date": {
          "type": "string",
          "format": "date",
          "description": "Work Order Contract estimated completion date",
          "example": "2012-10-31"
        },
        "contract_start_date": {
          "type": "string",
          "format": "date",
          "description": "Work Order Contract start date",
          "example": "2012-10-03"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "<p>Paving level 3 parking lot.<\/p>"
        },
        "exclusions": {
          "type": "string",
          "description": "Exclusions",
          "example": "<p>Stairs, Elevator platform<\/p>"
        },
        "executed": {
          "type": "boolean",
          "description": "Executed (or not)",
          "example": false
        },
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Work Order Contract",
          "example": 123
        },
        "inclusions": {
          "type": "string",
          "description": "Inclusions",
          "example": "<p>Level 3 parking lot.<\/p>"
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "SC-001"
        },
        "private": {
          "type": "boolean",
          "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
          "example": false
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Work Order Contract",
          "example": "1SC-33778-013"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Work Order Contract. Note: This is a free-form text field.",
          "example": "{ additional_data: [] }"
        },
        "retainage_percent": {
          "type": "string",
          "description": "Retainage percent",
          "example": 10.5
        },
        "signed_contract_received_date": {
          "type": "string",
          "format": "date",
          "description": "Work Order Contract signed contract received date",
          "example": "2012-10-25"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "Draft",
            "Out For Bid",
            "Out For Signature",
            "Approved",
            "Complete",
            "Terminated",
            "Void"
          ],
          "example": "Draft"
        },
        "synced": {
          "type": "boolean",
          "description": "A flag indicating whether the ERP Work Order Contract is synced with a Procore Work Order Contract. Possible values: (true|false)",
          "example": true
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Concrete Paving"
        },
        "vendor_id": {
          "type": "integer",
          "description": "The Procore Vendor ID associated with the Work Order Contract",
          "example": 123
        },
        "vendor_origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Work Order Contract's Vendor",
          "example": "ADAM-WS1"
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Work Order Contract",
          "example": 2147483647
        }
      }
    },
    "ErpWorkOrderContractSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpWorkOrderContract"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpPurchaseOrderContract": {
      "type": "object",
      "properties": {
        "assignee_id": {
          "type": "integer",
          "description": "The Procore User ID the Purchase Order Contract is assigned to",
          "example": 464773
        },
        "bill_to_address": {
          "type": "string",
          "description": "Bill to Address",
          "example": "1410 Harbor View Drive Newport Beach, CA 92663"
        },
        "code": {
          "type": "string",
          "description": "The Third-party User-defined Unique Identifier of the ERP Purchase Order Contract",
          "example": "PO-001"
        },
        "delivery_date": {
          "type": "string",
          "format": "date",
          "description": "Purchase order delivery date",
          "example": "2012-10-03"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "<p>Paving level 3 parking lot.<\/p>"
        },
        "executed": {
          "type": "boolean",
          "description": "Executed (or not)",
          "example": false
        },
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Purchase Order Contract",
          "example": 123
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "SC-001"
        },
        "payment_terms": {
          "type": "string",
          "description": "Payment terms",
          "example": "Net 30"
        },
        "private": {
          "type": "boolean",
          "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
          "example": false
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Purchase Order Contract",
          "example": "1PO-33778-013"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Purchase Order Contract. Note: This is a free-form text field.",
          "example": "{ additional_data: [] }"
        },
        "retainage_percent": {
          "type": "string",
          "description": "Retainage percent",
          "example": 10.5
        },
        "ship_to_address": {
          "type": "string",
          "description": "Ship to address",
          "example": "Santa Claus Lane, Carpinteria, CA"
        },
        "ship_via": {
          "type": "string",
          "description": "Ship via",
          "example": "Acme Shipping"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "Draft",
            "Processing",
            "Submitted",
            "Partially Received",
            "Received",
            "Approved",
            "Closed"
          ],
          "example": "Processing"
        },
        "synced": {
          "type": "boolean",
          "description": "A flag indicating whether the ERP Purchase Order Contract is synced with a Procore Purchase Order Contract. Possible values: (true|false)",
          "example": true
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Concrete Paving"
        },
        "vendor_id": {
          "type": "integer",
          "description": "The Procore Vendor ID associated with the Purchase Order Contract",
          "example": 123
        },
        "vendor_origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Purchase Order Contract's Vendor",
          "example": "ADAM-WS1"
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Purchase Order Contract",
          "example": 2147483647
        }
      }
    },
    "ErpPurchaseOrderContractSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpWorkOrderContract"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpJobCost": {
      "type": "object",
      "properties": {
        "approved_commitment_changes": {
          "type": "number",
          "format": "float",
          "description": "Approved commitment changes",
          "example": "0.0"
        },
        "approved_estimate_changes": {
          "type": "number",
          "format": "float",
          "description": "Approved estimate changes",
          "example": "0.0"
        },
        "approved_estimate_unit_changes": {
          "type": "number",
          "format": "float",
          "description": "Approved estimate unit changes",
          "example": "0.0"
        },
        "commitment_invoiced": {
          "type": "number",
          "format": "float",
          "description": "Commitment invoiced amount",
          "example": "0.0"
        },
        "committed_costs": {
          "type": "number",
          "format": "float",
          "description": "Committed costs",
          "example": "0.0"
        },
        "cost_code_origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Job Cost's Cost Code",
          "example": "CC5-3992"
        },
        "estimate": {
          "type": "number",
          "format": "float",
          "description": "Estimate",
          "example": "0.0"
        },
        "estimate_units": {
          "type": "number",
          "format": "float",
          "description": "Estimate units",
          "example": "0.0"
        },
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Job Cost",
          "example": 123
        },
        "job_to_date_cost": {
          "type": "number",
          "format": "float",
          "description": "Job to date cost",
          "example": "0.0"
        },
        "job_to_date_dollars_paid": {
          "type": "number",
          "format": "float",
          "description": "Job to date dollars paid",
          "example": "0.0"
        },
        "job_to_date_units": {
          "type": "number",
          "format": "float",
          "description": "Job to date units",
          "example": "0.0"
        },
        "month_to_date_cost": {
          "type": "number",
          "format": "float",
          "description": "Month to date cost",
          "example": "0.0"
        },
        "month_to_date_dollars_paid": {
          "type": "number",
          "format": "float",
          "description": "Month to date dollars paid",
          "example": "0.0"
        },
        "month_to_date_units": {
          "type": "number",
          "format": "float",
          "description": "Month to date units",
          "example": "0.0"
        },
        "open_balance": {
          "type": "number",
          "format": "float",
          "description": "Open balance",
          "example": "0.0"
        },
        "original_commitment": {
          "type": "number",
          "format": "float",
          "description": "Original commitment amount",
          "example": "0.0"
        },
        "original_estimate": {
          "type": "number",
          "format": "float",
          "description": "Original estimate",
          "example": "0.0"
        },
        "original_estimate_units": {
          "type": "number",
          "format": "float",
          "description": "Original estimate units",
          "example": "0.0"
        },
        "paid_amount": {
          "type": "number",
          "format": "float",
          "description": "Paid amount",
          "example": "0.0"
        },
        "percentage_complete": {
          "type": "number",
          "format": "float",
          "description": "Percentage complete",
          "example": "0.0"
        },
        "revised_commitment": {
          "type": "number",
          "format": "float",
          "description": "Revised commitment amount",
          "example": "0.0"
        },
        "standard_category_origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Job Cost's Standard Category",
          "example": "M5-3211"
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Job Cost",
          "example": 2147483647
        }
      }
    },
    "ErpJobCostSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpJobCost"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpBudget": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Budget",
          "example": 123
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Budget",
          "example": "1B-100"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Budget. Note: This is a free-form text field.",
          "example": "{ additional_data: [] }"
        },
        "synced": {
          "type": "boolean",
          "description": "A flag indicating whether the ERP Budget is synced with a Procore Budget. Possible values: (true|false)",
          "example": true
        }
      }
    },
    "ErpBudgetSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpBudget"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpCommitmentLineItem": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "description": "Line Item amount",
          "example": "1000.0"
        },
        "cost_code_origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Line Item's Cost Code",
          "example": "CC1-7221"
        },
        "description": {
          "type": "string",
          "description": "Line Item description",
          "example": "Cleanup"
        },
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Line Item",
          "example": 123
        },
        "line_item_type_origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Line Item's Line Item Type (Standard Category)",
          "example": "Cat1-M"
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Line Item",
          "example": "LI1-SC-1"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Line Item. Note: This is a free-form text field.",
          "example": "{ additional_data: [] }"
        },
        "position": {
          "type": "integer",
          "description": "Line Item position",
          "example": 1
        },
        "quantity": {
          "type": "number",
          "format": "float",
          "description": "Line Item quantity",
          "example": "10.0"
        },
        "synced": {
          "type": "boolean",
          "description": "A flag indicating whether the ERP Line Item is synced with a Procore Line Item. Possible values: (true|false)",
          "example": true
        },
        "unit_cost": {
          "type": "number",
          "format": "float",
          "description": "Line Item unit cost",
          "example": "100.0"
        },
        "unit_description": {
          "type": "string",
          "description": "Line Item unit description",
          "example": "Lbs"
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Line Item",
          "example": 2147483647
        }
      }
    },
    "ErpCommitmentLineItemSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpCommitmentLineItem"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpLineItemType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Line Item Type",
          "example": 123
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Line Item Type",
          "example": "1VT-33778-013"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Line Item Type. Note: This is a free-form text field.",
          "example": "{ additional_data: [] }"
        },
        "accumulation_name": {
          "type": "string",
          "description": "The Accumulation Name of the ERP Line Item Type",
          "example": "Labor"
        },
        "base_type": {
          "type": "string",
          "description": "The Base Type for the ERP Line Item Type",
          "example": "other"
        },
        "csv_import_code": {
          "type": "string",
          "description": "The Short Code for the ERP Line Item Type",
          "example": "L2"
        },
        "is_active": {
          "type": "boolean",
          "description": "The Active status of the ERP Line Item Type",
          "example": true
        },
        "name": {
          "type": "string",
          "description": "The Name of the ERP Line Item Type",
          "example": "Labor"
        },
        "synced": {
          "type": "boolean",
          "description": "The Synced Status of the ERP Line Item Type",
          "example": true
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Line Item Type",
          "example": 2147483647
        }
      }
    },
    "ErpLineItemTypeSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpLineItemType"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpConnection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Erp Connection ID",
          "example": 123
        },
        "standard_cost_code_sync_complete": {
          "type": "boolean",
          "description": "Flag that signifies if a Standard Cost Code sync has completed.",
          "example": true
        },
        "standard_category_sync_complete": {
          "type": "boolean",
          "description": "Flag that signifies if a Standard Category sync has completed.",
          "example": true
        },
        "vendor_sync_complete": {
          "type": "boolean",
          "description": "Flag that signifies if a Vendor sync has completed.",
          "example": true
        },
        "vendor_type_sync_complete": {
          "type": "boolean",
          "description": "Flag that signifies if a Vendor Type sync has completed.",
          "example": true
        },
        "job_sync_complete": {
          "type": "boolean",
          "description": "Flag that signifies if a Job sync has completed.",
          "example": true
        },
        "cost_sync_complete": {
          "type": "boolean",
          "description": "Flag that signifies if a Job Cost sync has completed.",
          "example": true
        },
        "customer_sync_complete": {
          "type": "boolean",
          "description": "Flag that signifies if a Customer sync has completed.",
          "example": true
        },
        "accounts_sync_complete": {
          "type": "boolean",
          "description": "Flag that signifies if a Account sync has completed.",
          "example": true
        },
        "insurance_type_sync_complete": {
          "type": "boolean",
          "description": "Flag that signifies if a Insurance Type sync has completed.",
          "example": true
        }
      }
    },
    "ErpCostCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the Cost Code",
          "example": 123
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of ERP Cost Code",
          "example": "1VT-33779-013"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the Cost Code. Note: This is a free-form text field.",
          "example": "{ parent_ids: [1,2] }"
        },
        "full_code": {
          "type": "string",
          "description": "Full Cost code, including parent prefixes",
          "example": "02-300"
        },
        "name": {
          "type": "string",
          "description": "Erp Cost Code Name",
          "example": "Earthwork"
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Cost Code",
          "example": 14249
        },
        "standard_cost_code_origin_id": {
          "type": "string",
          "description": "The origin ID of the corresponding ERP Standard Cost Code",
          "example": "1VT-33779-013"
        },
        "is_group_code": {
          "type": "boolean",
          "description": "Flag that denotes if the ERP Standard Cost Code is a Group Code",
          "example": false
        },
        "parent_origin_id": {
          "type": "string",
          "description": "The origin ID of the Parent ERP Cost Code",
          "example": "1VT-33779-012"
        },
        "standard_category_origin_ids": {
          "type": "array",
          "description": "Array of Erp Standard Categories that are assigned to this Erp Cost Code",
          "example": "[\"1\",\"2\",\"4\"]",
          "items": {
            "type": "string"
          }
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": 1
        },
        "code": {
          "type": "string",
          "description": "Cost code, not including parent prefix",
          "example": "300"
        },
        "synced": {
          "type": "boolean",
          "description": "Flag that denotes if the ERP Cost Code is synced with a Procore Cost Code.",
          "example": true
        }
      }
    },
    "ErpCostCodeSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpCostCode"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpSubJob": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "origin_id": {
          "type": "string"
        },
        "origin_data": {
          "type": "string"
        },
        "customer_origin_id": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        },
        "address4": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "parent_origin_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "version": {
          "type": "integer"
        },
        "synced": {
          "type": "boolean"
        },
        "costs_syncing": {
          "type": "boolean"
        },
        "archived": {
          "type": "boolean"
        }
      }
    },
    "ErpSubJobCreate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "origin_id": {
          "type": "string"
        },
        "origin_data": {
          "type": "string"
        },
        "customer_origin_id": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        },
        "address4": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "parent_origin_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "version": {
          "type": "integer"
        },
        "synced": {
          "type": "boolean"
        },
        "costs_syncing": {
          "type": "boolean"
        },
        "archived": {
          "type": "boolean"
        }
      }
    },
    "ErpSubJobSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpSubJob"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpCustomer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Customer",
          "example": 123
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Customer",
          "example": "1VT-33778-013"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Customer. Note: This is a free-form text field.",
          "example": "{ additional_data: [] }"
        },
        "name": {
          "type": "string",
          "description": "The Name of the ERP Customer",
          "example": "John Doe"
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Customer",
          "example": 2147483647
        }
      }
    },
    "ErpCustomerSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpCustomer"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the Account",
          "example": 123
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of Erp Account",
          "example": "1VT-33779-013"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the Account. Note: This is a free-form text field.",
          "example": "{ parent_ids: [1,2] }"
        },
        "code": {
          "type": "string",
          "description": "Erp Account code",
          "example": 1110
        },
        "name": {
          "type": "string",
          "description": "Erp Account name",
          "example": "Company Checking Account"
        },
        "parent_origin_id": {
          "type": "string",
          "description": "Origin ID of the parent Erp Account",
          "example": "1VT-33779-012"
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Cost Code",
          "example": 14249
        }
      }
    },
    "ErpAccountSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpAccount"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpVendor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Vendor",
          "example": 123
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Vendor",
          "example": "1VT-33778-013"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Vendor. Note: This is a free-form text field.",
          "example": "{ additional_data: [] }"
        },
        "address": {
          "type": "string",
          "description": "The Address of the ERP Vendor",
          "example": "6309 Carpinteria Ave."
        },
        "name": {
          "type": "string",
          "description": "The Name of the ERP Vendor",
          "example": "Procore Incorporated"
        },
        "email_address": {
          "type": "string",
          "description": "The Email Address of the ERP Vendor",
          "example": "procore@procore.com"
        },
        "city": {
          "type": "string",
          "description": "The City of the ERP Vendor",
          "example": "Carpinteria"
        },
        "zip": {
          "type": "string",
          "description": "The Zip Code of the ERP Vendor",
          "example": "93013"
        },
        "business_phone": {
          "type": "string",
          "description": "The Business Phone of the ERP Vendor",
          "example": "(812) 989-9810"
        },
        "mobile_phone": {
          "type": "string",
          "description": "The Mobile Phone of the ERP Vendor",
          "example": "(812) 989-9810"
        },
        "fax_number": {
          "type": "string",
          "description": "The Fax Number of the ERP Vendor",
          "example": "(812) 989-9810"
        },
        "is_active": {
          "type": "boolean",
          "description": "The Active status of the ERP Vendor",
          "example": true
        },
        "state_code": {
          "type": "string",
          "description": "The State Code of the ERP Vendor",
          "example": "CA"
        },
        "authorized_bidder": {
          "type": "boolean",
          "description": "The Authorized Bidder status of the ERP Vendor",
          "example": true
        },
        "prequalified": {
          "type": "boolean",
          "description": "The Prequalified status of the ERP Vendor",
          "example": false
        },
        "country_code": {
          "type": "string",
          "description": "The Country Code of the ERP Vendor",
          "example": "US"
        },
        "abbreviated_name": {
          "type": "string",
          "description": "The Abbreviated Name of the ERP Vendor",
          "example": "Procore Inc."
        },
        "labor_union": {
          "type": "string",
          "description": "The Labor Union of the ERP Vendor",
          "example": "IWW 872"
        },
        "license_number": {
          "type": "string",
          "description": "The License Number of the ERP Vendor",
          "example": "1901XYZ"
        },
        "non_union_prevailing_wage": {
          "type": "boolean",
          "description": "The Non Union Prevailing Wage status of the ERP Vendor",
          "example": false
        },
        "notes": {
          "type": "string",
          "description": "The Notes (notes\/keywords\/tags) of the ERP Vendor",
          "example": "owned by a dog"
        },
        "union_member": {
          "type": "boolean",
          "description": "The Union Member status of the ERP Vendor",
          "example": false
        },
        "website": {
          "type": "string",
          "description": "The Website url of the ERP Vendor",
          "example": "procore.com"
        },
        "primary_contact_id": {
          "type": "integer",
          "description": "The ID of the Primary Contact of the ERP Vendor",
          "example": 42
        },
        "code": {
          "type": "string",
          "description": "The Third-party User-defined Unique Identifier of the ERP Vendor",
          "example": "PINC"
        },
        "synced": {
          "type": "boolean",
          "description": "A flag indicating whether the ERP Vendor is synced with a Procore Vendor. Possible values: (true|false)",
          "example": true
        },
        "vendor_type_origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Vendor's Vendor Type",
          "example": "1VT-33778-013"
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Vendor",
          "example": 2147483647
        }
      }
    },
    "ErpVendorSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpVendor"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpProject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Project",
          "example": 123
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Project",
          "example": "1VT-33778-013"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Project. Note: This is a free-form text field.",
          "example": "{ additional_data: [] }"
        },
        "customer_origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Project's Customer",
          "example": "1VT-33778-013"
        },
        "city": {
          "type": "string",
          "description": "The City in which the ERP Project is located",
          "example": "Carpinteria"
        },
        "active": {
          "type": "boolean",
          "description": "The Active status of the ERP Project",
          "example": true
        },
        "name": {
          "type": "string",
          "description": "The Name of the ERP Project",
          "example": "P4"
        },
        "parent_origin_id": {
          "type": "string",
          "description": "The Third-party ID of the ERP Project's Parent.",
          "example": "P1-3445"
        },
        "status": {
          "type": "string",
          "description": "The Status of the ERP Project",
          "example": "In Progress"
        },
        "code": {
          "type": "string",
          "description": "The Third-party user-defined unique identifier",
          "example": "P4-J1"
        },
        "version": {
          "type": "integer",
          "description": "The Version number of the ERP Project",
          "example": 2147483647
        },
        "synced": {
          "type": "boolean",
          "description": "The Synced status of the ERP Project",
          "example": true
        },
        "costs_syncing": {
          "type": "boolean",
          "description": "The Costs Syncing status of the ERP Project",
          "example": false
        },
        "archived": {
          "type": "boolean",
          "description": "The Archived status of the ERP Project",
          "example": false
        },
        "address": {
          "type": "string",
          "description": "The street Address of the ERP Project location",
          "example": "6309 Carpinteria Ave."
        },
        "state_code": {
          "type": "string",
          "description": "The Code that represents the State of the ERP Project.\nMust be a valid Subregion Code within the specified Country Code as defined\nby the ruby gem Carmen\n",
          "example": "CA"
        },
        "zip": {
          "type": "string",
          "description": "The Zip code of the ERP Project",
          "example": "93013"
        },
        "country_code": {
          "type": "string",
          "description": "The two character Code that represents the Country in which the ERP Project is located\n",
          "example": "US"
        },
        "description": {
          "type": "string",
          "description": "The Description of the ERP Project",
          "example": "Project of Procore"
        },
        "estimated_completion_date": {
          "type": "string",
          "format": "date",
          "description": "The Estimated Completion Date of the ERP Project",
          "example": "2015-05-15"
        },
        "estimated_start_date": {
          "type": "string",
          "format": "date",
          "description": "The Estimated Start Date of the ERP Project",
          "example": "2015-05-15"
        },
        "flag": {
          "type": "string",
          "enum": [
            "Red",
            "Yellow",
            "Green"
          ],
          "description": "The Flag of the ERP Project",
          "example": "Yellow"
        },
        "image_id": {
          "type": "integer",
          "description": "The ID of the Image of the ERP Project",
          "example": 21
        },
        "phone": {
          "type": "string",
          "description": "The Phone number of the ERP Project",
          "example": "310-555-5555"
        },
        "program_id": {
          "type": "integer",
          "description": "The Program ID of the ERP Project",
          "example": 5
        },
        "project_number": {
          "type": "string",
          "description": "The Number of the ERP Project",
          "example": "A-2"
        },
        "project_stage_id": {
          "type": "integer",
          "description": "The Project Stage ID for the ERP Project",
          "example": 1
        },
        "project_type_id": {
          "type": "integer",
          "description": "The Project Type ID of the Project",
          "example": 1
        },
        "public_notes": {
          "type": "string",
          "description": "The Public Notes of the Project",
          "example": "Notes"
        },
        "square_feet": {
          "type": "integer",
          "description": "The Square Footage of the Project",
          "example": 5000
        },
        "office_id": {
          "type": "integer",
          "description": "The ID of the Office of the Project",
          "example": 1
        },
        "department_ids": {
          "type": "array",
          "description": "The IDs of the Departments the Project belongs to.\nThe array should always represent all Departments, so if you have `[1, 2, 3]` and\nwant to remove deparment `2`, then send `[1, 3]`\n",
          "example": [
            3128,
            3127
          ],
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "ErpProjectSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpProject"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpStandardCostCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the ERP Standard Cost Code",
          "example": 123
        },
        "origin_id": {
          "type": "string",
          "description": "The Third-party ID of ERP Standard Cost Code",
          "example": "1VT-33779-013"
        },
        "origin_data": {
          "type": "string",
          "description": "Additional Third-party Metadata of the ERP Standard Cost Code. Note: This is a free-form text field.",
          "example": "{ parent_ids: [1,2] }"
        },
        "full_code": {
          "type": "string",
          "description": "Cost code, including parent prefixes",
          "example": "2-075"
        },
        "code": {
          "type": "string",
          "description": "Cost code, not including parent prefix",
          "example": "075"
        },
        "is_active": {
          "type": "boolean",
          "description": "ERP Standard Cost Code is active flag.",
          "example": true
        },
        "is_group_code": {
          "type": "boolean",
          "description": "Flag that denotes if the ERP Standard Cost Code is a Group Code.",
          "example": false
        },
        "parent_origin_id": {
          "type": "string",
          "description": "The Parent ERP Standard Cost Code Origin ID",
          "example": "1VT-33779-012"
        },
        "name": {
          "type": "string",
          "description": "The name of the ERP Standard Cost Code.",
          "example": "Concrete Removal"
        },
        "version": {
          "type": "integer",
          "description": "The Version Number of the ERP Standard Cost Code",
          "example": "14249"
        },
        "synced": {
          "type": "boolean",
          "description": "Flag that denotes if the ERP Standard Cost Code is synced with a Procore Standard Cost Code.",
          "example": true
        }
      }
    },
    "ErpStandardCostCodeSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ErpStandardCostCode"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ErpSyncEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the Erp Sync Event",
          "example": 123
        },
        "success": {
          "type": "boolean",
          "description": "Flag that denotes if the Sync Event was a success or not",
          "example": true
        },
        "errors": {
          "type": "array",
          "description": "Array containing error messages for the Erp Sync Event",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Bid": {
      "type": "object",
      "description": "Bid",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 75414
        },
        "company_id": {
          "type": "integer",
          "description": "Company ID",
          "example": 2342
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "bid_package_title": {
          "type": "string",
          "description": "Package Title",
          "example": "Test Bid Documents Email Link from Correspondence"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "description": "Due date",
          "example": "2016-12-13T03:00:00.000Z"
        },
        "is_bidder_committed": {
          "type": "boolean",
          "description": "Bidder committed",
          "example": true
        },
        "awarded": {
          "type": "boolean",
          "description": "Bid awarded to vendor",
          "example": false
        },
        "submitted": {
          "type": "boolean",
          "description": "Vendor submitted bid",
          "example": true
        },
        "lump_sum_enabled": {
          "type": "boolean",
          "description": "Lump sum bidding enabled",
          "example": false
        },
        "lump_sum_amount": {
          "type": "number",
          "format": "float",
          "description": "Lump sum (overall) amount",
          "example": 200.5
        },
        "bidder_comments": {
          "type": "string",
          "description": "Comments",
          "example": "Tupac is the best rapper who also bids on demo projects"
        },
        "vendor": {
          "type": "object",
          "description": "Vendor Info",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Demo Company 1"
            },
            "avatar_url": {
              "type": "string",
              "description": "Link to avatar picture",
              "example": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20160422154654_production_397508974.png?AWSAccessKeyId=AKIAJ5EH2SRCJA6V2DKA&Expires=2100610164&Signature=CEHFF%2BS3hvSqrzFRAULDZhI7Es4%3D"
            }
          }
        },
        "project": {
          "type": "object",
          "description": "Project Info",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Project 1"
            },
            "address": {
              "type": "string",
              "description": "Address",
              "example": "One Space Way<br>Risa SB12<br>United States"
            }
          }
        },
        "bid_items": {
          "type": "array",
          "description": "Items",
          "items": {
            "$ref": "#\/definitions\/BidItem"
          }
        },
        "attachments": {
          "type": "array",
          "description": "Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        }
      }
    },
    "BidIndex": {
      "type": "object",
      "description": "Summary",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 75414
        },
        "company_id": {
          "type": "integer",
          "description": "Company ID",
          "example": 3355
        },
        "bid_package_title": {
          "type": "string",
          "description": "Bid Package title",
          "example": "Test Bid documents email link from correspondence"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "description": "Due Date",
          "example": "2016-12-13T03:00:00.000Z"
        },
        "is_bidder_committed": {
          "type": "boolean",
          "description": "Bidder committed",
          "example": true
        },
        "awarded": {
          "type": "boolean",
          "description": "Bid awarded to vendor",
          "example": false
        },
        "submitted": {
          "type": "boolean",
          "description": "Vendor submitted Bid",
          "example": true
        },
        "lump_sum_enabled": {
          "type": "boolean",
          "description": "Lump sum bidding enabled",
          "example": false
        },
        "lump_sum_amount": {
          "type": "number",
          "format": "float",
          "description": "Lump sum (overall) amount",
          "example": 200.5
        },
        "bidder_comments": {
          "type": "string",
          "description": "Comments",
          "example": "Tupac is the best rapper who also bids on demo projects"
        },
        "vendor": {
          "type": "object",
          "description": "Vendor information",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Demo Company 1"
            },
            "avatar_url": {
              "type": "string",
              "description": "Link to avatar picture",
              "example": "https:\/\/s3.amazonaws.com\/pro-core.com\/prostore\/20160422154654_production_397508974.png?AWSAccessKeyId=AKIAJ5EH2SRCJA6V2DKA&Expires=2100610164&Signature=CEHFF%2BS3hvSqrzFRAULDZhI7Es4%3D"
            }
          }
        },
        "project": {
          "type": "object",
          "description": "Project information",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Project 1"
            },
            "address": {
              "type": "string",
              "description": "Address",
              "example": "One Space Way<br>Risa SB12<br>United States"
            }
          }
        }
      }
    },
    "BidItem": {
      "type": "object",
      "description": "Bid Item",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 223345
        },
        "cost_code_id": {
          "type": "integer",
          "description": "Cost Code ID",
          "example": 32780682
        },
        "cost_code_name": {
          "type": "string",
          "description": "Cost Code name",
          "example": "Wood Sub-floors"
        },
        "amount": {
          "type": "integer",
          "description": "Amount in cents",
          "example": 100000
        }
      }
    },
    "ChangeEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 43453
        },
        "number": {
          "type": "integer",
          "description": "Number with alpha characters stripped out",
          "example": 14
        },
        "alphanumeric_number": {
          "type": "string",
          "description": "Number including alpha characters",
          "example": "A14"
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Bathtub replacement"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Replace the bathtub in the bathroom"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "Pending - Revised"
        },
        "project_id": {
          "type": "integer",
          "description": "Project ID",
          "example": 23446
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "event_type": {
          "type": "string",
          "description": "Event type",
          "example": "tbd",
          "enum": [
            "tbd",
            "allowance",
            "contingency",
            "owner_change",
            "transfer"
          ]
        },
        "event_scope": {
          "type": "string",
          "description": "Event scope",
          "example": "in_scope",
          "enum": [
            "tbd",
            "in_scope",
            "out_of_scope"
          ]
        },
        "rfi": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 34523
            },
            "title": {
              "type": "string",
              "description": "Title",
              "example": "Electrical panel obstructed"
            },
            "number": {
              "type": "integer",
              "description": "Number",
              "example": 3
            },
            "due_date": {
              "type": "string",
              "format": "date-time",
              "description": "Due date",
              "example": "2016-11-23T21:39:40.000Z"
            },
            "status": {
              "type": "string",
              "description": "Status",
              "example": "draft"
            }
          }
        },
        "change_event_line_items": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ChangeEventLineItem"
          }
        },
        "change_order_change_reason": {
          "$ref": "#\/definitions\/ChangeOrderChangeReason"
        },
        "change_event_status": {
          "$ref": "#\/definitions\/ChangeEventStatus"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "rfqs": {
          "type": "array",
          "description": "Return a list of all Request for Quotes (RFQs) to a specific change event in a project.\n**NOTE:** If you see `[]`, you might not have permissions to see RFQs for Change Events.\n",
          "items": {
            "$ref": "#\/definitions\/RFQWithoutChangeEvent"
          }
        }
      }
    },
    "ChangeEventWithoutRFQ": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 43453
        },
        "number": {
          "type": "integer",
          "description": "Number with alpha characters stripped out",
          "example": 14
        },
        "alphanumeric_number": {
          "type": "string",
          "description": "Number including alpha characters",
          "example": "A14"
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Bathtub replacement"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Replace the bathtub in the bathroom"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "Pending - Revised"
        },
        "project_id": {
          "type": "integer",
          "description": "Project ID",
          "example": 23446
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40Z"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40Z"
        },
        "event_type": {
          "type": "string",
          "description": "Event type",
          "example": "tbd",
          "enum": [
            "tbd",
            "allowance",
            "contingency",
            "owner_change",
            "transfer"
          ]
        },
        "event_scope": {
          "type": "string",
          "description": "Event scope",
          "example": "in_scope",
          "enum": [
            "tbd",
            "in_scope",
            "out_of_scope"
          ]
        },
        "rfi": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 34523
            },
            "title": {
              "type": "string",
              "description": "Title",
              "example": "Electrical panel obstructed"
            },
            "number": {
              "type": "integer",
              "description": "Number",
              "example": 3
            },
            "due_date": {
              "type": "string",
              "format": "date-time",
              "description": "Due date",
              "example": "2016-11-23T21:39:40.000Z"
            },
            "status": {
              "type": "string",
              "description": "Status",
              "example": "draft"
            }
          }
        },
        "change_event_line_items": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ChangeEventLineItem"
          }
        },
        "change_order_change_reason": {
          "$ref": "#\/definitions\/ChangeOrderChangeReason"
        },
        "change_event_status": {
          "$ref": "#\/definitions\/ChangeEventStatus"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        }
      }
    },
    "ChangeEventLineItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 345236
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Add caulk to bathtub base"
        },
        "rom": {
          "type": "integer",
          "description": "Rough order of magnitude (ROM)",
          "example": 17705
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCode"
        },
        "line_item_type": {
          "$ref": "#\/definitions\/LineItemType"
        }
      }
    },
    "ChangeEventStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 29715
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Pending - Revised"
        },
        "mapped_to_status": {
          "type": "string",
          "description": "Internal status to which the Change Event Status maps",
          "example": "pending"
        },
        "show_in_select": {
          "type": "boolean",
          "description": "Whether Change Event is available for GUI selection",
          "example": true
        }
      }
    },
    "ChangeOrderChangeReason": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 3452
        },
        "company_id": {
          "type": "integer",
          "description": "Company ID",
          "example": 2342
        },
        "change_reason": {
          "type": "string",
          "description": "Reason for change",
          "example": "Allowance"
        }
      }
    },
    "ChangeOrderPackage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 239475
        },
        "contract_id": {
          "type": "integer",
          "description": "Contract ID",
          "example": 64545
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2016-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2016-10-27T21:39:40.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Additional Time & Materials for October"
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "description": "Due date",
          "example": "2016-10-23T00:00:00.000Z"
        },
        "erp_rejected": {
          "type": "boolean",
          "description": "ERP rejection status",
          "example": false
        },
        "erp_reviewable": {
          "type": "boolean",
          "description": "ERP reviewable status",
          "example": false
        },
        "executed": {
          "type": "boolean",
          "description": "Executed",
          "example": true
        },
        "grand_total": {
          "type": "string",
          "description": "Total including markup",
          "example": 23474
        },
        "invoiced_date": {
          "type": "string",
          "format": "date",
          "description": "Invoiced date",
          "example": "2016-10-26T00:00:00.000Z"
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "H-38"
        },
        "paid_date": {
          "type": "string",
          "format": "date-time",
          "description": "Paid date",
          "example": "2016-11-23T21:39:40.000Z"
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": 4
        },
        "private": {
          "type": "boolean",
          "description": "If true, visible to admins only; otherwise visible to those with access to the parent contract.",
          "example": true
        },
        "rejected_message": {
          "type": "string",
          "description": "A message to convey the reason for rejection in ERP",
          "example": "Already in ERP"
        },
        "review_notes": {
          "type": "string",
          "description": "Notes to assist the reviewer",
          "example": "Make sure Jon sees this before proceeding"
        },
        "reviewed_at": {
          "type": "string",
          "format": "date-time",
          "description": "Reviewed at",
          "example": "2016-10-24T15:42:33.000Z"
        },
        "revision": {
          "type": "integer",
          "description": "Revision number",
          "example": 1
        },
        "schedule_impact_amount": {
          "type": "integer",
          "description": "Schedule impact in days",
          "example": 5
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "draft",
          "enum": [
            "draft",
            "not_pricing",
            "pricing",
            "pending",
            "revised",
            "proceeding",
            "not_proceeding",
            "no_charge",
            "approved",
            "rejected",
            "void"
          ]
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Additional Time & Materials"
        },
        "type": {
          "type": "string",
          "description": "Type",
          "example": "PrimeContractChangeOrder",
          "enum": [
            "PrimeContractChangeOrder",
            "CommitmentContractChangeOrder",
            "ChangeOrderPackage"
          ]
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "example": "2016-10-26T21:43:40.000Z"
        },
        "creator": {
          "$ref": "#\/definitions\/User"
        },
        "designated_reviewer": {
          "$ref": "#\/definitions\/User"
        },
        "reviewer": {
          "$ref": "#\/definitions\/User"
        },
        "line_items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID",
                "example": 453927
              },
              "position": {
                "type": "integer",
                "description": "Position",
                "example": 3
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Extra materials"
              },
              "quantity": {
                "type": "number",
                "format": "float",
                "description": "Quantity",
                "example": 30
              },
              "uom": {
                "type": "string",
                "description": "Unit of measurement",
                "example": "lbs"
              },
              "total_amount": {
                "type": "number",
                "format": "float",
                "description": "Total amount",
                "example": 60
              },
              "cost_code_id": {
                "type": "integer",
                "description": "Cost Code ID",
                "example": 3282649
              },
              "unit_cost": {
                "type": "number",
                "format": "float",
                "description": "Unit cost",
                "example": 2
              },
              "cost_code": {
                "$ref": "#\/definitions\/CostCode"
              },
              "line_item_type": {
                "$ref": "#\/definitions\/LineItemType"
              }
            }
          }
        }
      }
    },
    "ChangeOrderPackageIndex": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "example": 239475
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Created at",
            "example": "2016-10-23T21:39:40Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Deleted at",
            "example": "2017-07-29T21:39:40.000Z"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Due date",
            "example": "2016-10-23"
          },
          "invoiced_date": {
            "type": "string",
            "format": "date",
            "description": "Invoiced date",
            "example": "2016-10-09"
          },
          "number": {
            "type": "string",
            "description": "Number",
            "example": "H-38"
          },
          "paid_date": {
            "type": "string",
            "format": "date",
            "description": "Paid date",
            "example": "2016-10-22"
          },
          "reviewed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Reviewed at",
            "example": "2016-10-24T15:42:33Z"
          },
          "status": {
            "type": "string",
            "description": "Status",
            "example": "draft",
            "enum": [
              "draft",
              "not_pricing",
              "pricing",
              "pending",
              "revised",
              "proceeding",
              "not_proceeding",
              "no_charge",
              "approved",
              "rejected",
              "void"
            ]
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Additional Time & Materials"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Updated at",
            "example": "2016-10-23T21:39:40Z"
          }
        }
      }
    },
    "ChangeOrderRequestBody": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description",
          "example": "<p>Freezer slab replacement<\/p>"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "description": "Due date",
          "example": "2016-11-23T21:39:40Z"
        },
        "grand_total": {
          "type": "number",
          "format": "float",
          "description": "Total including markup",
          "example": 34535
        },
        "invoiced_date": {
          "type": "string",
          "format": "date-time",
          "description": "Invoiced date",
          "example": "2017-08-22"
        },
        "origin_data": {
          "format": "string",
          "description": "Origin data",
          "example": "OD-2398273424"
        },
        "origin_id": {
          "format": "string",
          "description": "Origin ID",
          "example": "459247544"
        },
        "paid_date": {
          "type": "string",
          "format": "date-time",
          "description": "Paid date",
          "example": "2017-08-25"
        },
        "schedule_impact_amount": {
          "type": "integer",
          "description": "Schedule impact in days",
          "example": 2
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "draft",
          "enum": [
            "draft",
            "not_pricing",
            "pricing",
            "pending",
            "revised",
            "proceeding",
            "not_proceeding",
            "no_charge",
            "approved",
            "rejected",
            "void"
          ]
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Concrete freezer slab"
        }
      }
    },
    "ChangeOrderPackageSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 458661
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "due_date": {
          "type": "string",
          "format": "Date",
          "description": "Due date",
          "example": "2012-11-23"
        },
        "invoiced_date": {
          "type": "string",
          "format": "date",
          "description": "Invoiced date",
          "example": "2012-10-24"
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "002"
        },
        "paid_date": {
          "type": "string",
          "format": "date",
          "description": "Paid date",
          "example": "2012-11-21"
        },
        "reviewed_at": {
          "type": "string",
          "format": "date-time",
          "description": "Reviewed at",
          "example": "2012-11-23T21:39:40Z"
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "November Changes"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "approved",
          "enum": [
            "draft",
            "not_pricing",
            "pricing",
            "pending",
            "revised",
            "proceeding",
            "not_proceeding",
            "no_charge",
            "approved",
            "rejected",
            "void"
          ]
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-11-23T21:39:40Z"
        }
      }
    },
    "ChangeOrderRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 3284756
        },
        "change_order_package_id": {
          "type": "integer",
          "description": "Change Order Package ID",
          "example": 2372497
        },
        "contract_id": {
          "type": "integer",
          "description": "Contract ID",
          "example": 195735
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2016-10-23T21:39:40Z"
        },
        "creator": {
          "$ref": "#\/definitions\/User"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "<p>Freezer slab replacement<\/p>"
        },
        "designated_reviewer": {
          "$ref": "#\/definitions\/User"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "description": "Due date",
          "example": "2016-11-23T21:39:40Z"
        },
        "grand_total": {
          "type": "number",
          "format": "float",
          "description": "Total including markup",
          "example": 34535
        },
        "invoiced_date": {
          "type": "string",
          "format": "date-time",
          "description": "Invoiced date",
          "example": "2017-08-22"
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "B22"
        },
        "origin_data": {
          "type": "string",
          "description": "Origin data",
          "example": "OD-2398273424"
        },
        "origin_id": {
          "type": "string",
          "description": "Origin ID",
          "example": "459247544"
        },
        "paid_date": {
          "type": "string",
          "format": "date-time",
          "description": "Paid date",
          "example": "2017-08-25"
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": 4
        },
        "private": {
          "type": "boolean",
          "description": "If true, visible to admins only; otherwise visible to those with access to the parent contract.",
          "example": true
        },
        "review_notes": {
          "type": "string",
          "description": "Review notes",
          "example": "Make sure Jon reviews the package before proceeding."
        },
        "reviewed_at": {
          "type": "string",
          "format": "date-time",
          "description": "Reviewed at",
          "example": "2016-10-25T21:39:40Z"
        },
        "reviewer": {
          "$ref": "#\/definitions\/User"
        },
        "revision": {
          "type": "integer",
          "description": "Revision",
          "example": 3
        },
        "schedule_impact_amount": {
          "type": "integer",
          "description": "Schedule impact in days",
          "example": 2
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "draft",
          "enum": [
            "draft",
            "not_pricing",
            "pricing",
            "pending",
            "revised",
            "proceeding",
            "not_proceeding",
            "no_charge",
            "approved",
            "rejected",
            "void"
          ]
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Concrete freezer slab"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2016-10-25T21:39:40Z"
        }
      }
    },
    "ChangeOrderRequestIndex": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "example": 3284756
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Created at",
            "example": "2016-10-23T21:39:40Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Deleted at",
            "example": "2017-07-29T21:39:40.000Z"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Due date",
            "example": "2016-11-23T21:39:40Z"
          },
          "invoiced_date": {
            "type": "string",
            "format": "date",
            "description": "Invoiced date",
            "example": "2017-08-22"
          },
          "number": {
            "type": "string",
            "description": "Number",
            "example": "B22"
          },
          "paid_date": {
            "type": "string",
            "format": "date",
            "description": "Paid date",
            "example": "2017-08-25"
          },
          "reviewed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Reviewed at",
            "example": "2016-10-25T21:39:40Z"
          },
          "status": {
            "type": "string",
            "description": "Status",
            "example": "draft",
            "enum": [
              "draft",
              "not_pricing",
              "pricing",
              "pending",
              "revised",
              "proceeding",
              "not_proceeding",
              "no_charge",
              "approved",
              "rejected",
              "void"
            ]
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Concrete freezer slab"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Updated at",
            "example": "2016-10-25T21:39:40Z"
          }
        }
      }
    },
    "PotentialChangeOrderBody": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Freezer slab replacement"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "description": "Due date",
          "example": "2017-08-19T21:39:40.000Z"
        },
        "grand_total": {
          "type": "number",
          "format": "float",
          "description": "Total including markup",
          "example": 37593
        },
        "invoiced_date": {
          "type": "string",
          "format": "date-time",
          "description": "Invoiced",
          "example": true
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "C34"
        },
        "origin_data": {
          "type": "string",
          "description": "Origin data",
          "example": "OD-2398273424"
        },
        "origin_id": {
          "type": "string",
          "description": "Origin ID",
          "example": "459247544"
        },
        "paid_date": {
          "type": "string",
          "format": "date-time",
          "description": "Paid date",
          "example": "2017-08-18T00:00:00.000Z"
        },
        "schedule_impact_amount": {
          "type": "integer",
          "description": "Schedule impact in days",
          "example": 2
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "draft",
          "enum": [
            "draft",
            "not_pricing",
            "pricing",
            "pending",
            "revised",
            "proceeding",
            "not_proceeding",
            "no_charge",
            "approved",
            "rejected",
            "void"
          ]
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Concrete freezer slab"
        }
      }
    },
    "ChangeOrderRequestSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/ChangeOrderRequest"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "PotentialChangeOrderIndex": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "example": 2843048
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Created at",
            "example": "2017-08-14T21:39:40.000Z"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Due date",
            "example": "2017-08-19T21:39:40.000Z"
          },
          "invoiced_date": {
            "type": "string",
            "format": "date",
            "description": "Invoiced",
            "example": true
          },
          "number": {
            "type": "string",
            "description": "Number",
            "example": "C34"
          },
          "paid_date": {
            "type": "string",
            "format": "date",
            "description": "Paid date",
            "example": "2017-08-18T00:00:00.000Z"
          },
          "reviewed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Reviewed at",
            "example": "2017-08-19T21:39:40.000Z"
          },
          "status": {
            "type": "string",
            "description": "Status",
            "example": "draft",
            "enum": [
              "draft",
              "not_pricing",
              "pricing",
              "pending",
              "revised",
              "proceeding",
              "not_proceeding",
              "no_charge",
              "approved",
              "rejected",
              "void"
            ]
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Concrete freezer slab"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Updated at",
            "example": "2017-08-16T21:39:40.000Z"
          }
        }
      }
    },
    "PotentialChangeOrderSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Potential change order id",
          "example": 570623
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Potential change order created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2012-11-24T21:39:40.000Z"
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "description": "Potential change order due date",
          "example": "2012-11-23"
        },
        "invoiced_date": {
          "type": "string",
          "format": "date",
          "description": "Potential change order invoiced date",
          "example": "2012-10-24"
        },
        "number": {
          "type": "string",
          "description": "Potential change order number",
          "example": "004"
        },
        "paid_date": {
          "type": "string",
          "format": "date",
          "description": "Potential change order paid date",
          "example": "2012-11-21"
        },
        "reviewed_at": {
          "type": "string",
          "format": "date-time",
          "description": "Potential change order reviewed at",
          "example": "2012-10-23T21:44:40.000Z"
        },
        "title": {
          "type": "string",
          "description": "Potential change order title",
          "example": "Field Bulletin #3 - Steel staircase on roof"
        },
        "status": {
          "type": "string",
          "description": "Potential change order status",
          "example": "approved",
          "enum": [
            "draft",
            "not_pricing",
            "pricing",
            "pending",
            "revised",
            "proceeding",
            "not_proceeding",
            "no_charge",
            "approved",
            "rejected",
            "void"
          ]
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Potential change order updated at",
          "example": "2012-11-23T21:39:40.000Z"
        }
      }
    },
    "PotentialChangeOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 2843048
        },
        "accounting_method": {
          "type": "string",
          "description": "Accounting method",
          "example": "unit",
          "enum": [
            "amount",
            "unit"
          ]
        },
        "change_order_change_reason_id": {
          "type": "integer",
          "description": "Change Reason ID",
          "example": 847264
        },
        "change_order_request_id": {
          "type": "integer",
          "description": "Change Order Request ID",
          "example": 283764
        },
        "contract_id": {
          "type": "integer",
          "description": "Contract ID",
          "example": 304485
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCode"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2017-08-14T21:39:40.000Z"
        },
        "creator": {
          "$ref": "#\/definitions\/User"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-11-10T21:39:40.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Freezer slab replacement"
        },
        "designated_reviewer": {
          "$ref": "#\/definitions\/User"
        },
        "due_date": {
          "type": "string",
          "format": "date-time",
          "description": "Due date",
          "example": "2017-08-19T21:39:40.000Z"
        },
        "field_change": {
          "type": "boolean",
          "description": "Field change",
          "example": true
        },
        "grand_total": {
          "type": "number",
          "format": "float",
          "description": "Total including markup",
          "example": 37593
        },
        "hidden": {
          "type": "boolean",
          "description": "Hidden",
          "example": false
        },
        "invoiced": {
          "type": "boolean",
          "description": "Invoiced",
          "example": true
        },
        "invoiced_date": {
          "type": "string",
          "format": "date",
          "description": "Invoiced date",
          "example": "2017-08-18T00:00:00.000Z"
        },
        "line_items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Line Item ID",
                "example": 238473
              },
              "position": {
                "type": "integer",
                "description": "Postion",
                "example": 3
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Concrete slab"
              },
              "quantity": {
                "type": "number",
                "format": "float",
                "description": "Quantity",
                "example": 2000
              },
              "uom": {
                "type": "string",
                "description": "Unit of measurement",
                "example": "lbs"
              },
              "total_amount": {
                "type": "number",
                "format": "float",
                "description": "Total amount",
                "example": 100
              },
              "cost_code_id": {
                "type": "integer",
                "description": "Cost Code ID",
                "example": 383762
              },
              "unit_cost": {
                "type": "number",
                "format": "float",
                "description": "Unit cost",
                "example": 0.05
              },
              "cost_code": {
                "$ref": "#\/definitions\/CostCode"
              },
              "line_item_type": {
                "$ref": "#\/definitions\/LineItemType"
              }
            }
          }
        },
        "line_items_extended_total": {
          "type": "number",
          "format": "float",
          "description": "Line items extended total",
          "example": 100
        },
        "line_items_total": {
          "type": "number",
          "format": "float",
          "description": "Line items total",
          "example": 100
        },
        "location_id": {
          "type": "integer",
          "description": "Location ID",
          "example": 438264
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "C34"
        },
        "origin_data": {
          "type": "string",
          "description": "Origin data",
          "example": "OD-2398273424"
        },
        "origin_id": {
          "type": "string",
          "description": "Origin ID",
          "example": "459247544"
        },
        "paid": {
          "type": "boolean",
          "description": "Paid",
          "example": true
        },
        "paid_date": {
          "type": "string",
          "format": "date",
          "description": "Paid date",
          "example": "2017-08-18T00:00:00.000Z"
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": 3
        },
        "prime_potential_change_order_id": {
          "type": "integer",
          "description": "Prime Potential Change Order ID",
          "example": 4048378
        },
        "private": {
          "type": "boolean",
          "description": "If true, visible to admins only; otherwise visible to those with access to the parent contract.",
          "example": true
        },
        "reason": {
          "type": "string",
          "description": "Reason",
          "example": "Owner Request"
        },
        "received_from": {
          "$ref": "#\/definitions\/User"
        },
        "reference": {
          "type": "string",
          "description": "Reference",
          "example": "CE #23"
        },
        "request_for_quote_id": {
          "type": "integer",
          "description": "RFQ ID",
          "example": 4336438
        },
        "review_notes": {
          "type": "string",
          "description": "Review notes",
          "example": "Make sure Jon reviews the package before proceeding."
        },
        "reviewed_at": {
          "type": "string",
          "format": "date-time",
          "description": "Reviewed at",
          "example": "2017-08-20T21:39:40.000Z"
        },
        "reviewer": {
          "$ref": "#\/definitions\/User"
        },
        "revision": {
          "type": "integer",
          "description": "Revision",
          "example": 4
        },
        "schedule_impact_amount": {
          "type": "integer",
          "description": "Schedule impact in days",
          "example": 2
        },
        "scope_of_work": {
          "type": "string",
          "description": "Scope of work",
          "example": "See contract inclusions"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "draft",
          "enum": [
            "draft",
            "not_pricing",
            "pricing",
            "pending",
            "revised",
            "proceeding",
            "not_proceeding",
            "no_charge",
            "approved",
            "rejected",
            "void"
          ]
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Concrete freezer slab"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2017-08-16T21:39:40.000Z"
        },
        "vendor": {
          "$ref": "#\/definitions\/Vendor"
        },
        "void": {
          "type": "boolean",
          "description": "Void",
          "example": true
        }
      }
    },
    "PotentialChangeOrderSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/PotentialChangeOrderIndex"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "ChangeType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 234973
        },
        "abbreviation": {
          "type": "string",
          "description": "Abbreviation",
          "example": "TR"
        },
        "company_id": {
          "type": "integer",
          "description": "Company ID",
          "example": 355282
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Transfer"
        }
      }
    },
    "CostCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 12345
        },
        "biller": {
          "type": "string",
          "description": "Biller",
          "example": "Campus"
        },
        "biller_id": {
          "type": "integer",
          "description": "Biller ID",
          "example": 12345
        },
        "biller_type": {
          "type": "string",
          "enum": [
            "Project",
            "SubJob"
          ],
          "description": "Biller type",
          "example": "Project"
        },
        "code": {
          "type": "string",
          "description": "Cost code, not including parent prefix",
          "example": "300"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2015-05-15T00:00:00.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "full_code": {
          "type": "string",
          "description": "Full Cost code, including parent prefixes",
          "example": "02-300"
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Earthwork"
        },
        "origin_data": {
          "type": "string",
          "description": "Cost Code third party data",
          "example": "OD-129947"
        },
        "origin_id": {
          "type": "string",
          "description": "Cost Code third party id",
          "example": "9874484"
        },
        "parent": {
          "type": "object",
          "description": "Parent",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Parent ID",
              "example": 2345
            }
          }
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": 1
        },
        "sortable_code": {
          "type": "string",
          "description": "Sortable code (this property is deprecated - see full_code)",
          "example": "02-300"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2015-05-15T00:00:00.000Z"
        },
        "line_item_types": {
          "type": "array",
          "description": "Line Item Types",
          "items": {
            "$ref": "#\/definitions\/LineItemType"
          }
        }
      }
    },
    "CostCodeSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/CostCode"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "LineItem": {
      "type": "object",
      "description": "Line Item",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Line Item id",
          "example": 4896147
        },
        "amount": {
          "type": "string",
          "description": "Line Item amount",
          "example": "1000.0"
        },
        "company": {
          "type": "object",
          "description": "Company",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 163215
            },
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Procore Tech"
            }
          }
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCode"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at date and time",
          "example": "2016-08-01T23:33:54Z"
        },
        "description": {
          "type": "string",
          "description": "Line Item description",
          "example": "Cleanup"
        },
        "extended_type": {
          "type": "string",
          "description": "Line Item extended type",
          "enum": [
            "manual",
            "calculated"
          ],
          "example": "calculated"
        },
        "holder": {
          "type": "object",
          "description": "Holder",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 233245
            },
            "holder_type": {
              "type": "string",
              "description": "Holder type",
              "example": "WorkOrderContract"
            }
          }
        },
        "line_item_type": {
          "$ref": "#\/definitions\/LineItemType"
        },
        "origin_data": {
          "type": "string",
          "description": "Line Item third party data",
          "example": "OD-39823232"
        },
        "origin_id": {
          "type": "string",
          "description": "Line Item third party id",
          "example": 239233
        },
        "position": {
          "type": "integer",
          "description": "Line Item position",
          "example": 1
        },
        "project": {
          "type": "object",
          "description": "Project",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 123456
            },
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Children's Hospital"
            }
          }
        },
        "quantity": {
          "type": "number",
          "format": "float",
          "description": "Line Item quantity",
          "example": "10.0"
        },
        "total_amount": {
          "type": "number",
          "format": "float",
          "description": "Line Item total amount",
          "example": "1000.0"
        },
        "unit_cost": {
          "type": "number",
          "format": "float",
          "description": "Line Item unit cost",
          "example": "100.0"
        },
        "uom": {
          "type": "string",
          "description": "Line Item units of measure",
          "example": "Lbs"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at date and time",
          "example": "2016-09-01T21:33:54Z"
        }
      }
    },
    "LineItemType": {
      "type": "object",
      "title": "LineItemType",
      "description": "Line Item Type",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Line Item Type ID",
          "example": 12345
        },
        "name": {
          "type": "string",
          "description": "Line Item Type name",
          "example": "Equipment"
        },
        "code": {
          "type": "string",
          "description": "Code",
          "example": "LB"
        },
        "base_type": {
          "type": "string",
          "enum": [
            "equipment",
            "materials",
            "commitment",
            "owner_cost",
            "professional_services",
            "other"
          ],
          "description": "Base type",
          "example": "materials"
        }
      }
    },
    "VendorCompact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1120327
        },
        "name": {
          "type": "string",
          "example": "1st Choice Glass Inc."
        }
      }
    },
    "RequestedChange": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Requested change id",
          "example": 333713
        },
        "requested_by": {
          "type": "string",
          "description": "Requested change requested by",
          "example": "Bob Dole on Nov. 24"
        },
        "change_requested": {
          "type": "string",
          "description": "Requested change",
          "example": "<ul><li>Other change: why7<\/li><\/ul>"
        },
        "reason": {
          "type": "string",
          "description": "Requested change reason",
          "example": "<p>this is a description<\/p>"
        },
        "status": {
          "type": "string",
          "description": "Requested change status",
          "enum": [
            "Approved",
            "Rejected",
            "Pending"
          ],
          "example": "Pending"
        },
        "notes": {
          "type": "string",
          "description": "Requested change notes",
          "example": "Notes"
        }
      }
    },
    "Submittal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 610071
        },
        "number": {
          "type": "string",
          "example": "118"
        },
        "revision": {
          "type": "string",
          "example": "0"
        },
        "title": {
          "type": "string",
          "example": "Smiths - Teardown & Assembly Bldg"
        }
      }
    },
    "SubmittalNormal": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "approvers": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/SubmittalApprover"
              }
            },
            "attachments_count": {
              "type": "integer",
              "example": 2
            },
            "ball_in_court": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            },
            "created_by": {
              "$ref": "#\/definitions\/User"
            },
            "distributed_at": {
              "type": "string",
              "format": "date-time",
              "example": "2012-10-23T21:39:40Z"
            },
            "due_date": {
              "type": "string",
              "format": "date",
              "example": "2014-07-22"
            },
            "issue_date": {
              "type": "string",
              "format": "date",
              "example": "2014-06-02"
            },
            "private": {
              "type": "boolean",
              "example": false
            },
            "received_date": {
              "type": "string",
              "format": "date",
              "example": "2014-06-09"
            },
            "received_from": {
              "$ref": "#\/definitions\/User"
            },
            "responsible_contractor": {
              "$ref": "#\/definitions\/VendorCompact"
            },
            "specification_section": {
              "$ref": "#\/definitions\/SpecificationSection"
            },
            "submit_by": {
              "type": "string",
              "format": "date",
              "example": "2014-06-11"
            },
            "submittal_log_status": {
              "$ref": "#\/definitions\/SubmittalStatus"
            },
            "type": {
              "$ref": "#\/definitions\/SubmittalType"
            }
          }
        },
        {
          "$ref": "#\/definitions\/Submittal"
        }
      ]
    },
    "SubmittalExtended": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "actual_delivery_date": {
              "type": "string",
              "format": "date",
              "example": "2015-03-14"
            },
            "attachments": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/Attachment"
              }
            },
            "confirmed_delivery_date": {
              "type": "string",
              "format": "date",
              "example": "2012-01-01"
            },
            "cost_code": {
              "$ref": "#\/definitions\/CostCodeCompact"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "example": "2012-10-23T21:39:40Z"
            },
            "current_revision": {
              "type": "boolean",
              "example": true
            },
            "custom_textarea_1": {
              "type": "string"
            },
            "custom_textfield_1": {
              "type": "string"
            },
            "deleted_at": {
              "type": "string",
              "format": "date-time",
              "example": "2012-10-23T21:39:40Z",
              "description": "*This field only displays on deleted items"
            },
            "description": {
              "type": "string",
              "example": "Thermal Insulation submittal"
            },
            "design_team_review_time": {
              "type": "integer",
              "example": 7
            },
            "distribution_members": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            },
            "internal_review_time": {
              "type": "integer",
              "example": 14
            },
            "lead_time": {
              "type": "integer",
              "example": 5
            },
            "location": {
              "$ref": "#\/definitions\/Location"
            },
            "required_on_site_date": {
              "type": "string",
              "format": "date",
              "example": "2016-11-28"
            },
            "scheduled_task": {
              "$ref": "#\/definitions\/Task"
            },
            "submittal_manager": {
              "$ref": "#\/definitions\/User"
            },
            "submittal_package": {
              "$ref": "#\/definitions\/SubmittalPackageNormal"
            }
          }
        },
        {
          "$ref": "#\/definitions\/SubmittalNormal"
        }
      ]
    },
    "SubmittalApprover": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 161789
        },
        "approver_type": {
          "type": "string",
          "description": "Role of Approver",
          "example": "Submitter"
        },
        "response_id": {
          "type": "integer",
          "description": "Response ID",
          "example": 14813
        },
        "returned_date": {
          "type": "string",
          "description": "Returned Date",
          "format": "date",
          "example": "2016-04-05"
        },
        "sent_date": {
          "type": "string",
          "description": "Sent Date",
          "format": "date",
          "example": "2014-05-04"
        },
        "user": {
          "$ref": "#\/definitions\/User"
        }
      }
    },
    "SubmittalUndeletedIDs": {
      "type": "object",
      "properties": {
        "undeleted_ids": {
          "type": "array",
          "description": "Submittal IDs",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "SpecificationSection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 161072
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "08560"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Vinyl Windows"
        },
        "label": {
          "type": "string",
          "description": "Label",
          "example": "08560 Vinyl Windows"
        },
        "current_revision_id": {
          "type": "integer",
          "description": "Current Revision ID",
          "example": 145092
        }
      }
    },
    "SpecificationSectionDivision": {
      "type": "object",
      "title": "SpecificationSectionDivision",
      "description": "Represents a construction division, which is used to group specification sections. Each SpecificationSectionDivision can contain many SpecificationSections.",
      "properties": {
        "id": {
          "type": "integer",
          "example": 209260
        },
        "number": {
          "type": "string",
          "example": "15"
        },
        "description": {
          "type": "string",
          "example": "Mechanical"
        },
        "url": {
          "type": "string",
          "description": "Address of a PDF file containing the PDFs for all of the SpecificationSections in this division, concatenated into one."
        }
      }
    },
    "SpecificationSectionRevision": {
      "type": "object",
      "title": "SpecificationSectionRevision",
      "description": "A version of a Specification Section. Each time a Specification Section is revised, the newly uploaded version is a new revision of that section.",
      "properties": {
        "id": {
          "type": "integer",
          "example": 209260
        },
        "number": {
          "type": "string",
          "example": "15",
          "description": "The number of this revision's SpecificationSection"
        },
        "description": {
          "type": "string",
          "example": "Mechanical",
          "description": "The description of this revision's SpecificationSection"
        },
        "url": {
          "type": "string",
          "description": "Address of SpecificationRevision PDF. This can be blank if the Specification Section was created manually without an upload, and no revisions have been uploaded yet."
        },
        "revision": {
          "type": "string",
          "description": "The revision number"
        },
        "issued_date": {
          "type": "string",
          "format": "date",
          "description": "The date when the SpecificationRevision was issued by the architect"
        },
        "received_date": {
          "type": "string",
          "format": "date",
          "description": "The date when the SpecificationRevision was received by the project"
        }
      }
    },
    "StandardCostCode": {
      "title": "Standard Cost Code",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 12345
        },
        "standard_cost_code_list_id": {
          "type": "integer",
          "description": "Standard Cost Code List ID",
          "example": 12345
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent ID",
          "example": 12345
        },
        "code": {
          "type": "string",
          "description": "Cost code, not including parent prefix",
          "example": "300"
        },
        "full_code": {
          "type": "string",
          "description": "Cost code, including parent prefixes",
          "example": "02-300"
        },
        "name": {
          "type": "string",
          "description": "Description",
          "example": "Site Work"
        }
      }
    },
    "SubmittalStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 183101
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "In Review"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "example": "Open"
        }
      }
    },
    "SubmittalType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": -1
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Field Measurement"
        }
      }
    },
    "SubmittalPackage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 161072
        },
        "number": {
          "type": "string",
          "example": "TBZ-44500"
        },
        "title": {
          "type": "string",
          "example": "Windows"
        }
      }
    },
    "SubmittalPackageNormal": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "attachments_count": {
              "type": "integer",
              "example": 2
            }
          }
        },
        {
          "$ref": "#\/definitions\/SubmittalPackage"
        }
      ]
    },
    "StandardCostCodeList": {
      "title": "Standard Cost Code List",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 12345
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Client X Cost Codes"
        }
      }
    },
    "SubmittalLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 610071
        },
        "title": {
          "type": "string",
          "example": "Smiths - Teardown & Assembly Bldg"
        },
        "number": {
          "type": "string",
          "example": "118"
        },
        "revision": {
          "type": "string",
          "example": "0"
        },
        "private": {
          "type": "boolean",
          "example": false
        },
        "received_date": {
          "type": "string",
          "format": "date",
          "example": "2014-06-09"
        },
        "issue_date": {
          "type": "string",
          "format": "date",
          "example": "2014-06-02"
        },
        "submit_by": {
          "type": "string",
          "format": "date",
          "example": "2014-06-11"
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "example": "2014-07-22"
        },
        "type": {
          "type": "string",
          "example": "Product Information"
        },
        "description": {
          "type": "string",
          "example": "For your review and approval. Paul Revere 555-555-5555"
        },
        "status": {
          "type": "string",
          "example": "Open"
        },
        "closed": {
          "type": "boolean",
          "example": false
        },
        "created_by": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Paul Revere"
            },
            "login": {
              "type": "string",
              "format": "email",
              "example": "paulrevere@example.com"
            },
            "login_id": {
              "type": "integer",
              "example": 39023
            }
          }
        },
        "received_from": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Frank Sinatra"
            },
            "login": {
              "type": "string",
              "format": "email",
              "example": "frankie@example.com"
            },
            "login_id": {
              "type": "integer",
              "example": 88402
            }
          }
        },
        "approvers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "login_information": {
                "$ref": "#\/definitions\/User"
              },
              "id": {
                "type": "integer",
                "example": 939302
              },
              "response": {
                "type": "string",
                "example": "Approved as Noted"
              },
              "sent_date": {
                "type": "string",
                "format": "date",
                "example": "2014-05-10"
              },
              "returned_date": {
                "type": "string",
                "format": "date",
                "example": "2014-05-12"
              },
              "due_date": {
                "type": "string",
                "format": "date",
                "example": "2014-05-12"
              },
              "comment": {
                "type": "string",
                "example": "See attached drawing for wall dimensions."
              },
              "distributed": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "example": 153532
                }
              },
              "attachments": {
                "type": "array",
                "items": {
                  "$ref": "#\/definitions\/Attachment"
                }
              }
            }
          }
        },
        "distribution_members": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/User"
          }
        },
        "ball_in_court": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/User"
          }
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "specification_section": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 212630
            },
            "description": {
              "type": "string",
              "example": "Metal Fabrications"
            },
            "section": {
              "type": "string",
              "example": "55000"
            }
          }
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "distribution_info": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 122765
            },
            "message": {
              "type": "string",
              "example": ""
            },
            "distributed_date": {
              "type": "string",
              "format": "date-time",
              "example": "2014-04-20T20:08:09.000Z"
            },
            "distributed_by": {
              "$ref": "#\/definitions\/User"
            },
            "distributed_to": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            },
            "final_attachments": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/Attachment"
              }
            }
          }
        },
        "submittal_package": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 90210
            },
            "title": {
              "type": "string",
              "example": "Somebody's Package"
            },
            "created_by": {
              "$ref": "#\/definitions\/User"
            },
            "description": {
              "type": "string",
              "example": ""
            },
            "attachments": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/Attachment"
              }
            }
          }
        }
      }
    },
    "SubmittalLogIndex": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "id",
          "number",
          "status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 252579
          },
          "title": {
            "type": "string",
            "example": "Steel D8 Beam"
          },
          "number": {
            "type": "string",
            "example": "49"
          },
          "revision": {
            "type": "string",
            "example": "0"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "example": "2013-04-15"
          },
          "attachment_count": {
            "type": "integer",
            "example": 1
          },
          "status": {
            "type": "string",
            "example": "Closed"
          },
          "closed": {
            "type": "boolean",
            "example": true
          },
          "specification_section": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 212630
              },
              "description": {
                "type": "string",
                "example": "Metal Fabrications"
              },
              "section": {
                "type": "string",
                "example": "55000"
              }
            }
          },
          "package": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": 90210
              },
              "title": {
                "type": "string",
                "example": "Somebody's Package"
              }
            }
          },
          "ball_in_court": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 683125
                },
                "name": {
                  "type": "string",
                  "example": "George Washington"
                },
                "login": {
                  "type": "string",
                  "format": "email",
                  "example": "georgewashington@example.com"
                }
              }
            }
          },
          "responses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "response": {
                  "type": "string",
                  "example": "Closed Submittal Response"
                }
              }
            }
          },
          "location": {
            "$ref": "#\/definitions\/Location"
          }
        }
      }
    },
    "Location": {
      "type": "object",
      "title": "Location",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Location ID",
          "example": 15504
        },
        "name": {
          "type": "string",
          "description": "Location name",
          "example": "1space>1 space"
        },
        "node_name": {
          "type": "string",
          "description": "Location node name",
          "example": "1 space"
        },
        "parent_id": {
          "type": "integer",
          "description": "Location parent id",
          "example": 788866
        }
      }
    },
    "CostCodeCompact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 12345
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Earthwork"
        }
      }
    },
    "Equipment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 15504
        },
        "project_id": {
          "type": "integer",
          "example": 14406
        },
        "position": {
          "type": "integer",
          "example": 18300
        },
        "name": {
          "type": "string",
          "example": "asdfsd"
        }
      }
    },
    "EquipmentIndex": {
      "type": "object",
      "title": "Equipment",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Equipment ID",
          "example": 15504
        },
        "name": {
          "type": "string",
          "description": "Equipment name",
          "example": "Jackhammer"
        }
      }
    },
    "Contact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1128828
        },
        "login_information_id": {
          "type": "integer",
          "example": ""
        },
        "business_phone": {
          "type": "string",
          "example": "(503)744-3200"
        },
        "mobile_phone": {
          "type": "string",
          "example": ""
        },
        "email": {
          "type": "string",
          "example": "john.doe@procore.com"
        },
        "name": {
          "type": "string",
          "example": "A-1 Electric Company"
        },
        "vendor_name": {
          "type": "string",
          "example": ""
        },
        "business_phone_extension": {
          "type": "string",
          "example": ""
        }
      }
    },
    "Trade": {
      "type": "object",
      "title": "Trade",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Trade ID"
        },
        "name": {
          "type": "string",
          "description": "Trade name"
        }
      },
      "example": {
        "id": 100884,
        "name": "Hello"
      }
    },
    "ObservationItemIndex": {
      "title": "Observation Item",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Observation Item ID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "number": {
          "type": "string",
          "description": "Observation Item number"
        },
        "name": {
          "type": "string",
          "description": "Observation Item name"
        },
        "description": {
          "type": "string",
          "description": "Observation Item description"
        },
        "status": {
          "type": "string",
          "description": "Observation Item status",
          "enum": [
            "initiated",
            "ready_for_review",
            "not_accepted",
            "closed"
          ]
        },
        "priority": {
          "type": "integer",
          "description": "Observation Item priority",
          "enum": [
            "Low",
            "Medium",
            "High",
            "Urgent"
          ]
        },
        "date_notified": {
          "type": "string",
          "format": "date",
          "description": "Date that the Observation Item Assignee was notified"
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "description": "Date that the Observation Item is due by"
        },
        "personal": {
          "type": "boolean",
          "description": "Observation Item privacy status"
        },
        "assignee": {
          "title": "Observation Item Assignee",
          "type": "object",
          "description": "User assigned to the Observation Item",
          "properties": {
            "id": {
              "type": "integer",
              "description": "User ID"
            },
            "name": {
              "type": "string",
              "description": "User name"
            }
          }
        },
        "created_by": {
          "title": "Observation Item Creator",
          "type": "object",
          "description": "User that created the Observation Item",
          "properties": {
            "id": {
              "type": "integer",
              "description": "User ID"
            },
            "name": {
              "type": "string",
              "description": "User name"
            }
          }
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "trade": {
          "$ref": "#\/definitions\/Trade"
        },
        "type": {
          "$ref": "#\/definitions\/ObservationType"
        }
      }
    },
    "ObservationItem": {
      "title": "Observation Item",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Observation Item ID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Observation Item deleted at date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "number": {
          "type": "string",
          "description": "Observation Item number"
        },
        "name": {
          "type": "string",
          "description": "Observation Item name"
        },
        "description": {
          "type": "string",
          "description": "Observation Item description"
        },
        "status": {
          "type": "string",
          "description": "Observation Item status",
          "enum": [
            "initiated",
            "ready_for_review",
            "not_accepted",
            "closed"
          ]
        },
        "priority": {
          "type": "string",
          "description": "Observation Item priority",
          "enum": [
            "Low",
            "Medium",
            "High",
            "Urgent"
          ]
        },
        "date_notified": {
          "type": "string",
          "format": "date",
          "description": "Observation Item notified date"
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "description": "Observation Item due date"
        },
        "personal": {
          "type": "boolean",
          "description": "Observation Item privacy status"
        },
        "drawing_revisions": {
          "type": "array",
          "description": "Array of Drawing Revision IDs associated to the Observation Item",
          "items": {
            "type": "integer"
          }
        },
        "checklist_item": {
          "title": "Checklist Item",
          "type": "object",
          "description": "Observation Item checklist item",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Checklist (Inspection) Item ID"
            }
          }
        },
        "checklist_list": {
          "title": "Checklist List",
          "type": "object",
          "description": "Inspection (Checklist List) that the Observation Item was created from",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Inspection (Checklist List) ID"
            }
          }
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "assignee": {
          "title": "Observation Item Assignee",
          "type": "object",
          "description": "User assigned to the Observation Item",
          "properties": {
            "id": {
              "type": "integer",
              "description": "User ID"
            },
            "name": {
              "type": "string",
              "description": "User Name"
            }
          }
        },
        "created_by": {
          "title": "Observation Item Creator",
          "type": "object",
          "description": "User that created the Observation Item",
          "properties": {
            "id": {
              "type": "integer",
              "description": "User ID"
            },
            "name": {
              "type": "string",
              "description": "User Name"
            }
          }
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "trade": {
          "$ref": "#\/definitions\/Trade"
        },
        "type": {
          "$ref": "#\/definitions\/ObservationType"
        }
      }
    },
    "ObservationItemResponseLog": {
      "title": "Observation Item Response Log",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Response Log ID"
        },
        "item_id": {
          "type": "integer",
          "description": "Observation Item ID"
        },
        "status": {
          "type": "string",
          "description": "Response Log status",
          "enum": [
            "Initiated",
            "Ready For Review",
            "Not Accepted",
            "Closed"
          ]
        },
        "comment": {
          "type": "string",
          "description": "Response Log comment"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time the Response Log was created"
        },
        "attachments": {
          "type": "array",
          "description": "Response Log attachments",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "created_by": {
          "title": "Created By",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "User ID"
            },
            "name": {
              "type": "string",
              "description": "User name"
            }
          }
        }
      }
    },
    "ObservationType": {
      "title": "Observation Type",
      "type": "object",
      "required": [
        "id",
        "category",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Observation Type ID",
          "example": 9
        },
        "category": {
          "type": "string",
          "description": "Observation Type category",
          "example": "Commissioning",
          "enum": [
            "Quality",
            "Safety",
            "Comissioning",
            "Warranty",
            "Work To Complete"
          ]
        },
        "name": {
          "type": "string",
          "description": "Type name",
          "example": "Commissioning"
        }
      }
    },
    "Office": {
      "type": "object",
      "title": "Office",
      "description": "Office",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Office id",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "Office name",
          "example": "Main Office"
        },
        "address": {
          "type": "string",
          "description": "Office address",
          "example": "100 Construction Lane"
        },
        "city": {
          "type": "string",
          "description": "Office city",
          "example": "Santa Barbara"
        },
        "state_code": {
          "type": "string",
          "description": "Office state code",
          "example": "CA"
        },
        "country_code": {
          "type": "string",
          "description": "Office country code",
          "example": "US"
        },
        "zip": {
          "type": "string",
          "description": "Office zip",
          "example": "93101"
        },
        "phone": {
          "type": "string",
          "description": "Office phone",
          "example": "8059831234"
        },
        "fax": {
          "type": "string",
          "description": "Office fax",
          "example": "8059834321"
        }
      }
    },
    "Inspector": {
      "title": "Inspector",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 160586
        },
        "login": {
          "type": "string",
          "description": "Email",
          "example": "example@example.com"
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Gino Standard"
        },
        "company": {
          "type": "object",
          "description": "Company",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Company ID",
              "example": 163215
            },
            "name": {
              "type": "string",
              "description": "Company name",
              "example": "Procore Tech"
            }
          }
        }
      }
    },
    "ChecklistTemplate": {
      "title": "Checklist Template",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 142
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Window Inspection"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Checklist for windows"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of creation",
          "example": "2014-12-10T23:36:30.000Z"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of last update",
          "example": "2014-12-11T04:58:42.000Z"
        },
        "inspection_type": {
          "type": "object",
          "description": "Inspection Type",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 1
            },
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Safety"
            }
          }
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "trade": {
          "$ref": "#\/definitions\/Trade"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "attachments": {
          "type": "array",
          "description": "Attachments",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "sections": {
          "type": "array",
          "description": "Checklist Sections",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID",
                "example": 21
              },
              "name": {
                "type": "string",
                "description": "Name",
                "example": "Section 1"
              },
              "position": {
                "type": "integer",
                "description": "Position",
                "example": 1
              },
              "items": {
                "type": "array",
                "description": "Checklist Items",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "ID",
                      "example": 2
                    },
                    "name": {
                      "type": "string",
                      "description": "Name",
                      "example": "Item 1"
                    },
                    "status": {
                      "type": "string",
                      "description": "Status",
                      "enum": [
                        true,
                        false,
                        "n\/a",
                        "none"
                      ],
                      "example": "n\/a"
                    },
                    "section_id": {
                      "type": "integer",
                      "description": "Checklist Section ID",
                      "example": 21
                    },
                    "position": {
                      "type": "string",
                      "description": "Position",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ChecklistIndex": {
      "title": "Checklist",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 1445
        },
        "list_template_id": {
          "type": "integer",
          "description": "Checklist Template ID",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Framing List"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Checking the framing"
        },
        "number": {
          "type": "integer",
          "description": "Number",
          "example": 1
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "Open",
            "Closed"
          ],
          "example": "Closed"
        },
        "inspection_date": {
          "type": "string",
          "format": "date",
          "description": "Date that the inspection was performed",
          "example": "2014-11-06"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of last update",
          "example": "2014-11-06T16:17:28Z"
        },
        "item_count": {
          "type": "integer",
          "description": "Checklist Item count",
          "example": 1
        },
        "yes_item_count": {
          "type": "integer",
          "description": "(Deprecated) Use `conforming_item_count`",
          "example": 1
        },
        "personal": {
          "type": "boolean",
          "description": "Checklist personal status",
          "example": true
        },
        "item_total": {
          "type": "integer",
          "description": "(Deprecated) Use `item_count`",
          "example": 1
        },
        "conforming_item_count": {
          "type": "integer",
          "description": "Count of Checklist Items with a status of `yes`",
          "example": 1
        },
        "deficient_item_count": {
          "type": "integer",
          "description": "Count of Checklist Items with a status of `no`",
          "example": 1
        },
        "na_item_count": {
          "type": "integer",
          "description": "Count of Checklist Items with a status of `n\/a`",
          "example": 0
        },
        "not_inspected_item_count": {
          "type": "integer",
          "description": "Count of Checklist Items that have not been inspected",
          "example": 0
        },
        "attachments": {
          "type": "array",
          "description": "Checklist attachments",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "specification_section": {
          "type": "object",
          "description": "Specification Section",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID"
            },
            "description": {
              "type": "string",
              "description": "Description"
            },
            "section": {
              "type": "string",
              "description": "Number"
            }
          }
        },
        "trade": {
          "$ref": "#\/definitions\/Trade"
        },
        "inspectors": {
          "type": "array",
          "description": "Users that will be performing the inspection",
          "items": {
            "$ref": "#\/definitions\/User"
          }
        },
        "responsible_contractor": {
          "type": "object",
          "description": "Vendor responsible for the work being inspected",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID"
            },
            "name": {
              "type": "string",
              "description": "Name"
            }
          }
        },
        "responsible_party": {
          "$ref": "#\/definitions\/User"
        }
      }
    },
    "Checklist": {
      "title": "Checklist",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 1445
        },
        "list_template_id": {
          "type": "integer",
          "description": "Checklist Template ID",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Framing List"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Checking the framing"
        },
        "number": {
          "type": "integer",
          "description": "Number",
          "example": 1
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "Open",
            "Closed"
          ],
          "example": "Closed"
        },
        "inspection_date": {
          "type": "string",
          "format": "date",
          "description": "Date that the inspection was performed",
          "example": "2014-11-06"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of last update",
          "example": "2014-11-06T16:17:28Z"
        },
        "item_count": {
          "type": "integer",
          "description": "Checklist Item count",
          "example": 1
        },
        "yes_item_count": {
          "type": "integer",
          "description": "Deprecated. Use `conforming_item_count`",
          "example": 1
        },
        "personal": {
          "type": "boolean",
          "description": "Privacy status",
          "example": true
        },
        "item_total": {
          "type": "integer",
          "description": "(Deprecated) Use `item_count`",
          "example": 1
        },
        "conforming_item_count": {
          "type": "integer",
          "description": "Count of Checklist Items with a status of `yes`",
          "example": 1
        },
        "deficient_item_count": {
          "type": "integer",
          "description": "Count of Checklist Items with a status of `no`",
          "example": 1
        },
        "na_item_count": {
          "type": "integer",
          "description": "Count of Checklist Items with a status of `n\/a`",
          "example": 0
        },
        "not_inspected_item_count": {
          "type": "integer",
          "description": "Count of Checklist Items that have not been inspected",
          "example": 0
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "specification_section": {
          "type": "object",
          "description": "Specification Section",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID"
            },
            "description": {
              "type": "string",
              "description": "Description"
            },
            "section": {
              "type": "string",
              "description": "Number"
            }
          }
        },
        "trade": {
          "$ref": "#\/definitions\/Trade"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "inspectors": {
          "type": "array",
          "description": "Checklist inspectors",
          "items": {
            "$ref": "#\/definitions\/User"
          }
        },
        "responsible_contractor": {
          "type": "object",
          "description": "Vendor responsible for the work being inspected",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID"
            },
            "name": {
              "type": "string",
              "description": "Name"
            }
          }
        },
        "responsible_party": {
          "$ref": "#\/definitions\/User"
        },
        "attachments": {
          "type": "array",
          "description": "Checklist Attachments",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "sections": {
          "type": "array",
          "description": "Checklist Sections",
          "items": {
            "$ref": "#\/definitions\/ChecklistSection"
          }
        }
      }
    },
    "ChecklistSection": {
      "title": "Checklist Section",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 21
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Section 1"
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": 1
        },
        "items": {
          "type": "array",
          "description": "Checklist Items",
          "items": {
            "$ref": "#\/definitions\/ChecklistSectionItem"
          }
        }
      }
    },
    "ChecklistSectionCompact": {
      "title": "Checklist Section",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 21
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Section 1"
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": 1
        },
        "list_id": {
          "type": "integer",
          "description": "Checklist ID. A Checklist Section will either have a `list_id` or `list_template_id`, but not both.",
          "example": 42
        },
        "not_applicable": {
          "type": "boolean",
          "description": "Not applicable status",
          "example": false
        }
      }
    },
    "ChecklistSectionItem": {
      "title": "Checklist Section Item",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 2
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Item 1"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            true,
            false,
            "n\/a",
            "none"
          ],
          "example": "n\/a"
        },
        "section_id": {
          "type": "integer",
          "description": "Checklist Section ID",
          "example": 21
        },
        "position": {
          "type": "string",
          "description": "Position",
          "example": 1
        },
        "observations": {
          "type": "array",
          "description": "Observations created from the Checklist Item",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of creation"
              },
              "number": {
                "type": "integer",
                "description": "Number"
              },
              "status": {
                "type": "string",
                "description": "Status"
              },
              "title": {
                "type": "string",
                "description": "Title"
              },
              "type": {
                "type": "object",
                "description": "Observation Type",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "ID"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name"
                  }
                }
              },
              "assignee": {
                "$ref": "#\/definitions\/User"
              },
              "created_by": {
                "$ref": "#\/definitions\/User"
              }
            }
          }
        },
        "attachment_histories": {
          "type": "array",
          "description": "Item attachment histories",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Attachment ID"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of creation"
              },
              "created_by": {
                "$ref": "#\/definitions\/User"
              },
              "attachment": {
                "$ref": "#\/definitions\/Attachment"
              }
            }
          }
        },
        "histories": {
          "type": "array",
          "description": "Item histories",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID"
              },
              "body": {
                "type": "string",
                "description": "Text describing the status change"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of creation"
              },
              "created_by": {
                "$ref": "#\/definitions\/User"
              }
            }
          }
        },
        "comments": {
          "type": "array",
          "description": "Item comments",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID"
              },
              "body": {
                "type": "string",
                "description": "Comment body"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of creation"
              },
              "created_by": {
                "$ref": "#\/definitions\/User"
              }
            }
          }
        }
      }
    },
    "ChecklistComment": {
      "title": "Checklist Comment",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "body": {
          "type": "string",
          "description": "Comment body"
        },
        "item_id": {
          "type": "integer",
          "description": "Checklist Item ID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of creation"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        }
      }
    },
    "MarkupAttachment": {
      "type": "object",
      "title": "MarkupAttachment",
      "description": "Markup Attachment",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Markup Attachment ID"
        },
        "item_id": {
          "type": "integer",
          "description": "Attached Item ID"
        },
        "type": {
          "type": "string",
          "description": "Attached Item type",
          "enum": [
            "Checklist::List",
            "Drawing",
            "DrawingSketch",
            "FolderFile",
            "Image",
            "Observations::Item",
            "PotentialChangeOrder",
            "PunchItem",
            "Rfi::Header",
            "SubmittalLog"
          ],
          "example": "Image"
        },
        "item_displayed_name": {
          "type": "string",
          "description": "Display name of the attached Item",
          "example": "foo.jpg"
        },
        "x": {
          "type": "integer",
          "description": "Position X coordinate"
        },
        "y": {
          "type": "integer",
          "description": "Position Y coordinate"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp"
        },
        "url": {
          "type": "string",
          "description": "Attached Item URL if applicable.",
          "example": "https:\/\/s3.amazonaws.com\/foo.jpg"
        }
      }
    },
    "MarkupLayer": {
      "type": "object",
      "title": "MarkupLayer",
      "description": "Markup Layer",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Markup Layer ID"
        },
        "name": {
          "type": "string",
          "description": "Name of the Markup Layer",
          "example": "Published"
        },
        "public": {
          "type": "boolean",
          "description": "Visible to Authorized Users other than the Markup Layer User?",
          "example": true
        },
        "user_id": {
          "type": "integer",
          "description": "Owner of the Markup Layer"
        },
        "user_can_delete": {
          "type": "boolean"
        },
        "user_can_publish": {
          "type": "boolean"
        },
        "user_can_edit": {
          "type": "boolean"
        },
        "markup": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/MarkupLayerElement"
          }
        }
      }
    },
    "MarkupLayerElement": {
      "type": "object",
      "title": "MarkupLayerElement",
      "description": "Markup Layer Element",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Markup Layer Element ID"
        },
        "data": {
          "type": "object",
          "description": "Markup Layer Element rendering properties",
          "properties": {
            "endPoint": {
              "type": "string",
              "description": "Coordinates",
              "example": [
                254,
                786
              ]
            },
            "extents": {
              "type": "string",
              "description": "Bounding box coordinates",
              "example": [
                1597,
                891,
                2098,
                1167
              ]
            },
            "points": {
              "type": "string",
              "description": "List of coordinates",
              "example": [
                [
                  979,
                  769
                ],
                [
                  970,
                  765
                ],
                [
                  963,
                  763
                ]
              ]
            },
            "startPoint": {
              "type": "string",
              "description": "Coordinates",
              "example": [
                254,
                786
              ]
            },
            "textvalue": {
              "type": "string",
              "description": "Enclosed text"
            }
          }
        },
        "propertyValues": {
          "$ref": "#\/definitions\/PropertyValues"
        },
        "type": {
          "type": "string",
          "description": "Type of Markup Layer Element",
          "enum": [
            "Line",
            "Arrow",
            "DoubleArrow",
            "Ellipse",
            "Rectangle",
            "Freehand",
            "Highlighter",
            "Hash",
            "Scribble",
            "Cloud",
            "Text",
            "Pin",
            "Image",
            "ImageCollection"
          ]
        },
        "x": {
          "type": "number",
          "format": "float",
          "description": "Position X coordinate",
          "example": 432.809
        },
        "y": {
          "type": "number",
          "format": "float",
          "description": "Position X coordinate",
          "example": 212.783
        },
        "w": {
          "type": "integer",
          "description": "Width",
          "example": 200
        },
        "h": {
          "type": "integer",
          "description": "Height",
          "example": 150
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp"
        },
        "item_displayed_name": {
          "type": "string",
          "description": "First attached Item display name if applicable",
          "example": "Section A"
        },
        "link": {
          "type": "object",
          "description": "First attached Drawing Item if applicable",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Drawing"
              ]
            },
            "item_id": {
              "type": "integer",
              "description": "Drawing ID"
            }
          }
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/MarkupAttachment"
          }
        }
      }
    },
    "Meeting": {
      "type": "object",
      "description": "Meeting",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Meeting id",
          "example": 82593
        },
        "position": {
          "type": "integer",
          "description": "Meeting position",
          "example": 1
        },
        "title": {
          "type": "string",
          "description": "Meeting title",
          "example": "Jon's Meeting"
        },
        "location": {
          "type": "string",
          "description": "Meeting location",
          "example": "Victoria Conference Room"
        },
        "meeting_date": {
          "type": "string",
          "format": "date",
          "description": "Meeting date",
          "example": "2014-04-14"
        },
        "occurred": {
          "type": "boolean",
          "description": "Meeting occurred status",
          "example": false
        },
        "start_time": {
          "type": "string",
          "description": "Meeting start time",
          "example": "2:00 PM"
        },
        "finish_time": {
          "type": "string",
          "description": "Meeting finish time",
          "example": "3:00 PM"
        },
        "is_private": {
          "type": "boolean",
          "description": "Meeting private status",
          "example": false
        },
        "is_draft": {
          "type": "boolean",
          "description": "Meeting draft status",
          "example": false
        },
        "mode": {
          "type": "string",
          "description": "Meeting mode",
          "example": "minutes",
          "enum": [
            "minutes",
            "agenda"
          ]
        },
        "description": {
          "type": "string",
          "description": "Meeting description",
          "example": "Stuff is going to go down aka ticket eating"
        },
        "conclusion": {
          "type": "string",
          "description": "Meeting conclusion",
          "example": "Meeting conclusion"
        },
        "attachments": {
          "type": "array",
          "description": "Meeting attachments",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "attendees": {
          "type": "array",
          "description": "Meeting attendees",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Attendee id",
                "example": 972145
              },
              "status": {
                "type": "string",
                "description": "Attendee status",
                "example": "Absent"
              },
              "login_information": {
                "$ref": "#\/definitions\/User"
              }
            }
          }
        },
        "meeting_categories": {
          "type": "array",
          "description": "Meeting categories",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Meeting category id",
                "example": 192424
              },
              "title": {
                "type": "string",
                "description": "Meeting category topic",
                "example": "Uncategorized Items"
              },
              "position": {
                "type": "integer",
                "description": "Meeting category position",
                "example": 0
              },
              "meeting_topic": {
                "type": "array",
                "description": "Meeting category meeting topics",
                "items": {
                  "$ref": "#\/definitions\/MeetingTopic"
                }
              }
            }
          }
        }
      }
    },
    "MeetingsGrouped": {
      "type": "object",
      "description": "Group of meetings",
      "properties": {
        "group_title": {
          "type": "string",
          "description": "Meeting group title",
          "example": "Jon's Meeting"
        },
        "meetings": {
          "type": "array",
          "description": "Meetings",
          "items": {
            "type": "object",
            "description": "Meeting",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Meeting id",
                "example": 82593
              },
              "title": {
                "type": "string",
                "description": "Meeting title",
                "example": "Jon's Meeting"
              },
              "position": {
                "type": "integer",
                "description": "Meeting position",
                "example": 1
              },
              "description": {
                "type": "string",
                "description": "Meeting description",
                "example": "Stuff is going to go down aka ticket eating"
              },
              "mode": {
                "type": "string",
                "description": "Meeting mode",
                "example": "minutes",
                "enum": [
                  "minutes",
                  "agenda"
                ]
              },
              "meeting_date": {
                "type": "string",
                "format": "date",
                "description": "Meeting date",
                "example": "2014-04-14"
              },
              "parent_id": {
                "type": "integer",
                "description": "Meeting parent id",
                "example": 88835
              }
            }
          }
        }
      }
    },
    "MeetingTopic": {
      "type": "object",
      "description": "Meeting topic",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Meeting topic id",
          "example": 965039
        },
        "number": {
          "type": "string",
          "description": "Meeting topic number",
          "example": "1.1"
        },
        "created_on": {
          "type": "string",
          "format": "date",
          "description": "Meeting topic created on",
          "example": "2014-04-25"
        },
        "position": {
          "type": "integer",
          "description": "Meeting topic position",
          "example": 0
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "description": "Meeting topic due date",
          "example": "2014-05-20T00:00:00.000Z"
        },
        "priority": {
          "type": "string",
          "description": "Meeting topic priority",
          "example": "Low",
          "enum": [
            "",
            "High",
            "Medium",
            "Low"
          ]
        },
        "status": {
          "type": "string",
          "description": "Meeting topic status",
          "example": "On Hold",
          "enum": [
            "Open",
            "On Hold",
            "Closed"
          ]
        },
        "title": {
          "type": "string",
          "description": "Meeting topic title",
          "example": "34' Level"
        },
        "minutes": {
          "type": "string",
          "description": "Meeting topic minutes",
          "example": "<p><span style=\\\"font-size: large;\\\">Please look at Item 1 and have those pieces completed <strong>before<\/strong><\/span><\/p>"
        },
        "description": {
          "type": "string",
          "description": "Meeting topic description",
          "example": "Need pricing from vendor for 34' level"
        },
        "meeting_category": {
          "type": "object",
          "description": "Meeting category",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Meeting category id",
              "example": 192424
            },
            "title": {
              "type": "string",
              "description": "Meeting category title",
              "example": "Uncategorized Items"
            }
          }
        },
        "assignments": {
          "type": "array",
          "description": "Meeting topic assignments",
          "items": {
            "$ref": "#\/definitions\/User"
          }
        },
        "attachments": {
          "type": "array",
          "description": "Meeting topic attachments",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        }
      }
    },
    "MeetingCategory": {
      "type": "object",
      "description": "Meeting category",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Meeting category id",
          "example": 192424
        },
        "title": {
          "type": "string",
          "description": "Meeting category topic",
          "example": "Uncategorized Items"
        },
        "position": {
          "type": "integer",
          "description": "Meeting category position",
          "example": 0
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        }
      }
    },
    "MeetingAttendee": {
      "type": "object",
      "description": "Meeting Attendee record",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Meeting Attendee record ID",
          "example": 999
        },
        "meeting_id": {
          "type": "integer",
          "description": "ID of the corresponding Meeting",
          "example": 999
        },
        "status": {
          "type": "string",
          "description": "Attendance status",
          "example": "Present",
          "enum": [
            "Present",
            "Absent",
            "For Distribution Only",
            "Conference"
          ]
        },
        "login_information": {
          "$ref": "#\/definitions\/User"
        }
      }
    },
    "PunchItemCompact": {
      "type": "object",
      "title": "Punch Item",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 83978
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "description": "Due date",
          "example": "2013-09-30"
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "test 1 today"
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": 1
        },
        "private": {
          "type": "boolean",
          "description": "Privacy status",
          "example": false
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "Open",
            "Closed",
            "Overdue",
            "Pending"
          ]
        },
        "has_resolved_responses": {
          "type": "boolean",
          "description": "At least one Punch Item Assignment has a status of 'resolved"
        },
        "has_unresolved_responses": {
          "type": "boolean",
          "description": "At least one Punch Item Assignment has a status of 'unresolved'"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "trade": {
          "$ref": "#\/definitions\/Trade"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "punch_item_type": {
          "$ref": "#\/definitions\/PunchItemTypeCompact"
        },
        "assignments": {
          "type": "array",
          "description": "Array of Punch Item Assignments",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID"
              },
              "approved": {
                "type": "boolean",
                "description": "Resolution status"
              },
              "comment": {
                "type": "string",
                "description": "Additional comment"
              },
              "login_information": {
                "$ref": "#\/definitions\/User"
              },
              "vendor": {
                "$ref": "#\/definitions\/VendorCompact"
              },
              "attachments": {
                "type": "array",
                "description": "Array of Attachments",
                "items": {
                  "$ref": "#\/definitions\/Attachment"
                }
              }
            }
          }
        },
        "assignees": {
          "type": "array",
          "description": "Punch Item Assignees",
          "items": {
            "$ref": "#\/definitions\/User"
          }
        }
      }
    },
    "PunchItem": {
      "type": "object",
      "title": "Punch Item",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 13151
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "description": "Due Date",
          "example": "2013-09-30"
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "test 1 today"
        },
        "position": {
          "type": "integer",
          "description": "Position",
          "example": 1
        },
        "private": {
          "type": "boolean",
          "description": "Privacy status",
          "example": false
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "Open",
            "Closed",
            "Overdue",
            "Pending"
          ]
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "date_initiated": {
          "type": "string",
          "format": "date",
          "description": "Date created"
        },
        "schedule_impact": {
          "type": "string",
          "description": "Schedule impact status"
        },
        "schedule_impact_days": {
          "type": "integer",
          "description": "Schedule impact value in days"
        },
        "reference": {
          "type": "string",
          "description": "Used to create a reference point between a Punch Item within Procore and a corresponding Punch Item outside of Procore"
        },
        "cost_impact": {
          "type": "string",
          "description": "Cost impact status"
        },
        "cost_impact_amount": {
          "type": "integer",
          "description": "Cost impact amount"
        },
        "can_email": {
          "type": "boolean",
          "description": "Punch Item has Punch Item Assignments or distribution members to email to",
          "example": false
        },
        "drawing_ids": {
          "type": "array",
          "description": "Array of Drawing IDs",
          "items": {
            "type": "integer"
          }
        },
        "distribution_members": {
          "type": "array",
          "description": "Users on the Punch Item distribution list",
          "items": {
            "$ref": "#\/definitions\/User"
          }
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "trade": {
          "$ref": "#\/definitions\/Trade"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "punch_item_type": {
          "$ref": "#\/definitions\/PunchItemTypeCompact"
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCodeCompact"
        },
        "assignments": {
          "type": "array",
          "description": "Array of Punch Item Assignments",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID"
              },
              "approved": {
                "type": "boolean",
                "description": "Resolution status"
              },
              "comment": {
                "type": "string",
                "description": "Additional comments"
              },
              "login_information": {
                "$ref": "#\/definitions\/User"
              },
              "attachments": {
                "type": "array",
                "description": "Array of Attachments",
                "items": {
                  "$ref": "#\/definitions\/Attachment"
                }
              }
            }
          }
        },
        "attachments": {
          "type": "array",
          "description": "Array of Punch Item Attachments",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "images": {
          "type": "array",
          "description": "Array of Images",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "web_images": {
          "type": "array",
          "description": "Array of photo Attachments uploaded from the web application",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        }
      }
    },
    "PunchItemTypeCompact": {
      "type": "object",
      "title": "Punch Item Type",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 44165
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "lighting"
        }
      }
    },
    "PunchItemType": {
      "type": "object",
      "title": "Punch Item Type",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Punch Item Type ID",
          "example": 44165
        },
        "name": {
          "type": "string",
          "description": "Punch Item Type name",
          "example": "lighting"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Punch Item Type created at"
        }
      }
    },
    "PunchItemAssignment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "approved": {
          "type": "boolean",
          "description": "Resolution status",
          "example": true
        },
        "comment": {
          "type": "string",
          "description": "Comment",
          "example": "Completed"
        },
        "login_information_id": {
          "type": "integer",
          "example": 420
        },
        "login_information_name": {
          "type": "string",
          "example": "Edgar Admin"
        },
        "login_information": {
          "$ref": "#\/definitions\/User"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        },
        "vendor": {
          "$ref": "#\/definitions\/VendorCompact"
        },
        "notified_at": {
          "type": "string",
          "description": "Date assignee was notified of Punch Item Assignment",
          "example": "Thu, 15 Dec 2016 20:44:58 UTC +00:00"
        }
      }
    },
    "PurchaseOrderContract": {
      "type": "object",
      "description": "Purchase Order Contract",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 64382
        },
        "approved_change_orders": {
          "type": "string",
          "description": "Approved Change Orders Amount",
          "example": 23556
        },
        "assignee": {
          "type": "object",
          "description": "Assignee",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 464773
            }
          }
        },
        "attachments": {
          "$ref": "#\/definitions\/Attachment"
        },
        "bill_to_address": {
          "type": "string",
          "description": "Bill to Address",
          "example": "1410 Harbor View Drive Newport Beach, CA 92663"
        },
        "change_order_packages": {
          "$ref": "#\/definitions\/ChangeOrderPackageIndex"
        },
        "change_order_requests": {
          "$ref": "#\/definitions\/ChangeOrderRequestIndex"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "delivery_date": {
          "type": "string",
          "format": "date",
          "description": "Delivery date",
          "example": "2012-10-23T00:00:00.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "<p>3 tons of cement.<\/p>"
        },
        "executed": {
          "type": "boolean",
          "description": "Executed status",
          "example": false
        },
        "grand_total": {
          "type": "string",
          "description": "Grand total",
          "example": 3329738
        },
        "line_items": {
          "type": "array",
          "description": "Line items",
          "items": {
            "$ref": "#\/definitions\/LineItem"
          }
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "PO-17-1990-00001"
        },
        "origin_data": {
          "type": "string",
          "description": "Origin data",
          "example": "OD-2398273424"
        },
        "origin_id": {
          "type": "string",
          "description": "Origin ID",
          "example": 459247544
        },
        "payment_terms": {
          "type": "string",
          "description": "Payment terms",
          "example": "Net 30"
        },
        "payments_issued": {
          "type": "array",
          "description": "Payments issued",
          "items": {
            "$ref": "#\/definitions\/ContractPayment"
          }
        },
        "pending_change_orders": {
          "type": "string",
          "description": "Pending Change Orders amount",
          "example": 23672
        },
        "pending_revised_contract": {
          "type": "string",
          "description": "Pending Revised Contract amount",
          "example": 973630
        },
        "percentage_paid": {
          "type": "string",
          "description": "Percentage paid amount",
          "example": 32
        },
        "potential_change_orders": {
          "type": "array",
          "description": "Potential Change Orders",
          "items": {
            "$ref": "#\/definitions\/PotentialChangeOrderIndex"
          }
        },
        "private": {
          "type": "boolean",
          "description": "Enable\/Disable Pivate status",
          "example": false
        },
        "project": {
          "$ref": "#\/definitions\/CommitmentProject"
        },
        "remaining_balance_outstanding": {
          "type": "string",
          "description": "Remaining Balance Outstanding amount",
          "example": 233456
        },
        "retainage_percent": {
          "type": "string",
          "description": "Retainage Percent",
          "example": 10
        },
        "revised_contract": {
          "type": "string",
          "description": "Revised contracts amount",
          "example": "4566564.0"
        },
        "ship_to_address": {
          "type": "string",
          "description": "Ship to address",
          "example": "Santa Claus Lane, Carpinteria, CA"
        },
        "ship_via": {
          "type": "string",
          "description": "Ship via",
          "example": "Acme Shipping"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "Draft",
            "Processing",
            "Submitted",
            "Partially Received",
            "Received",
            "Approved",
            "Closed"
          ],
          "example": "Processing"
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Initial cement order."
        },
        "total_draw_requests_amount": {
          "type": "string",
          "description": "Total Draw Requests amount",
          "example": 232224
        },
        "total_payments": {
          "type": "string",
          "description": "Total Payments amount",
          "example": 111312
        },
        "vendor": {
          "type": "object",
          "description": "Vendor",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 356493
            },
            "company": {
              "type": "string",
              "description": "Company",
              "example": "Mau Mixers, LLC"
            }
          }
        }
      }
    },
    "PurchaseOrderContractCompact": {
      "type": "object",
      "description": "Purchase Order Contract",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 64382
        },
        "approved_change_orders": {
          "type": "string",
          "description": "Approved Change Orders amount",
          "example": 23556
        },
        "assignee": {
          "type": "object",
          "description": "Assignee",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 464773
            }
          }
        },
        "bill_to_address": {
          "type": "string",
          "description": "Bill to address",
          "example": "Santa Claus Lane, Carpinteria, CA"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "delivery_date": {
          "type": "string",
          "format": "date",
          "description": "Delivery date",
          "example": "2012-10-23T00:00:00.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "<p>3 tons of cement.<\/p>"
        },
        "executed": {
          "type": "boolean",
          "description": "Executed status",
          "example": false
        },
        "grand_total": {
          "type": "string",
          "description": "Grand total",
          "example": 3329738
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "PO-17-1990-00001"
        },
        "origin_data": {
          "type": "string",
          "description": "Origin Data",
          "example": "OD-2398273424"
        },
        "origin_id": {
          "type": "string",
          "description": "Origin ID",
          "example": 459247544
        },
        "payment_terms": {
          "type": "string",
          "description": "Payment terms",
          "example": "Net 30"
        },
        "pending_change_orders": {
          "type": "string",
          "description": "Pending Change Orders amount",
          "example": 23672
        },
        "pending_revised_contract": {
          "type": "string",
          "description": "Pending Revised Contract amount",
          "example": 973630
        },
        "percentage_paid": {
          "type": "string",
          "description": "Purchase Order Contract percentage paid",
          "example": 10
        },
        "private": {
          "type": "boolean",
          "description": "Enable\/Disable Private status",
          "example": false
        },
        "project": {
          "$ref": "#\/definitions\/CommitmentProject"
        },
        "remaining_balance_outstanding": {
          "type": "string",
          "description": "Remaining Balance Outstanding amount",
          "example": 233456
        },
        "retainage_percent": {
          "type": "string",
          "description": "Retainage percent",
          "example": 10
        },
        "revised_contract": {
          "type": "string",
          "description": "Revised Contract amount",
          "example": 4566564
        },
        "ship_to_address": {
          "type": "string",
          "description": "Ship to address",
          "example": "1410 Harbor View Drive Newport Beach, CA 92663"
        },
        "ship_via": {
          "type": "string",
          "description": "Ship via",
          "example": "Acme Shipping"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "Draft",
            "Processing",
            "Submitted",
            "Partially Received",
            "Received",
            "Approved",
            "Closed"
          ],
          "example": "Processing"
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Initial cement order."
        },
        "total_draw_requests_amount": {
          "type": "string",
          "description": "Total Draw Requests Amount",
          "example": 232224
        },
        "total_payments": {
          "type": "string",
          "description": "Total Payments Amount",
          "example": 111312
        },
        "vendor": {
          "type": "object",
          "description": "Vendor",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 356493
            },
            "company": {
              "type": "string",
              "description": "Company",
              "example": "Mau Mixers, LLC"
            }
          }
        }
      }
    },
    "ContractPayment": {
      "type": "object",
      "description": "Contract Payment",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 1551516
        },
        "amount": {
          "type": "string",
          "description": "Payment amount",
          "example": "1000000.0"
        },
        "check_number": {
          "type": "integer",
          "description": "Check number",
          "example": 1
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2015-07-14T22:03:27Z"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Payment date",
          "example": "2015-07-15"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2015-07-19T22:03:27Z"
        },
        "draw_request_number": {
          "type": "integer",
          "description": "Payment number of a Draw Request, Payment Application, or Requisition",
          "example": 5
        },
        "invoice_date": {
          "type": "string",
          "format": "date",
          "description": "Payment invoice date",
          "example": "2015-09-29"
        },
        "invoice_number": {
          "type": "string",
          "description": "Invoice number",
          "example": "Invoice 123"
        },
        "legacy_amount_in_cents": {
          "type": "integer",
          "description": "Payment legacy amount in cents",
          "example": 5000
        },
        "notes": {
          "type": "string",
          "description": "Associated notes",
          "example": "January Payment"
        },
        "payment_number": {
          "type": "integer",
          "description": "Payment number",
          "example": 5
        },
        "attachments": {
          "type": "array",
          "description": "Payment attachments",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        }
      }
    },
    "BudgetLineItem": {
      "type": "object",
      "description": "Budget Line Item",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 75414
        },
        "original_budget_amount": {
          "type": "number",
          "format": "float",
          "description": "Original budget amount",
          "example": "20000.0"
        },
        "approved_budget_changes": {
          "type": "number",
          "format": "float",
          "description": "Approved budget changes",
          "example": "0.0"
        },
        "revised_budget": {
          "type": "number",
          "format": "float",
          "description": "Revised budget",
          "example": "20000.0"
        },
        "pending_budget_changes": {
          "type": "number",
          "format": "float",
          "description": "Pending budget changes",
          "example": "0.0"
        },
        "projected_budget": {
          "type": "number",
          "format": "float",
          "description": "Projected budget",
          "example": "20000.0"
        },
        "committed_costs": {
          "type": "number",
          "format": "float",
          "description": "Committed costs",
          "example": "0.0"
        },
        "direct_costs": {
          "type": "number",
          "format": "float",
          "description": "Direct costs",
          "example": "0.0"
        },
        "pending_cost_changes": {
          "type": "number",
          "format": "float",
          "description": "Pending cost changes",
          "example": "0.0"
        },
        "projected_costs": {
          "type": "number",
          "format": "float",
          "description": "Projected costs",
          "example": "0.0"
        },
        "budget_forecast": {
          "type": "number",
          "format": "float",
          "description": "Budget forecast",
          "example": "20000.0"
        },
        "estimated_cost_at_completion": {
          "type": "number",
          "format": "float",
          "description": "Estimated cost at completion",
          "example": "20000.0"
        },
        "projected_over_under": {
          "type": "number",
          "format": "float",
          "description": "Projected over under",
          "example": "0.0"
        },
        "cost_code": {
          "type": "object",
          "description": "Cost Code",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 32780682
            },
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Wood Sub-floors"
            },
            "code": {
              "type": "string",
              "description": "Cost code",
              "example": "162"
            },
            "full_code": {
              "type": "string",
              "description": "Cost full code",
              "example": "17-162"
            }
          }
        },
        "division": {
          "type": "object",
          "description": "Budget Line Item division",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 236246
            },
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Wood floors"
            },
            "full_code": {
              "type": "string",
              "description": "Full cost code",
              "example": "11-123"
            }
          }
        },
        "line_item_type": {
          "type": "object",
          "description": "Budget Line Item type",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 23107
            },
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Equipment"
            }
          }
        }
      }
    },
    "BudgetModification": {
      "type": "object",
      "description": "Budget Modification",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 75414
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2016-10-23T21:39:40.000Z"
        },
        "from_budget_line_item_id": {
          "type": "integer",
          "description": "Source line item id",
          "example": 348383
        },
        "notes": {
          "type": "string",
          "description": "Notes describing the modification",
          "example": "Transfer money for extra concrete."
        },
        "origin_data": {
          "type": "string",
          "description": "Origin data",
          "example": "OD-3483830-2"
        },
        "origin_id": {
          "type": "string",
          "description": "Origin ID",
          "example": 4903400
        },
        "to_budget_line_item_id": {
          "type": "integer",
          "description": "Target line item id",
          "example": 4034034
        },
        "transfer_amount": {
          "type": "string",
          "format": "float",
          "description": "Amount transfered from the source Budget Line Item to the Target Budget Line Item",
          "example": 4500
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2016-11-23T21:39:40.000Z"
        }
      }
    },
    "TimecardTimeType": {
      "type": "object",
      "title": "TimecardTimeType",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Time type id",
          "example": 1
        },
        "time_type": {
          "type": "string",
          "description": "Time type",
          "example": "Another Time"
        },
        "abbreviated_time_type": {
          "type": "string",
          "description": "Time type abbreviated",
          "example": true
        },
        "global": {
          "type": "boolean",
          "description": "Time type global status",
          "example": false
        }
      }
    },
    "TimecardTimeTypeCompact": {
      "type": "object",
      "title": "TimecardTimeType",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Time type id",
          "example": 1
        },
        "time_type": {
          "type": "string",
          "description": "Time type",
          "example": "Another Time"
        }
      }
    },
    "TimecardTimeTypeProject": {
      "type": "object",
      "title": "TimecardTimeType",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Time type id",
          "example": 1
        },
        "time_type": {
          "type": "string",
          "description": "Time type",
          "example": "Another Time"
        },
        "abbreviated_time_type": {
          "type": "string",
          "description": "Time type abbreviated",
          "example": true
        },
        "global": {
          "type": "boolean",
          "description": "Time type global status",
          "example": false
        },
        "company_id": {
          "type": "integer",
          "description": "Time type company id",
          "example": 15125
        }
      }
    },
    "TimecardEntry": {
      "type": "object",
      "title": "TimecardEntry",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Timecard entry id",
          "example": 1
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Timecard entry date",
          "example": "2015-05-12"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "description": {
          "type": "string",
          "description": "Timecard entry description",
          "example": "Description"
        },
        "billable": {
          "type": "boolean",
          "description": "Timecard entry billable status",
          "example": true
        },
        "hours": {
          "type": "string",
          "description": "Timecard entry hours",
          "example": "5.0"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timecard entry updated at",
          "example": "2015-11-12T21:26:28.000Z"
        },
        "timecard_type": {
          "type": "string",
          "description": "Timecard entry time type",
          "example": "Regular Time"
        },
        "cost_code": {
          "type": "string",
          "description": "Timecard entry cost code",
          "example": "Summary"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "login_information": {
          "$ref": "#\/definitions\/User"
        }
      }
    },
    "TimecardEntryCompact": {
      "type": "object",
      "title": "TimecardEntry",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Timecard entry id",
          "example": 1
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Timecard entry date",
          "example": "2015-05-12"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "description": {
          "type": "string",
          "description": "Timecard entry description",
          "example": "Description"
        },
        "hours": {
          "type": "string",
          "description": "Timecard entry hours",
          "example": "5.0"
        },
        "login_information": {
          "$ref": "#\/definitions\/User"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timecard entry updated at",
          "example": "2015-11-12T21:26:28.000Z"
        }
      }
    },
    "TimecardEntryProject": {
      "type": "object",
      "title": "TimecardEntry",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Timecard entry id",
          "example": 1
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Timecard entry date",
          "example": "2015-05-12"
        },
        "description": {
          "type": "string",
          "description": "Timecard entry description",
          "example": "Description"
        },
        "billable": {
          "type": "boolean",
          "description": "Timecard entry billable status",
          "example": true
        },
        "hours": {
          "type": "string",
          "description": "Timecard entry hours",
          "example": "5.0"
        },
        "timecard_type": {
          "$ref": "#\/definitions\/TimecardTimeTypeProject"
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCodeCompact"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "login_information": {
          "$ref": "#\/definitions\/User"
        }
      }
    },
    "ScheduleType": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "enum": [
            "Microsoft Project 2010",
            "Microsoft Project",
            "Primavera P6",
            "Primavera Suretrak",
            "MPX Schedule"
          ],
          "description": "Schedule type key",
          "example": "Primavera Suretrak"
        },
        "p6_id": {
          "type": "string",
          "description": "Schedule type Primavera P6 Identifier",
          "example": "NRG00940"
        }
      }
    },
    "Task": {
      "type": "object",
      "title": "Task",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Task id",
          "example": 1359235
        },
        "name": {
          "type": "string",
          "description": "Task name",
          "example": "INTERIOR"
        },
        "key": {
          "type": "string",
          "description": "Task Global Identifier",
          "example": "101429|40e65ab5-07a5-4cb3-88c0-bc691c3902e0"
        }
      }
    },
    "TaskNormal": {
      "allOf": [
        {
          "type": "object",
          "title": "Task",
          "properties": {
            "start_datetime": {
              "type": "string",
              "format": "date-time",
              "description": "Task start date-time",
              "example": "2015-03-06T13:00:00Z"
            },
            "finish_datetime": {
              "type": "string",
              "format": "date-time",
              "description": "Task finish date-time",
              "example": "2015-03-08T22:00:00Z"
            },
            "percentage": {
              "type": "integer",
              "description": "Task percentage",
              "example": 80
            },
            "color": {
              "type": "string",
              "description": "Task color",
              "example": "#6070A0"
            },
            "parent_id": {
              "type": "integer",
              "description": "Task parent id",
              "example": 802241
            },
            "pending": {
              "type": "boolean",
              "description": "Task pending status",
              "example": false
            },
            "activity_id": {
              "type": "integer",
              "description": "Task activity id",
              "example": 2
            },
            "resource_name": {
              "type": "string",
              "description": "Task resource name",
              "example": "None"
            },
            "critical_path": {
              "type": "boolean",
              "description": "Task critical path status",
              "example": false
            },
            "milestone": {
              "type": "boolean",
              "description": "Task milestone status",
              "example": true
            },
            "actual_start": {
              "type": "string",
              "format": "date-time",
              "description": "Task actual start date-time",
              "example": "2015-03-08T00:00:00Z"
            },
            "actual_finish": {
              "type": "string",
              "format": "date-time",
              "description": "Task actual finish date-time",
              "example": "2015-03-09T00:00:00Z"
            },
            "row_number": {
              "type": "integer",
              "description": "Task row number",
              "example": 2
            },
            "has_children": {
              "type": "boolean",
              "description": "Task has children status",
              "example": false
            },
            "full_outline_path": {
              "type": "string",
              "description": "Task full outline path",
              "example": "INTERIOR"
            },
            "source_uid": {
              "type": "string",
              "description": "Task source uid",
              "example": "0687b2f6-dc92-40c7-a8c8-a3c1f3ac9305"
            },
            "wbs": {
              "type": "string",
              "description": "Task wbs",
              "example": "1.1"
            },
            "schedule_duration": {
              "type": "integer",
              "description": "Task schedule duration",
              "example": 3
            }
          }
        },
        {
          "$ref": "#\/definitions\/Task"
        }
      ]
    },
    "ToDo": {
      "type": "object",
      "title": "ToDo",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ToDo id",
          "example": 12
        },
        "assignment": {
          "$ref": "#\/definitions\/User"
        },
        "color": {
          "type": "string",
          "description": "ToDo color",
          "example": "#A4505D"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "description": {
          "type": "string",
          "description": "ToDo description",
          "example": "Use some power tools to fix the drywall."
        },
        "finish_datetime": {
          "type": "string",
          "format": "date-time",
          "description": "ToDo finish date-time",
          "example": "2015-02-07T00:00:00.000Z"
        },
        "milestone": {
          "type": "boolean",
          "description": "ToDo milestone status",
          "example": true
        },
        "name": {
          "type": "string",
          "description": "ToDo name",
          "example": "Fix drywall"
        },
        "percentage": {
          "type": "integer",
          "description": "ToDo percentage",
          "example": 99
        },
        "private": {
          "type": "boolean",
          "description": "ToDo private status",
          "example": false
        },
        "start_datetime": {
          "type": "string",
          "format": "date-time",
          "description": "ToDo start date-time",
          "example": "2015-02-06T00:00:00.000Z"
        }
      }
    },
    "UserAccessLevel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "access level"
        },
        "name": {
          "type": "string",
          "description": "friend name for level"
        },
        "permitted_actions": {
          "type": "object",
          "description": "actions supported by access level by tool"
        }
      }
    },
    "WorkOrderContract": {
      "type": "object",
      "description": "Work Order Contract",
      "properties": {
        "actual_completion_date": {
          "type": "string",
          "format": "date",
          "description": "Actual completion date",
          "example": "2012-10-27T00:00:00.000Z"
        },
        "approved_change_orders": {
          "type": "string",
          "description": "Approved change orders amount",
          "example": 3434
        },
        "attachments": {
          "type": "array",
          "description": "Attachments",
          "items": {
            "$ref": "#\/definitions\/Attachment"
          }
        },
        "change_order_packages": {
          "type": "array",
          "description": "Change order packages",
          "items": {
            "$ref": "#\/definitions\/ChangeOrderPackageSummary"
          }
        },
        "change_order_requests": {
          "type": "array",
          "description": "Change order requests",
          "items": {
            "$ref": "#\/definitions\/ChangeOrderRequestIndex"
          }
        },
        "contract_start_date": {
          "type": "string",
          "format": "date",
          "description": "Start date",
          "example": "2012-10-03T00:00:00.000Z"
        },
        "contract_estimated_completion_date": {
          "type": "string",
          "format": "date",
          "description": "Estimated completion date",
          "example": "2012-10-31T00:00:00.000Z"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "<p>Paving level 3 parking lot.<\/p>"
        },
        "exclusions": {
          "type": "string",
          "description": "Exclusions",
          "example": "<p>Stairs, Elevator platform<\/p>"
        },
        "executed": {
          "type": "boolean",
          "description": "Executed (or not)",
          "example": false
        },
        "grand_total": {
          "type": "string",
          "description": "Grand total",
          "example": 12000
        },
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 64382
        },
        "inclusions": {
          "type": "string",
          "description": "Inclusions",
          "example": "<p>Level 3 parking lot.<\/p>"
        },
        "line_items": {
          "type": "array",
          "description": "Line items",
          "items": {
            "$ref": "#\/definitions\/LineItem"
          }
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "SC-17-1990-00001"
        },
        "origin_data": {
          "type": "string",
          "description": "Origin data",
          "example": "OD-2398273423"
        },
        "origin_id": {
          "type": "string",
          "description": "Origin ID",
          "example": 459247543
        },
        "payments_issued": {
          "type": "array",
          "description": "Payment issued",
          "items": {
            "$ref": "#\/definitions\/ContractPayment"
          }
        },
        "pending_change_orders": {
          "type": "string",
          "description": "Pending change orders amount",
          "example": 1000
        },
        "pending_revised_contract": {
          "type": "string",
          "description": "Pending revised contracts amount",
          "example": 2000
        },
        "percentage_paid": {
          "type": "string",
          "description": "Percentage paid",
          "example": 75.5
        },
        "potential_change_orders": {
          "type": "array",
          "description": "Work Order Contract potential change orders",
          "items": {
            "$ref": "#\/definitions\/PotentialChangeOrderSummary"
          }
        },
        "private": {
          "type": "boolean",
          "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
          "example": false
        },
        "project": {
          "$ref": "#\/definitions\/CommitmentProject"
        },
        "remaining_balance_outstanding": {
          "type": "string",
          "description": "Remaining outstanding balance",
          "example": 500
        },
        "retainage_percent": {
          "type": "string",
          "description": "Retainage percent",
          "example": 10.5
        },
        "revised_contract": {
          "type": "string",
          "description": "Revised contract amount",
          "example": 4833.55
        },
        "signed_contract_received_date": {
          "type": "string",
          "format": "date",
          "description": "Signed contract received date",
          "example": "2012-10-25T00:00:00.000Z"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "Draft",
            "Out For Bid",
            "Out For Signature",
            "Approved",
            "Complete",
            "Terminated",
            "Void"
          ],
          "example": "Draft"
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Concrete Paving"
        },
        "total_draw_requests_amount": {
          "type": "string",
          "description": "Total draw requests amount",
          "example": 5670
        },
        "total_payments": {
          "type": "string",
          "description": "Total payments amount",
          "example": 12344
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2015-11-04T15:18:57.000Z"
        },
        "vendor": {
          "type": "object",
          "description": "Vendor",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 356493
            },
            "company": {
              "type": "string",
              "description": "Company",
              "example": "Mau Mixers, LLC"
            }
          }
        }
      }
    },
    "WorkOrderContractCompact": {
      "type": "object",
      "description": "Work Order Contract",
      "properties": {
        "actual_completion_date": {
          "type": "string",
          "format": "date",
          "description": "Actual completion date",
          "example": "2012-10-27T00:00:00.000Z"
        },
        "approved_change_orders": {
          "type": "string",
          "description": "Approved change orders amount",
          "example": 34.4
        },
        "contract_start_date": {
          "type": "string",
          "format": "date",
          "description": "Start date",
          "example": "2012-10-03T00:00:00.000Z"
        },
        "contract_estimated_completion_date": {
          "type": "string",
          "format": "date",
          "description": "Estimated completion date",
          "example": "2012-10-31T00:00:00.000Z"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "<p>Paving level 3 parking lot.<\/p>"
        },
        "exclusions": {
          "type": "string",
          "description": "Exclusions",
          "example": "<p>Stairs, Elevator platform<\/p>"
        },
        "executed": {
          "type": "boolean",
          "description": "Executed (or not)",
          "example": false
        },
        "grand_total": {
          "type": "string",
          "description": "Grand total",
          "example": 12000
        },
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 64382
        },
        "inclusions": {
          "type": "string",
          "description": "Inclusions",
          "example": "<p>Level 3 parking lot.<\/p>"
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": "SC-17-1990-00001"
        },
        "origin_data": {
          "type": "string",
          "description": "Origin data",
          "example": "OD-2398273423"
        },
        "origin_id": {
          "type": "string",
          "description": "Origin ID",
          "example": 459247543
        },
        "pending_change_orders": {
          "type": "string",
          "description": "Pending change orders amount",
          "example": 1000
        },
        "pending_revised_contract": {
          "type": "string",
          "description": "Pending revised contracts amount",
          "example": 2000
        },
        "percentage_paid": {
          "type": "string",
          "description": "Percentage paid",
          "example": 75.5
        },
        "private": {
          "type": "boolean",
          "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
          "example": false
        },
        "project": {
          "$ref": "#\/definitions\/CommitmentProject"
        },
        "remaining_balance_outstanding": {
          "type": "string",
          "description": "Remaining outstanding balance",
          "example": 500
        },
        "retainage_percent": {
          "type": "string",
          "description": "Retainage percent",
          "example": 10.5
        },
        "revised_contract": {
          "type": "string",
          "description": "Revised contract amount",
          "example": 4833.55
        },
        "signed_contract_received_date": {
          "type": "string",
          "format": "date",
          "description": "Signed contract received date",
          "example": "2012-10-25T00:00:00.000Z"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "Draft",
            "Out For Bid",
            "Out For Signature",
            "Approved",
            "Complete",
            "Terminated",
            "Void"
          ],
          "example": "Draft"
        },
        "title": {
          "type": "string",
          "description": "Title",
          "example": "Concrete Paving"
        },
        "total_draw_requests_amount": {
          "type": "string",
          "description": "Total draw requests amount",
          "example": 5670
        },
        "total_payments": {
          "type": "string",
          "description": "Total payments amount",
          "example": 12344
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2015-11-04T15:18:57.000Z"
        },
        "vendor": {
          "type": "object",
          "description": "Vendor",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 356493
            },
            "company": {
              "type": "string",
              "description": "Company",
              "example": "Mau Mixers, LLC"
            }
          }
        }
      }
    },
    "CommitmentProject": {
      "type": "object",
      "description": "Project",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 123456
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Children's Hospital"
        }
      }
    },
    "DeliveryLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "contents": {
          "type": "string",
          "description": "Contents of the delivery",
          "example": "Delivery Content"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "delivery_from": {
          "type": "string",
          "description": "Name of the Company that delivered the items",
          "example": 1
        },
        "position": {
          "type": "integer",
          "description": "Position in the list of recorded deliveries for the day",
          "example": 1
        },
        "date": {
          "type": "string",
          "description": "Date of delivery",
          "format": "date",
          "example": "2016-05-19"
        },
        "comments": {
          "type": "string",
          "description": "Additional comments",
          "example": "Delivered on Time"
        },
        "tracking_number": {
          "type": "string",
          "description": "Tracking number for the delivery",
          "example": "123"
        },
        "time_hour": {
          "type": "integer",
          "description": "Time of delivery - hour",
          "example": 14,
          "maximum": 23,
          "minimum": 0
        },
        "time_minute": {
          "type": "integer",
          "description": "Time of delivery - minute",
          "example": 0,
          "maximum": 59,
          "minimum": 0
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        }
      }
    },
    "EquipmentLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "description": "Date of record",
          "format": "date",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "hours_idle": {
          "type": "string",
          "description": "Number of hours the Equipment was idle",
          "example": "2.0"
        },
        "hours_operating": {
          "type": "string",
          "description": "Number of hours the Equipment was in operation",
          "example": "8.0"
        },
        "inspected": {
          "type": "boolean",
          "description": "Equipment was inspected before operation",
          "example": false
        },
        "inspection_hour": {
          "type": "integer",
          "description": "Time of inspection - hour",
          "example": 9,
          "maximum": 23,
          "minimum": 0
        },
        "inspection_minute": {
          "type": "integer",
          "description": "Time of Inspection - minute",
          "example": 50,
          "maximum": 59,
          "minimum": 0
        },
        "notes": {
          "type": "string",
          "description": "Additional Notes",
          "example": "Equipment notes"
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded for the day",
          "example": 11241
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCodeCompact"
        },
        "equipment": {
          "$ref": "#\/definitions\/Equipment"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        }
      }
    },
    "ManpowerLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "description": "Date of record",
          "format": "date",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "man_hours": {
          "type": "string",
          "description": "Total man hours (num_workers x num_hours)",
          "example": "32.0"
        },
        "notes": {
          "type": "string",
          "description": "Additional notes",
          "example": "Manpower Notes"
        },
        "num_workers": {
          "type": "integer",
          "description": "Number of workers",
          "example": 4
        },
        "num_hours": {
          "type": "string",
          "description": "Number of hours for each worker",
          "example": "8.0"
        },
        "position": {
          "type": "integer",
          "description": "Position in which this entry was recorded for the day",
          "example": 11241
        },
        "contact": {
          "$ref": "#\/definitions\/Contact"
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCodeCompact"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        }
      }
    },
    "NotesLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "comment": {
          "type": "string",
          "description": "Additional comments",
          "example": "Notes Log comment"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "description": "Date of record",
          "format": "date",
          "example": "2016-05-19"
        },
        "daily_log_header_id": {
          "type": "integer",
          "description": "Daily Log Header ID",
          "example": 151335
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "is_issue_day": {
          "type": "boolean",
          "description": "The note being added is an issue affecting the projet",
          "example": false
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded",
          "example": 11241
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        }
      }
    },
    "QuantityLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 333675
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Format: YYYY-MM-DD Example: 2016-04-19",
          "example": "2016-05-19"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Quantity amount was exact"
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded for the day",
          "example": 11241
        },
        "quantity": {
          "type": "integer",
          "description": "Total number of the specified materials placed on the site that day",
          "example": 4
        },
        "unit": {
          "type": "string",
          "description": "Units that were delivered",
          "example": "5"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "cost_code": {
          "$ref": "#\/definitions\/CostCode"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        }
      }
    },
    "DailyConstructionReportLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "apprentice_hours": {
          "type": "string",
          "description": "Number of hours the apprentice workers were on site",
          "example": "5.0"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "description": "Date of the report",
          "format": "date",
          "example": "2016-05-19"
        },
        "foreman_hours": {
          "type": "string",
          "description": "Number of hours that the foremen were on site",
          "example": "5.0"
        },
        "journeyman_hours": {
          "type": "string",
          "description": "Number of hours that the journeymen were on site",
          "example": "5.0"
        },
        "notes": {
          "type": "string",
          "description": "Additional notes",
          "example": "Daily Construction Report Log note"
        },
        "number_of_apprentice_workers": {
          "type": "integer",
          "description": "Number of apprentice workers on site",
          "example": 4
        },
        "number_of_foreman_workers": {
          "type": "integer",
          "description": "Number of foremen on site",
          "example": 4
        },
        "number_of_journeyman_workers": {
          "type": "integer",
          "description": "Number of journeymen on site",
          "example": 4
        },
        "number_of_other_workers": {
          "type": "integer",
          "description": "Number of other workers on site",
          "example": 4
        },
        "other_hours": {
          "type": "string",
          "description": "Number of hours that the other worker were on site",
          "example": "5.0"
        },
        "position": {
          "type": "integer",
          "description": "Position in the list Daily Construction Reports",
          "example": 53253
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "vendor": {
          "$ref": "#\/definitions\/VendorCompact"
        },
        "trade": {
          "$ref": "#\/definitions\/Trade"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        }
      }
    },
    "InspectionLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "area": {
          "type": "string",
          "description": "Area within the specified location",
          "example": "Level 5"
        },
        "comments": {
          "type": "string",
          "description": "Additional comments",
          "example": "Inspection Log Comments"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "description": "Date of inspection",
          "format": "date",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "end_hour": {
          "type": "integer",
          "description": "Ending time of inspection - hour",
          "example": 10,
          "maximum": 23,
          "minimum": 0
        },
        "end_minute": {
          "type": "integer",
          "description": "Ending time of inspection - minute",
          "example": 0,
          "maximum": 59,
          "minimum": 0
        },
        "inspecting_entity": {
          "type": "string",
          "description": "Type of inspector performing the inspection",
          "example": "Safety"
        },
        "inspection_type": {
          "type": "string",
          "description": "Type of inspection performed",
          "example": "Safety"
        },
        "inspector_name": {
          "type": "string",
          "description": "Name of the inspector",
          "example": "Steven"
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded for the day",
          "example": 142143
        },
        "start_hour": {
          "type": "integer",
          "description": "Starting time of inspection - hour",
          "example": 10,
          "maximum": 23,
          "minimum": 0
        },
        "start_minute": {
          "type": "integer",
          "description": "Starting time of inspection - minute",
          "example": 0,
          "maximum": 59,
          "minimum": 0
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "location": {
          "$ref": "#\/definitions\/Location"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        }
      }
    },
    "DumpsterLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "comments": {
          "type": "string",
          "description": "Additional comments",
          "example": "Dumpster Log Comments"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "description": "Date of record",
          "format": "date",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded for the day",
          "example": 142143
        },
        "quantity_delivered": {
          "type": "integer",
          "description": "Number of dumpsters delivered on site",
          "example": 5
        },
        "quantity_removed": {
          "type": "integer",
          "description": "Number of dumpsters removed from site",
          "example": 2
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "vendor": {
          "$ref": "#\/definitions\/VendorCompact"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        }
      }
    },
    "WorkLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 333675
        },
        "comments": {
          "type": "string",
          "description": "Comments",
          "example": "Work Log Comments"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Format: YYYY-MM-DD Example: 2016-04-19",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "hourly_rate": {
          "type": "number",
          "format": "float",
          "description": "Scheduled work hourly rate",
          "example": 20
        },
        "hours": {
          "type": "number",
          "format": "float",
          "description": "Scheduled work hours",
          "example": 12
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded for the day",
          "example": 142143
        },
        "reimbursable": {
          "type": "boolean",
          "description": "If scheduled work is reimbursable",
          "example": true
        },
        "resource_name": {
          "type": "string",
          "description": "Name of the resource associated with the scheduled work",
          "example": "Alices Admin (Twenty Twelve Inc)"
        },
        "showed": {
          "type": "boolean",
          "description": "If scheduled worker kept the work log schedule",
          "example": true
        },
        "workers": {
          "type": "integer",
          "description": "Scheduled number of workers",
          "example": 6
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        },
        "scheduled_tasks": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/WorkLogTask"
          }
        }
      }
    },
    "CallLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "description": "Date that the call took place",
          "format": "date",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "subject_to": {
          "type": "string",
          "description": "Name of the person that received the call",
          "example": "Gino Briones (Procore)"
        },
        "subject_from": {
          "type": "string",
          "description": "Name of the person that called",
          "example": "Chris Admin (Procore Technologies)"
        },
        "description": {
          "type": "string",
          "description": "Details describing the call",
          "example": "Important Call"
        },
        "start_hour": {
          "type": "integer",
          "description": "Time when the call started - hour",
          "example": 10,
          "maximum": 23,
          "minimum": 0
        },
        "start_minute": {
          "type": "integer",
          "description": "Time when the call started - minute",
          "example": 15,
          "maximum": 59,
          "minimum": 0
        },
        "end_hour": {
          "type": "integer",
          "description": "Time when the call ended - hour",
          "example": 11,
          "maximum": 23,
          "minimum": 0
        },
        "end_minute": {
          "type": "integer",
          "description": "Time when the call ended - minute",
          "example": 15,
          "maximum": 59,
          "minimum": 0
        },
        "position": {
          "type": "integer",
          "description": "Position in the list of recorded calls for the day",
          "example": 142143
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        }
      }
    },
    "VisitorLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 333675
        },
        "begin_hour": {
          "type": "integer",
          "description": "Time of visitation - hour",
          "example": 12,
          "maximum": 23,
          "minimum": 0
        },
        "begin_minute": {
          "type": "integer",
          "description": "Time of visitation - hour",
          "example": 10,
          "maximum": 59,
          "minimum": 0
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Format: YYYY-MM-DD Example: 2016-04-19",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "details": {
          "type": "string",
          "description": "Details of visit",
          "example": "Visitor Log"
        },
        "end_hour": {
          "type": "integer",
          "description": "Time that the visitation ended - hour",
          "example": 14,
          "maximum": 23,
          "minimum": 0
        },
        "end_minute": {
          "type": "integer",
          "description": "Time that the visitation ended - minute",
          "example": 30,
          "maximum": 59,
          "minimum": 0
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded for the day",
          "example": 142143
        },
        "subject": {
          "type": "string",
          "example": "Elizabeth Cannon (1st Choice Glass Inc.)"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        }
      }
    },
    "AccidentLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "comments": {
          "type": "string",
          "description": "Additional information about the accident",
          "example": "There was an accident on the roof"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "description": "Date that the accident occurred",
          "format": "date",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "involved_name": {
          "type": "string",
          "description": "Name of the person involved in the accident",
          "example": "4"
        },
        "involved_company": {
          "type": "string",
          "description": "Name of the Company involved in the accident",
          "example": "Procore Technologies"
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded for the day",
          "example": 142143
        },
        "time_hour": {
          "type": "integer",
          "description": "Time of accident - hour",
          "example": 10,
          "maximum": 23,
          "minimum": 0
        },
        "time_minute": {
          "type": "integer",
          "description": "Time of accident - minute",
          "example": 15,
          "maximum": 59,
          "minimum": 0
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        }
      }
    },
    "SafetyViolationLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 333675
        },
        "comments": {
          "type": "string",
          "description": "Comments",
          "example": "No safety violations"
        },
        "compliance_due": {
          "type": "string",
          "description": "The date the compliance for the safety violation is due by",
          "format": "date",
          "example": "2016-06-20"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "issued_to": {
          "type": "string",
          "description": "Person who the safety violation was issued to",
          "example": "ACL Industries"
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded for the day",
          "example": 142143
        },
        "safety_notice": {
          "type": "string",
          "description": "Name\/number of the safety notice issued",
          "example": "Safety Notice"
        },
        "subject": {
          "type": "string",
          "description": "Reason for the safety violation",
          "example": "hard hats"
        },
        "time_hour": {
          "type": "integer",
          "description": "Time of safety violation - hour",
          "example": 12,
          "minimum": 0,
          "maximum": 23
        },
        "time_minute": {
          "description": "Time of safety violation - minute",
          "type": "integer",
          "example": 15,
          "minimum": 0,
          "maximum": 59
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "2016-04-19",
          "example": "2016-05-19"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        }
      }
    },
    "WasteLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 333675
        },
        "approximate_quantity": {
          "type": "integer",
          "description": "Waste log approximate quantity",
          "example": 5
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Format: YYYY-MM-DD Example: 2016-04-19",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Left over wood chips"
        },
        "disposal_location": {
          "type": "string",
          "description": "Waste disposal location",
          "example": "Dump Yard"
        },
        "material": {
          "type": "string",
          "description": "Type of waste disposed of",
          "example": "Waste material"
        },
        "method_of_disposal": {
          "type": "string",
          "description": "Method used to dispose of the waste",
          "example": "Truck"
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded for the day",
          "example": 142143
        },
        "time_hour": {
          "type": "integer",
          "description": "Time of waste disposal - hour",
          "example": 10,
          "maximum": 23,
          "minimum": 0
        },
        "time_minute": {
          "type": "integer",
          "description": "Time of waste disposal - minute",
          "example": 15,
          "maximum": 59,
          "minimum": 0
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "vendor": {
          "$ref": "#\/definitions\/VendorCompact"
        }
      }
    },
    "WeatherLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 20160101
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        },
        "average": {
          "type": "string",
          "description": "Average temperature for the workday",
          "example": 50
        },
        "calamity": {
          "type": "string",
          "description": "Type of calamity the jobsite was subject to",
          "example": "Fire"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Format: YYYY-MM-DD Example: 2016-04-19",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "is_weather_delay": {
          "type": "string",
          "description": "Weather delay status",
          "example": 1
        },
        "ground": {
          "type": "string",
          "description": "Ground condition",
          "example": "Dry"
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded for the day",
          "example": 1
        },
        "precipitation": {
          "type": "string",
          "description": "Precipitation conditions",
          "example": true
        },
        "sky": {
          "type": "string",
          "description": "Sky condition",
          "example": "Clear"
        },
        "temperature": {
          "type": "string",
          "description": "Weather temperature",
          "example": "Hot"
        },
        "wind": {
          "type": "string",
          "description": "Wind condition",
          "example": "Calm"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        }
      }
    },
    "PlanRevisionLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "category": {
          "type": "string",
          "description": "Category of discipline that appears on the revision",
          "example": "Plan Revision category"
        },
        "comments": {
          "type": "string",
          "description": "Additional comments",
          "example": "Plan Revision comments"
        },
        "date": {
          "type": "string",
          "description": "Date of record",
          "format": "date",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "plan_number": {
          "type": "string",
          "description": "Number that appears on the plan submitted",
          "example": "3plan#"
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded for the day",
          "example": 142143
        },
        "revision": {
          "type": "string",
          "description": "Revision number",
          "example": "Revision"
        },
        "title": {
          "type": "string",
          "description": "Title of the plans",
          "example": "Plan Revision title"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/ProstoreFile"
          }
        }
      }
    },
    "ProductivityLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 333675
        },
        "company": {
          "type": "string",
          "description": "Name of Company",
          "example": "World Concrete"
        },
        "contract": {
          "type": "string",
          "description": "Approved Commitment Contract title",
          "example": "PO-007"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "date": {
          "type": "string",
          "description": "Date of record",
          "format": "date",
          "example": "2016-05-19"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "line_item_id": {
          "type": "integer",
          "description": "ID of the Line Item from the approved Commitment Contract",
          "example": 173890
        },
        "line_item_description": {
          "type": "string",
          "description": "Description of the Line Item",
          "example": "#1 -  - 0.0 Ea"
        },
        "line_item_holder": {
          "type": "object",
          "description": "Object that the Line Item belongs to (WorkOrderContract, PurchaseOrderContract, PotentialChangeOrder)",
          "properties": {
            "id": {
              "type": "integer",
              "description": "ID",
              "example": 160586
            },
            "title": {
              "type": "string",
              "description": "Title",
              "example": "SC-008 - Awarded Contract for Procore Construction"
            },
            "type": {
              "type": "string",
              "description": "The type of object that the Line Item belongs to",
              "example": "PurchaseOrderContract"
            }
          }
        },
        "notes": {
          "type": "string",
          "description": "Additional notes",
          "example": "Productivity 50% complete"
        },
        "position": {
          "type": "integer",
          "description": "Order in which this entry was recorded",
          "example": 142
        },
        "previously_delivered": {
          "type": "string",
          "description": "Number of materials that were previously delivered on site",
          "example": 8
        },
        "previously_used": {
          "type": "string",
          "description": "Number of materials previously put in place on site",
          "example": 4
        },
        "quantity_delivered": {
          "type": "string",
          "description": "Number of materials delivered on site",
          "example": 5
        },
        "quantity_used": {
          "type": "string",
          "description": "Number of materials put in place on site",
          "example": 4
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "created_by": {
          "$ref": "#\/definitions\/User"
        }
      }
    },
    "SpecificationSectionCompact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "number": {
          "type": "string",
          "description": "Number"
        }
      }
    },
    "DirectCostItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 3
        },
        "attachments_count": {
          "type": "integer",
          "description": "Attachments count",
          "example": 0
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Home Depot Purchase"
        },
        "direct_cost_type": {
          "type": "string",
          "description": "Type",
          "enum": [
            "invoice",
            "expense",
            "payroll"
          ],
          "example": "invoice"
        },
        "employee": {
          "type": "object",
          "description": "Employee tied to the Direct Cost Item",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Employee ID",
              "example": 5
            },
            "name": {
              "type": "string",
              "description": "Employee name",
              "example": "Bob the Builder"
            }
          }
        },
        "invoice_number": {
          "type": "string",
          "description": "Unique identifier for a Direct Cost Item of type invoice",
          "example": "ab-3456"
        },
        "direct_cost_date": {
          "type": "string",
          "format": "date",
          "description": "Date",
          "example": "2014-10-16"
        },
        "origin_data": {
          "type": "string",
          "description": "Origin Data",
          "example": "OD-2398273424"
        },
        "origin_id": {
          "type": "string",
          "description": "Origin ID",
          "example": "px-1990"
        },
        "grand_total": {
          "type": "string",
          "description": "Grand total",
          "example": "0.0"
        },
        "line_items_count": {
          "type": "integer",
          "description": "Line Items count",
          "example": 0
        },
        "payment_date": {
          "type": "string",
          "format": "date",
          "description": "Payment Date",
          "example": "2014-12-16"
        },
        "received_date": {
          "type": "string",
          "format": "date",
          "description": "Received Date",
          "example": "2014-11-16"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "draft",
            "pending",
            "revise_and_resubmit",
            "approved"
          ],
          "example": "pending"
        },
        "terms": {
          "type": "string",
          "description": "The agreed upon Terms for the date of payment",
          "example": "Net 30"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "vendor": {
          "type": "object",
          "description": "Vendor",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Vendor ID",
              "example": 8
            },
            "name": {
              "type": "string",
              "description": "Vendor name",
              "example": "Steves Plumbing and Hardware"
            }
          }
        }
      }
    },
    "DirectCostItemIndex": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 1
        },
        "amount": {
          "type": "string",
          "description": "Grand total",
          "example": "0.0"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at",
          "example": "2012-10-23T21:39:40.000Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted at",
          "example": "2017-07-29T21:39:40.000Z"
        },
        "description": {
          "type": "string",
          "description": "Description",
          "example": "Home Depot Purchase"
        },
        "direct_cost_type": {
          "type": "string",
          "description": "Type",
          "enum": [
            "invoice",
            "expense",
            "payroll"
          ],
          "example": "invoice"
        },
        "direct_cost_date": {
          "type": "string",
          "format": "date",
          "description": "Date",
          "example": "2016-12-14"
        },
        "grand_total": {
          "type": "string",
          "description": "Grand total",
          "example": "0.0"
        },
        "invoice_number": {
          "type": "string",
          "description": "Unique identifier for a Direct Cost Item of type invoice",
          "example": "ab-3456"
        },
        "origin_data": {
          "type": "string",
          "description": "Origin Data",
          "example": "OD-2398273424"
        },
        "origin_id": {
          "type": "string",
          "description": "Origin ID",
          "example": "px-1990"
        },
        "payment_date": {
          "type": "string",
          "format": "date",
          "description": "Payment Date",
          "example": "2014-12-16"
        },
        "received_date": {
          "type": "string",
          "format": "date",
          "description": "Received Date",
          "example": "2014-11-16"
        },
        "status": {
          "type": "string",
          "description": "Status",
          "enum": [
            "draft",
            "pending",
            "revise_and_resubmit",
            "approved"
          ],
          "example": "pending"
        },
        "terms": {
          "type": "string",
          "description": "The agreed upon Terms for the date of payment",
          "example": "Net 30"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at",
          "example": "2012-10-24T21:39:40.000Z"
        },
        "vendor": {
          "type": "string",
          "description": "Vendor name",
          "example": "Steves Plumbing and Hardware"
        },
        "vendor_id": {
          "type": "integer",
          "description": "Vendor ID",
          "example": 1
        }
      }
    },
    "DirectCostItemSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/DirectCostItem"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "DirectCostLineItemSyncError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#\/definitions\/LineItem"
        },
        {
          "$ref": "#\/definitions\/ActiveRecordError"
        }
      ]
    },
    "SpecificationUpload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "issued_date": {
          "type": "string",
          "format": "date"
        },
        "received_date": {
          "type": "string",
          "format": "date"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "SpecificationSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "position": {
          "type": "integer"
        }
      }
    },
    "PermissionTemplates": {
      "type": "array",
      "items": {
        "$ref": "#\/definitions\/PermissionTemplate"
      }
    },
    "PermissionTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the Permission Template",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "The name of the Permission Template",
          "example": "General Contractor"
        },
        "domain_access_level": {
          "type": "object",
          "description": "user access levels for active tools"
        }
      }
    },
    "SubJob": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 3483483
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Floor 2"
        },
        "code": {
          "type": "string",
          "description": "Unique code in the scope of a Project",
          "example": 18
        },
        "project_id": {
          "type": "integer",
          "description": "Project ID",
          "example": 403030
        },
        "created_at": {
          "type": "string",
          "description": "Created at",
          "example": "2017-08-14T21:39:40.000Z"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated at",
          "example": "2017-08-15T21:39:40.000Z"
        }
      }
    },
    "PunchListAssigneeOption": {
      "title": "PunchListAssigneeOption",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 160586
        },
        "login": {
          "type": "string",
          "description": "Email",
          "example": "gino.boli@procore.com"
        },
        "name": {
          "type": "string",
          "description": "Name",
          "example": "Gino Standard"
        }
      }
    },
    "StickyFilters": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "example": {
        "submittal_log": {
          "status": [
            "2141"
          ]
        },
        "budgeting": {
          "view": "detail"
        }
      }
    },
    "StickyFilter": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "example": {
        "status": [
          "2141"
        ],
        "location_id": [
          "917832"
        ]
      }
    },
    "Tools": {
      "type": "array",
      "items": {
        "$ref": "#\/definitions\/Tool"
      }
    },
    "Tool": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the Tool",
          "example": 1
        },
        "engine_name": {
          "type": "string",
          "description": "The name of the Tool engine",
          "example": "rfi"
        },
        "is_active": {
          "type": "boolean",
          "description": "Indicates whether the tool is currently active",
          "example": true
        },
        "position": {
          "type": "integer",
          "description": "The ordering position of the Tool",
          "example": 3
        },
        "required": {
          "type": "boolean",
          "description": "Indicates whether the tool must be active",
          "example": false
        }
      }
    },
    "WorkLogTask": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 100884
        },
        "work_log_id": {
          "type": "integer",
          "example": 28652
        },
        "task_name": {
          "type": "string",
          "example": "Concrete Pre-Pour"
        },
        "task_percentage": {
          "type": "integer",
          "example": 50
        },
        "task_id": {
          "type": "integer",
          "example": 198325
        },
        "task_row_number": {
          "type": "integer",
          "example": 987654
        }
      }
    },
    "Transmittal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID",
          "example": 999
        },
        "number": {
          "type": "string",
          "description": "Number",
          "example": 109
        },
        "subject": {
          "type": "string",
          "description": "Subject",
          "example": "Attic Stock - Paint"
        }
      }
    },
    "TransmittalNormal": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "object",
              "description": "Actions as noted",
              "example": {
                "0": "Out for Signature",
                "1": "Approved as Submitted",
                "2": "Approved as Noted",
                "3": "Submit",
                "4": "Resubmitted",
                "5": "Returned",
                "6": "Returned for Corrections",
                "7": "Resubmit",
                "8": "Due By",
                "9": "Received",
                "10": "Received as Noted",
                "11": "Sent date"
              }
            },
            "created_at": {
              "type": "string",
              "description": "Date created",
              "format": "date-time",
              "example": "2016-10-25T17:53:35.000Z"
            },
            "email_sent_date": {
              "type": "string",
              "description": "Email sent date",
              "format": "date",
              "example": "2016-08-22T00:00:00.000Z"
            },
            "to_recipients": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            }
          }
        },
        {
          "$ref": "#\/definitions\/Transmittal"
        }
      ]
    },
    "TransmittalRecycled": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "deleted_at": {
              "type": "string",
              "description": "Time deleted",
              "format": "date-time",
              "example": "2016-10-25T17:53:35.000Z"
            }
          }
        },
        {
          "$ref": "#\/definitions\/TransmittalNormal"
        }
      ]
    },
    "TransmittalExtended": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "sent_method": {
              "type": "string",
              "description": "Sent method",
              "enum": [
                "Attached",
                "Under Separate Cover"
              ]
            },
            "via_method": {
              "type": "string",
              "description": "If sent_method is 'Under Separate Cover', describes the separate cover method",
              "enum": [
                "Email",
                "US Mail",
                "Hand Delivery",
                "FedEx",
                "UPS",
                "DHL",
                "Express Mail",
                "Fax",
                "Other"
              ]
            },
            "via_other": {
              "type": "string",
              "description": "Describes via_method 'Other' method",
              "example": "Carrier pigeon"
            },
            "private": {
              "type": "boolean",
              "description": "Whether transmittal is private",
              "example": false
            },
            "reasons": {
              "type": "object",
              "description": "Transmittal reasons (Submitted For)",
              "example": {
                "1": "Approval",
                "2": "Your Use",
                "3": "As Requested",
                "4": "Review and Comment",
                "5": "Further Processing"
              }
            },
            "notes": {
              "type": "string",
              "description": "Notes\/comments"
            },
            "due_date": {
              "type": "string",
              "description": "Due date",
              "format": "date",
              "example": "2016-10-31T00:00:00.000Z"
            },
            "cc_recipients": {
              "type": "array",
              "items": {
                "$ref": "#\/definitions\/User"
              }
            }
          }
        },
        {
          "$ref": "#\/definitions\/TransmittalNormal"
        }
      ]
    },
    "TransmittalItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "attachment_type": {
          "type": "string",
          "description": "Attachment Type",
          "enum": [
            "Attic Stock",
            "CDs",
            "Commitment Contract",
            "Communication",
            "Document",
            "Other",
            "Plans",
            "Potential Change Order",
            "Prime Contract",
            "Prints",
            "Punchlist Item",
            "Purchase Order Contract",
            "RFI",
            "Samples",
            "Shop Drawings",
            "Submittal Log",
            "Submittal Package"
          ]
        }
      }
    },
    "TransmittalItemNormal": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "copies": {
              "type": "integer",
              "description": "Number of copies",
              "example": 2
            },
            "created_at": {
              "type": "string",
              "description": "Created date",
              "format": "date",
              "example": "2016-10-15T00:00:00.000Z"
            },
            "date": {
              "type": "string",
              "description": "Date",
              "format": "date",
              "example": "2016-10-15T00:00:00.000Z"
            },
            "description": {
              "type": "string",
              "description": "Description"
            },
            "item": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID for the item if it is an associated Procore record"
                },
                "type": {
                  "type": "string",
                  "description": "The internal Procore record type, if applicable",
                  "enum": [
                    "Communication",
                    "PotentialChangeOrder",
                    "PrimeContract",
                    "ProstoreFile",
                    "PunchItem",
                    "PurchaseOrderContract",
                    "Rfi::Header",
                    "SubmittalLog",
                    "SubmittalPackage",
                    "WorkOrderContract"
                  ]
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date for the related item",
                  "example": "2016-10-25T17:53:35.000Z"
                },
                "url": {
                  "type": "string",
                  "description": "The relative URL for the related resource if available. If this is an attachment, it will be the URL to download the attachment. If it is a procore record, it will be the link the resource's API endpoint.\n"
                }
              }
            }
          }
        },
        {
          "$ref": "#\/definitions\/TransmittalItem"
        }
      ]
    },
    "TransmittalItemExtended": {
      "allOf": [
        {
          "$ref": "#\/definitions\/TransmittalItemNormal"
        }
      ]
    },
    "ProjectConfigurationExtended": {
      "type": "object",
      "example": {
        "all_punch_items_private_by_default": false,
        "all_rfis_private_by_default": true,
        "all_transmittals_private_by_default": false,
        "allow_private_rfis": true,
        "autocalculate_budget_forecasts_by_default": true,
        "checklist_private_by_default": true,
        "default_manpower_log_hours": 8,
        "default_meeting_format": "meeting_categories",
        "disable_dynamic_location_creation": true,
        "documents_private_by_default": false,
        "drawing_revisions_ordered_by_letter_first": true,
        "drawings_by_area": false,
        "enable_change_reason_select": true,
        "enable_deletion_of_multiple_documents": false,
        "enable_measurement_tools": false,
        "enable_pco_real_time_as_builts": false,
        "enable_related_to_in_daily_log": false,
        "enable_rfi_real_time_as_builts": true,
        "enable_rfq": false,
        "enable_sub_jobs": true,
        "hide_national_weather_data": false,
        "image_category_add_new_at_top": true,
        "meeting_attendees_have_advanced_settings": false,
        "meeting_topics_have_descriptions": true,
        "meetings_custom_textarea_1_label": "",
        "meetings_custom_textfield_1_label": "",
        "meetings_have_cost_codes": false,
        "meetings_have_old_and_new": false,
        "meetings_private_by_default": true,
        "numbers_submittals_by_spec_section": true,
        "observations_days_due_default": 7,
        "observations_private_by_default": true,
        "punch_item_days_due_default": 3,
        "qr_codes_enabled": true,
        "rfi_due_days_default": 3,
        "rfi_only_allow_drafts_for_standards": false,
        "rfi_only_show_official_responses": true,
        "show_created_by_on_logs": false,
        "sort_submittal_package_list_asc": true,
        "sort_submittal_package_list_title_asc": true,
        "sort_submittals_number_ascending": false,
        "standards_can_delete_public_markup": false,
        "submittal_days_due_default": 14,
        "submittal_log_default_internal_review_time": 14,
        "submittal_log_default_design_team_review_time": 14,
        "submittal_logs_custom_textarea_1_label": "",
        "submittal_logs_custom_textfield_1_label": "",
        "submittal_logs_private_by_default": false
      }
    }
  },
  "parameters": {
    "ProjectId": {
      "name": "project_id",
      "in": "query",
      "type": "integer",
      "required": true,
      "description": "The ID of the Project"
    },
    "FolderCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "folder"
        ],
        "properties": {
          "folder": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "parent_id": {
                "type": "integer",
                "description": "The ID of the parent folder to create the folder in. If not set the folder will be created under the root folder.",
                "example": 12
              },
              "name": {
                "type": "string",
                "description": "The Name of the folder",
                "example": "test_folder"
              },
              "is_tracked": {
                "type": "boolean",
                "description": "Status if a folder should be tracked (true\/false)",
                "default": false,
                "example": false
              },
              "explicit_permissions": {
                "type": "boolean",
                "description": "Set folder to private (true\/false)",
                "example": false
              }
            }
          }
        }
      }
    },
    "FolderUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "folder"
        ],
        "properties": {
          "folder": {
            "type": "object",
            "properties": {
              "parent_id": {
                "type": "integer",
                "description": "The ID of the parent folder to move the folder to.",
                "example": 12
              },
              "name": {
                "type": "string",
                "description": "The Name of the folder",
                "example": "test_folder"
              },
              "is_tracked": {
                "type": "boolean",
                "description": "Status if a folder should be tracked (true\/false)",
                "default": false,
                "example": false
              },
              "explicit_permissions": {
                "type": "boolean",
                "description": "Set folder to private (true\/false)",
                "example": false
              }
            }
          }
        }
      }
    },
    "FolderBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "folder"
        ],
        "properties": {
          "folder": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "parent_id": {
                "type": "integer",
                "description": "The ID of the parent folder to create the folder in. If not set the folder will be created under the root folder.",
                "example": 12
              },
              "name": {
                "type": "string",
                "description": "The Name of the folder",
                "example": "test_folder"
              },
              "is_tracked": {
                "type": "boolean",
                "description": "Status if a folder should be tracked (true\/false)",
                "default": false,
                "example": false
              },
              "explicit_permissions": {
                "type": "boolean",
                "description": "Set folder to private (true\/false)",
                "example": false
              }
            }
          }
        }
      }
    },
    "FileCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "parent_id": {
                "type": "integer",
                "description": "The ID of the parent folder to create the file in. If not set the file will be created under the root folder.",
                "example": 12
              },
              "name": {
                "type": "string",
                "description": "The Name of the file",
                "example": "test_file.pdf"
              },
              "is_tracked": {
                "type": "boolean",
                "description": "Status if a file should be tracked (true\/false)",
                "default": false,
                "example": false
              },
              "explicit_permissions": {
                "type": "boolean",
                "description": "Set file to private (true\/false)",
                "example": false
              },
              "description": {
                "type": "string",
                "description": "A description of the file",
                "example": "This file is good"
              },
              "data": {
                "type": "string",
                "description": "Not actually a string. Accepts file contents, path of file, stream data of the file"
              }
            }
          }
        }
      }
    },
    "FileUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "properties": {
          "file": {
            "type": "object",
            "properties": {
              "parent_id": {
                "type": "integer",
                "description": "The ID of the parent folder to move the file to",
                "example": 12
              },
              "name": {
                "type": "string",
                "description": "The Name of the file",
                "example": "test_folder"
              },
              "is_tracked": {
                "type": "boolean",
                "description": "Status if a file should be tracked (true\/false)",
                "default": false,
                "example": false
              },
              "explicit_permissions": {
                "type": "boolean",
                "description": "Set file to private (true\/false)",
                "example": false
              },
              "description": {
                "type": "string",
                "description": "A description of the file",
                "example": "This file is good"
              },
              "data": {
                "type": "string",
                "description": "Not actually a string. Accepts file contents, path of file, stream data of the file"
              }
            }
          }
        }
      }
    },
    "FileVersionBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "file_version"
        ],
        "properties": {
          "file_version": {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "notes": {
                "type": "string",
                "description": "Notes about the File Version",
                "example": "This file version is good"
              },
              "data": {
                "type": "string",
                "description": "Not actually a string. Accepts file contents, path of file, stream data of the file"
              }
            }
          }
        }
      }
    },
    "ProjectTypeBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_type"
        ],
        "properties": {
          "project_type": {
            "title": "ProjectType",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The Name of the Project Type"
              }
            }
          }
        },
        "example": {
          "project_type": {
            "name": "Project Type A"
          }
        }
      }
    },
    "ProjectStageBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_stage"
        ],
        "properties": {
          "project_stage": {
            "title": "ProjectStage",
            "type": "object",
            "properties": {
              "is_bidding_stage": {
                "type": "boolean",
                "description": "The Bidding Stage status of the Project Stage",
                "default": false
              },
              "name": {
                "type": "string",
                "description": "The Name of the Project Stage"
              }
            }
          }
        },
        "example": {
          "project_stage": {
            "name": "Project Stage A",
            "is_bidding_stage": false
          }
        }
      }
    },
    "BidBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "properties": {
          "bid": {
            "type": "object",
            "properties": {
              "lump_sum_amount": {
                "type": "number",
                "description": "Lump sum (overall) amount",
                "format": "float",
                "example": 10000
              },
              "bidder_comments": {
                "type": "string",
                "description": "Comments",
                "example": "Tupac knows how to keep his head up"
              },
              "is_bidder_committed": {
                "type": "boolean",
                "description": "Bidder committed",
                "example": true
              },
              "submitted": {
                "type": "boolean",
                "description": "Vendor submitted Bid",
                "example": true,
                "default": false
              }
            }
          }
        }
      }
    },
    "ChangeEventBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "required": [
          "change_event",
          "project_id"
        ],
        "properties": {
          "project_id": {
            "description": "Project ID",
            "type": "integer",
            "example": 345756
          },
          "change_event": {
            "required": [
              "change_event_status_id",
              "event_scope",
              "event_type"
            ],
            "type": "object",
            "title": "Change Event",
            "properties": {
              "title": {
                "type": "string",
                "description": "Title",
                "example": "Toilet replacement"
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": "A14"
              },
              "status": {
                "type": "string",
                "description": "DEPRECATED: Use :change_event_status_id.\nStatus\n",
                "enum": [
                  "open",
                  "closed"
                ]
              },
              "change_event_status_id": {
                "type": "integer",
                "description": "Change Event Status ID",
                "example": 345998
              },
              "event_scope": {
                "type": "string",
                "description": "Event Scope",
                "example": "in_scope",
                "enum": [
                  "tbd",
                  "in_scope",
                  "out_of_scope"
                ]
              },
              "event_type": {
                "type": "string",
                "description": "Event Type",
                "example": "tbd",
                "enum": [
                  "tbd",
                  "allowance",
                  "contingency",
                  "owner_change",
                  "transfer"
                ]
              },
              "rfi_id": {
                "type": "integer",
                "description": "RFI ID",
                "example": 496787
              },
              "change_event_line_items_attributes": {
                "type": "array",
                "description": "Change Event Line Items",
                "items": {
                  "type": "object",
                  "title": "Change Event Line Item",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "ID",
                      "example": 592648
                    },
                    "description": {
                      "type": "string",
                      "description": "Description",
                      "example": "Add caulk to bathtub base"
                    },
                    "estimated_cost_amount": {
                      "type": "number",
                      "format": "float",
                      "description": "Estimated cost amount",
                      "example": "17705.0"
                    },
                    "line_item_type_id": {
                      "type": "integer",
                      "description": "Line Item Type ID",
                      "example": 657393
                    },
                    "cost_code_id": {
                      "type": "integer",
                      "description": "Cost Code ID",
                      "example": 32940
                    }
                  }
                }
              }
            }
          },
          "attachments": {
            "type": "array",
            "description": "Change Event Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "ChangeOrderPackageBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "change_order",
          "project_id",
          "contract_id"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 345357
          },
          "contract_id": {
            "type": "integer",
            "description": "Contract ID",
            "example": 64545
          },
          "change_order": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status",
                "example": "draft",
                "enum": [
                  "draft",
                  "not_pricing",
                  "pricing",
                  "pending",
                  "revised",
                  "proceeding",
                  "not_proceeding",
                  "no_charge",
                  "approved",
                  "rejected",
                  "void"
                ]
              },
              "title": {
                "type": "string",
                "description": "Title",
                "example": "Additional Time & Materials"
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Additional Time & Materials for October"
              },
              "grand_total": {
                "type": "string",
                "description": "Total including markup",
                "example": 23474
              },
              "schedule_impact_amount": {
                "type": "integer",
                "description": "Schedule impact in days",
                "example": 5
              },
              "paid_date": {
                "type": "string",
                "format": "date",
                "description": "Paid date",
                "example": "2016-10-22T00:00:00.000Z"
              },
              "invoiced_date": {
                "type": "string",
                "format": "date",
                "description": "Invoiced date",
                "example": "2016-10-26T00:00:00.000Z"
              },
              "due_date": {
                "type": "string",
                "format": "date",
                "description": "Due date",
                "example": "2016-10-23T00:00:00.000Z"
              }
            }
          }
        }
      }
    },
    "ChangeOrderRequestBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "change_order",
          "project_id",
          "contract_id"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 38276
          },
          "contract_id": {
            "type": "integer",
            "description": "Contract ID",
            "example": 957294
          },
          "change_order": {
            "$ref": "#\/definitions\/ChangeOrderRequestBody"
          }
        }
      }
    },
    "ChangeOrderRequestSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Change Order Request Sync",
        "type": "object",
        "required": [
          "updates"
        ],
        "properties": {
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#\/definitions\/ChangeOrderRequestBody"
            }
          }
        }
      }
    },
    "ContractPaymentBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "contract_id",
          "contract_payment"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 66005
          },
          "contract_id": {
            "type": "integer",
            "description": "Contract ID",
            "example": 85302
          },
          "contract_payment": {
            "title": "Contract Payment",
            "type": "object",
            "description": "Contract Payment object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Payment date",
                "example": "2015-09-29"
              },
              "invoice_number": {
                "type": "string",
                "description": "Invoice number",
                "example": "Invoice 123"
              },
              "check_number": {
                "type": "integer",
                "description": "Check number",
                "example": 93759372
              },
              "invoice_date": {
                "type": "string",
                "format": "date",
                "description": "Invoice date",
                "example": "2015-09-20"
              },
              "draw_request_number": {
                "type": "integer",
                "description": "Draw Request number",
                "example": 5
              },
              "notes": {
                "type": "string",
                "description": "Associated notes",
                "example": "January Payment"
              },
              "payment_number": {
                "type": "integer",
                "description": "Payment number",
                "example": 5
              },
              "amount": {
                "type": "string",
                "description": "Payment amount",
                "example": "1000000.0"
              }
            }
          }
        }
      }
    },
    "CostCodeBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "cost_code"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 12345
          },
          "sub_job_id": {
            "type": "integer",
            "description": "Sub Job ID",
            "example": 12345
          },
          "cost_code": {
            "title": "CostCode",
            "type": "object",
            "description": "Cost Code object",
            "required": [
              "name",
              "code"
            ],
            "properties": {
              "position": {
                "type": "integer",
                "description": "Position",
                "example": 1
              },
              "code": {
                "type": "string",
                "description": "Cost code, not including parent prefix. e.g., for cost code \"02-300\", the value of this field should be \"300\".",
                "example": "300"
              },
              "name": {
                "type": "string",
                "description": "Name",
                "example": "Site Work"
              },
              "origin_data": {
                "type": "string",
                "description": "Origin Data",
                "example": "OD-239238"
              },
              "origin_id": {
                "type": "integer",
                "description": "Origin ID",
                "example": 3497237
              },
              "parent_id": {
                "type": "integer",
                "description": "Parent ID",
                "example": 12345
              }
            }
          }
        }
      }
    },
    "CostCodeSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "CostCodeSyncBody",
        "type": "object",
        "required": [
          "updates"
        ],
        "properties": {
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "LineItem",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the Cost Code",
                  "example": 348330
                },
                "sub_job_id": {
                  "type": "integer",
                  "description": "The ID of the Sub Job the Cost Code belongs to",
                  "example": 874637
                },
                "position": {
                  "type": "integer",
                  "description": "Position",
                  "example": 1
                },
                "code": {
                  "type": "string",
                  "description": "Cost code, not including parent prefix. e.g., for cost code \"02-300\", the value of this field should be \"300\".",
                  "example": "300"
                },
                "name": {
                  "type": "string",
                  "description": "Name",
                  "example": "Site Work"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Origin Data",
                  "example": "OD-239238"
                },
                "origin_id": {
                  "type": "integer",
                  "description": "Origin ID",
                  "example": 3497237
                },
                "parent_id": {
                  "type": "integer",
                  "description": "Parent ID",
                  "example": 12345
                }
              }
            }
          }
        }
      }
    },
    "StandardCostCodeListBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "company_id",
          "standard_cost_code_list"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "description": "Company ID",
            "example": 12345
          },
          "standard_cost_code_list": {
            "title": "Standard Cost Code List",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name",
                "example": "Client X Cost Codes"
              }
            }
          }
        }
      }
    },
    "DepartmentBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "department"
        ],
        "properties": {
          "department": {
            "title": "Department",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Department name"
              }
            }
          }
        },
        "example": {
          "department": {
            "name": "Department A"
          }
        }
      }
    },
    "DrawRequestBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "draw_request"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 55001
          },
          "draw_request": {
            "title": "DrawRequest",
            "type": "object",
            "description": "Draw Request",
            "properties": {
              "period_start": {
                "type": "string",
                "format": "date",
                "description": "Period start date",
                "example": "2013-10-01T00:00:00.000Z"
              },
              "period_end": {
                "type": "string",
                "format": "date",
                "description": "Period end date",
                "example": "2013-10-31T00:00:00.000Z"
              },
              "billing_date": {
                "type": "string",
                "format": "date",
                "description": "Billing date",
                "example": "2013-10-31T00:00:00.000Z"
              },
              "invoice_number": {
                "type": "string",
                "description": "Invoice number",
                "example": "ABC-1234"
              },
              "status": {
                "type": "string",
                "enum": [
                  "draft",
                  "under_review",
                  "revise_and_resubmit",
                  "approved"
                ],
                "description": "Status",
                "example": "approved"
              }
            }
          }
        }
      }
    },
    "DrawRequestContractItemBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "draw_request_contract_item"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 513526
          },
          "draw_request_contract_item": {
            "title": "DrawRequestContractItem",
            "type": "object",
            "description": "Draw Request Contract Item object",
            "properties": {
              "work_completed_this_period": {
                "type": "string",
                "description": "The amount of work completed this period",
                "example": 0
              },
              "materials_presently_stored": {
                "type": "string",
                "description": "The amount of materials presently stored",
                "example": 0
              },
              "work_completed_retainage_percent_this_period": {
                "type": "string",
                "description": "Work completed retainage percent this period",
                "example": 10
              },
              "materials_stored_retainage_percent_this_period": {
                "type": "string",
                "description": "Materials stored retainage percent this period",
                "example": 10
              },
              "work_completed_retainage_released_this_period": {
                "type": "string",
                "description": "The amount of work completed retainage released this period",
                "example": 0
              },
              "materials_stored_retainage_released_this_period": {
                "type": "string",
                "description": "The amount of materials stored retainage released this period",
                "example": 0
              }
            }
          }
        }
      }
    },
    "ImageCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "image": {
            "title": "Image",
            "type": "object",
            "required": [
              "data",
              "image_category_id"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The Name of the Image",
                "example": "image.png"
              },
              "private": {
                "type": "boolean",
                "description": "The Private status of the Image. Defaults to a project configuration.",
                "example": false
              },
              "provider_type": {
                "type": "string",
                "description": "Provider type. Currently supports only `MarkupLayer`, and should only be used when adding an Image to markup.",
                "example": "MarkupLayer"
              },
              "provider_id": {
                "type": "integer",
                "description": "Provider ID. Currently supports only MarkupLayer IDs, and should only be used when adding an Image to markup.",
                "example": 12
              },
              "data": {
                "type": "string",
                "description": "Not actually a string. Accepts file contents, path of file, stream data of the file"
              },
              "source": {
                "type": "string",
                "description": "Image source",
                "example": "Image from API"
              },
              "description": {
                "type": "string",
                "description": "Image description",
                "example": "This is a cool image"
              },
              "image_category_id": {
                "type": "integer",
                "description": "Image Category ID",
                "example": 2
              },
              "location_id": {
                "type": "integer",
                "description": "Image Location ID",
                "example": 13
              }
            }
          }
        }
      }
    },
    "ImageUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "image": {
            "title": "Image",
            "type": "object",
            "properties": {
              "private": {
                "type": "boolean",
                "description": "The Private status of the Image. Defaults to a project configuration.",
                "example": false
              },
              "description": {
                "type": "string",
                "description": "Image description",
                "example": "This is a cool image"
              },
              "image_category_id": {
                "type": "integer",
                "description": "Image Category ID to move the Image to",
                "example": 2
              },
              "location_id": {
                "type": "integer",
                "description": "Image Location ID",
                "example": 13
              }
            }
          }
        }
      }
    },
    "ImageCategoryBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "image_category"
        ],
        "properties": {
          "image_category": {
            "title": "ImageCategory",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The Name of the Image Category",
                "example": "1\/1\/17 album"
              },
              "private": {
                "type": "boolean",
                "description": "The Private status of the Image Category",
                "default": false,
                "example": false
              }
            }
          }
        }
      }
    },
    "InsuranceBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "insurance"
        ],
        "properties": {
          "insurance": {
            "type": "object",
            "title": "Insurance",
            "properties": {
              "effective_date": {
                "type": "string",
                "format": "date",
                "description": "Effective date",
                "example": "2015-03-03T00:00:00.000Z"
              },
              "enable_expired_insurance_notifications": {
                "type": "boolean",
                "description": "Enable\/Disable expired insurance notifications",
                "default": true
              },
              "exempt": {
                "type": "boolean",
                "description": "Exempt status",
                "example": false
              },
              "expiration_date": {
                "type": "string",
                "format": "date",
                "description": "Expiration date",
                "example": "2016-03-02T00:00:00.000Z"
              },
              "info_received": {
                "type": "boolean",
                "description": "Information received (or not)",
                "example": false
              },
              "insurance_type": {
                "type": "string",
                "description": "Insurance type",
                "example": "General Liability"
              },
              "limit": {
                "type": "string",
                "description": "Limit",
                "example": 1000000
              },
              "name": {
                "type": "string",
                "description": "Provider name",
                "example": "GL Insurance Inc."
              },
              "notes": {
                "type": "string",
                "description": "Notes",
                "example": "Meets minimum requirements"
              },
              "policy_number": {
                "type": "string",
                "description": "Policy number",
                "example": "12345GL"
              },
              "status": {
                "type": "string",
                "enum": [
                  "compliant",
                  "compliant_in_progress",
                  "expired",
                  "non_compliant",
                  "non_compliant_in_progress",
                  "undecided",
                  "unregistered"
                ],
                "description": "Status",
                "example": "compliant"
              },
              "vendor_id": {
                "type": "integer",
                "description": "Vendor ID",
                "example": 2627684
              }
            }
          }
        }
      }
    },
    "VendorInsuranceBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "insurance"
        ],
        "properties": {
          "insurance": {
            "type": "object",
            "title": "Insurance",
            "properties": {
              "effective_date": {
                "type": "string",
                "format": "date",
                "description": "Effective date",
                "example": "2015-03-03T00:00:00.000Z"
              },
              "enable_expired_insurance_notifications": {
                "type": "boolean",
                "description": "Enable\/Disable expired insurance notifications",
                "default": true
              },
              "exempt": {
                "type": "boolean",
                "description": "Exempt status",
                "example": false
              },
              "expiration_date": {
                "type": "string",
                "format": "date",
                "description": "Expiration date",
                "example": "2016-03-02T00:00:00.000Z"
              },
              "info_received": {
                "type": "boolean",
                "description": "Information received (or not)",
                "example": false
              },
              "insurance_type": {
                "type": "string",
                "description": "Insurance type",
                "example": "General Liability"
              },
              "limit": {
                "type": "string",
                "description": "Limit",
                "example": 1000000
              },
              "name": {
                "type": "string",
                "description": "Provider name",
                "example": "GL Insurance Inc."
              },
              "notes": {
                "type": "string",
                "description": "Notes",
                "example": "Meets minimum requirements"
              },
              "policy_number": {
                "type": "string",
                "description": "Policy number",
                "example": "12345GL"
              },
              "status": {
                "type": "string",
                "enum": [
                  "compliant",
                  "compliant_in_progress",
                  "expired",
                  "non_compliant",
                  "non_compliant_in_progress",
                  "undecided",
                  "unregistered"
                ],
                "description": "Status",
                "example": "compliant"
              }
            }
          }
        }
      }
    },
    "PotentialChangeOrderBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "change_order",
          "project_id",
          "contract_id"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 349583
          },
          "contract_id": {
            "type": "integer",
            "description": "Contract ID",
            "example": 274058
          },
          "change_order": {
            "$ref": "#\/definitions\/PotentialChangeOrderBody"
          }
        }
      }
    },
    "PotentialChangeOrderSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Potential Change Order Body",
        "type": "object",
        "required": [
          "updates"
        ],
        "properties": {
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#\/definitions\/PotentialChangeOrderBody"
            }
          }
        }
      }
    },
    "PrimeContractBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "prime_contract"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 512340
          },
          "prime_contract": {
            "title": "Prime Contract",
            "type": "object",
            "description": "Prime Contract object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Title of the Prime Contract",
                "example": "Station 3"
              },
              "number": {
                "type": "string",
                "description": "Number of the Prime Contract",
                "example": "2345"
              }
            }
          }
        }
      }
    },
    "ProgramBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "program"
        ],
        "properties": {
          "program": {
            "title": "Program",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The Name of the Program"
              },
              "address_freeform": {
                "type": "string",
                "description": "The Address of the Program"
              },
              "website": {
                "type": "string",
                "description": "The Website of the Program"
              },
              "zip": {
                "type": "string",
                "description": "The Zip code of the Program"
              }
            }
          }
        },
        "example": {
          "program": {
            "name": "Program A",
            "address_freeform": "500 Construction Way, Santa Barbara",
            "website": "http:\/\/exampleprogramsite.com",
            "zip": "91013"
          }
        }
      }
    },
    "RFICreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "rfi"
        ],
        "properties": {
          "rfi": {
            "type": "object",
            "required": [
              "subject",
              "assignee_id",
              "question"
            ],
            "properties": {
              "subject": {
                "type": "string",
                "description": "The Subject of the RFI"
              },
              "reference": {
                "type": "string",
                "description": "The Reference of the RFI"
              },
              "assignee_id": {
                "type": "integer",
                "description": "The ID of the Assignee User. Note: not required if the creator is an admin and the RFI is a draft.\n"
              },
              "draft": {
                "type": "boolean",
                "description": "The Draft status of the RFI",
                "default": false
              },
              "due_date": {
                "type": "string",
                "description": "The Due Date of the RFI",
                "format": "date"
              },
              "received_from_login_information_id": {
                "type": "integer",
                "description": "The ID of the Received From User of the RFI"
              },
              "responsible_contractor_id": {
                "type": "integer",
                "description": "The ID of the Responsible Contractor Vendor of the RFI"
              },
              "distribution_ids": {
                "type": "array",
                "description": "An array of IDs of the Distributions of the RFI",
                "items": {
                  "type": "integer"
                }
              },
              "number": {
                "type": "string",
                "description": "The Number of the RFI\n*This field will be auto-populated if the RFI is not draft"
              },
              "private": {
                "type": "boolean",
                "description": "The Private status of the RFI",
                "default": false
              },
              "schedule_impact": {
                "type": "object",
                "description": "The Schedule Impact of the RFI",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The Status of the Schedule Impact",
                    "enum": [
                      "yes_known",
                      "yes_unknown",
                      "no_impact",
                      "tbd",
                      "n_a"
                    ]
                  },
                  "value": {
                    "type": "integer",
                    "description": "The Value in days of the Schedule Impact"
                  }
                }
              },
              "cost_impact": {
                "type": "object",
                "description": "The Cost Impact of the RFI",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The Status of the Cost Impact",
                    "enum": [
                      "yes_known",
                      "yes_unknown",
                      "no_impact",
                      "tbd",
                      "n_a"
                    ]
                  },
                  "value": {
                    "type": "integer",
                    "description": "The Value in dollars of the Cost Impact"
                  }
                }
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the RFI"
              },
              "drawing_number": {
                "type": "string",
                "description": "The Drawing Number of the RFI"
              },
              "specification_section_id": {
                "type": "integer",
                "description": "The ID of the Specification Section of the RFI"
              },
              "cost_code_id": {
                "type": "integer",
                "description": "The ID of the Cost Code of the RFI"
              },
              "question": {
                "type": "object",
                "description": "The Question of the RFI",
                "required": [
                  "body"
                ],
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The Body of the Question"
                  },
                  "attachments": {
                    "type": "array",
                    "description": "RFI's Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "custom_textfield_1": {
                "type": "string",
                "description": "The Custom Textfield 1 of the RFI"
              },
              "custom_textfield_2": {
                "type": "string",
                "description": "The Custom Textfield 2 of the RFI"
              }
            }
          }
        }
      }
    },
    "RFIUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "rfi"
        ],
        "properties": {
          "rfi": {
            "type": "object",
            "required": [
              "subject",
              "assignee_id",
              "question"
            ],
            "properties": {
              "subject": {
                "type": "string",
                "description": "The Subject of the RFI"
              },
              "reference": {
                "type": "string",
                "description": "The Reference of the RFI"
              },
              "accepted": {
                "type": "boolean",
                "description": "The Accepted status of the RFI - closes or opens an RFI",
                "default": false
              },
              "assignee_id": {
                "type": "integer",
                "description": "The ID of the Assignee User. Note: not required if the creator is an admin and the RFI is a draft.\n"
              },
              "ball_in_court_id": {
                "type": "integer",
                "description": "The ID of the Ball in Court of the RFI"
              },
              "draft": {
                "type": "boolean",
                "description": "The Draft status of the RFI (Can only be changed on draft RFIs)",
                "default": false
              },
              "due_date": {
                "type": "string",
                "description": "The Due Date of the RFI",
                "format": "date"
              },
              "received_from_login_information_id": {
                "type": "integer",
                "description": "The ID of the Received From User of the RFI"
              },
              "responsible_contractor_id": {
                "type": "integer",
                "description": "The ID of the Responsible Contractor Vendor of the RFI"
              },
              "distribution_ids": {
                "type": "array",
                "description": "An array of IDs of the Distributions of the RFI",
                "items": {
                  "type": "integer"
                }
              },
              "number": {
                "type": "string",
                "description": "The Number of the RFI\n*This field will be auto-populated if the RFI is not draft"
              },
              "private": {
                "type": "boolean",
                "description": "The Private status of the RFI",
                "default": false
              },
              "schedule_impact": {
                "type": "object",
                "description": "The Schedule Impact of the RFI",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The Status of the Schedule Impact",
                    "enum": [
                      "yes_known",
                      "yes_unknown",
                      "no_impact",
                      "tbd",
                      "n_a"
                    ]
                  },
                  "value": {
                    "type": "integer",
                    "description": "The Value in days of the Schedule Impact"
                  }
                }
              },
              "cost_impact": {
                "type": "object",
                "description": "The Cost Impact of the RFI",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The Status of the Cost Impact",
                    "enum": [
                      "yes_known",
                      "yes_unknown",
                      "no_impact",
                      "tbd",
                      "n_a"
                    ]
                  },
                  "value": {
                    "type": "integer",
                    "description": "The Value in dollars of the Cost Impact"
                  }
                }
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the RFI"
              },
              "drawing_number": {
                "type": "string",
                "description": "The Drawing Number of the RFI"
              },
              "specification_section_id": {
                "type": "integer",
                "description": "The ID of the Specification Section of the RFI"
              },
              "cost_code_id": {
                "type": "integer",
                "description": "The ID of the Cost Code of the RFI"
              },
              "question": {
                "type": "object",
                "description": "The Question of the RFI (Can only be changed on draft RFIs)",
                "required": [
                  "body"
                ],
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The Body of the Question"
                  },
                  "attachments": {
                    "type": "array",
                    "description": "RFI's Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "custom_textfield_1": {
                "type": "string",
                "description": "The Custom Textfield 1 of the RFI"
              },
              "custom_textfield_2": {
                "type": "string",
                "description": "The Custom Textfield 2 of the RFI"
              }
            }
          }
        }
      }
    },
    "RFQBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "project_id",
          "contract_id",
          "rfq"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 585355
          },
          "contract_id": {
            "type": "integer",
            "description": "Contract ID",
            "example": 423400
          },
          "rfq": {
            "title": "RFQ",
            "type": "object",
            "required": [
              "title"
            ],
            "properties": {
              "assigned_id": {
                "type": "integer",
                "description": "Assigned ID",
                "example": 324884
              },
              "cost_code_id": {
                "type": "integer",
                "description": "Cost Code ID",
                "example": 2193644
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Please see attached documentation for Bulletin 3 and provide pricing within 1 week. If you don't get back to me, I'll assume you have no cost impact."
              },
              "due_date": {
                "type": "string",
                "format": "date",
                "description": "Due date",
                "example": "2016-10-13"
              },
              "estimated_amount": {
                "type": "number",
                "format": "float",
                "description": "Estimated amount",
                "example": "4302.0"
              },
              "estimated_schedule_impact": {
                "type": "integer",
                "description": "Estimated schedule impact in days",
                "example": 2
              },
              "estimated_status": {
                "type": "string",
                "description": "Estimated status",
                "example": "rom",
                "enum": [
                  "rom",
                  "final"
                ]
              },
              "location_id": {
                "type": "integer",
                "description": "Location ID",
                "example": 237236
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": "013"
              },
              "original_quote": {
                "type": "number",
                "format": "float",
                "description": "Original quote",
                "example": "4500.0"
              },
              "private": {
                "type": "boolean",
                "description": "If true, visible to admins only; otherwise visible to those with access to the parent contract.",
                "default": false
              },
              "spec_section_description": {
                "type": "string",
                "description": "Specification Section description",
                "example": "Steel Structure"
              },
              "spec_section_number": {
                "type": "string",
                "description": "Specification Section number",
                "example": 236400
              },
              "specification_section_id": {
                "type": "integer",
                "description": "Specification Section ID",
                "example": 32379
              },
              "status": {
                "type": "string",
                "description": "Status",
                "example": "under_review",
                "enum": [
                  "out_for_pricing",
                  "revise_and_resubmit",
                  "under_review",
                  "pending_final_approval",
                  "closed",
                  "withdrawn"
                ]
              },
              "title": {
                "type": "string",
                "description": "Title",
                "example": "Field Bulletin #3 - Steel staircase on roof"
              },
              "prostore_file_ids": {
                "type": "array",
                "description": "Prostore File IDs",
                "example": [
                  3423484,
                  6983730,
                  2736492
                ],
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "RFQQuoteBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "project_id",
          "contract_id",
          "rfq_quote"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID"
          },
          "contract_id": {
            "type": "integer",
            "description": "Contract ID"
          },
          "rfq_quote": {
            "title": "RFQ Quote",
            "type": "object",
            "properties": {
              "commitment_quote_number": {
                "type": "string",
                "description": "Commitment quote number",
                "example": 45
              },
              "cost": {
                "type": "number",
                "format": "float",
                "description": "Cost",
                "example": 3653
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Need to rip out and reinstall windows. Keep the painter out of the area."
              },
              "schedule_impact": {
                "type": "integer",
                "description": "Schedule impact",
                "example": 145
              }
            }
          }
        }
      }
    },
    "RFQResponseBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "project_id",
          "contract_id",
          "rfq_response"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 256754
          },
          "contract_id": {
            "type": "integer",
            "description": "Contract ID",
            "example": 392745
          },
          "rfq_response": {
            "type": "object",
            "title": "RFQ Response",
            "properties": {
              "comment": {
                "type": "string",
                "description": "Comment in response to the latest quote",
                "example": "This quote needs to be revised. See attached files."
              },
              "prostore_file_ids": {
                "type": "array",
                "description": "Prostore file IDs",
                "example": [
                  3453247,
                  6543893,
                  3476145
                ],
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "SubmittalBody": {
      "name": "submittal",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "number"
        ],
        "properties": {
          "actual_delivery_date": {
            "type": "string",
            "format": "date",
            "example": "MM\/DD\/YYYY",
            "description": "The Actual Delivery Date of the Submittal\n*This field can only be set if the project has submittal delivery information enabled\n"
          },
          "confirmed_delivery_date": {
            "type": "string",
            "format": "date",
            "example": "MM\/DD\/YYYY",
            "description": "The Confirmed Delivery Date of the Submittal\n*This field can only be set if the project has submittal delivery information enabled\n"
          },
          "cost_code_id": {
            "type": "integer",
            "description": "The ID of the Cost Code of the Submittal\n*This field can only be set by admins\n"
          },
          "custom_textarea_1": {
            "type": "string",
            "description": "*This field can only be set by admins\n"
          },
          "custom_textfield_1": {
            "type": "string",
            "description": "*This field can only be set by admins\n"
          },
          "description": {
            "type": "string",
            "description": "The Description of the Submittal"
          },
          "design_team_review_time": {
            "type": "integer",
            "description": "The Design Team Review Time of the Submittal (in days)\n*This field can only be set if the project has schedule calculations enabled\n"
          },
          "distribution_member_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The IDs of the Distribution Members of the Submittal"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "example": "MM\/DD\/YYYY",
            "description": "The Due Date of the Submittal\n*This field is not available to be set if sequential approvers is enabled\n"
          },
          "internal_review_time": {
            "type": "integer",
            "description": "The Internal Review Time of the Submtital (in days)\n*This field can only be set if the project has schedule calculations enabled\n"
          },
          "issue_date": {
            "type": "string",
            "format": "date",
            "example": "MM\/DD\/YYYY",
            "description": "The Issue Date of the Submittal\n*This field can only be set by admins\n"
          },
          "lead_time": {
            "type": "integer",
            "description": "The Lead Time of the Submittal (in days)\n*This field can only be set by admins or if the project has schedule calculations enabled\n"
          },
          "location_id": {
            "type": "integer",
            "description": "The Location of the Submittal"
          },
          "number": {
            "type": "string",
            "description": "The Number of the Submittal"
          },
          "private": {
            "type": "boolean",
            "description": "Whether the Submittal is Private or not"
          },
          "received_date": {
            "type": "string",
            "format": "date",
            "example": "MM\/DD\/YYYY",
            "description": "The Received Date of the Submittal\n*This field can only be set by admins\n"
          },
          "received_from_id": {
            "type": "integer",
            "description": "The Received From of the Submittal"
          },
          "required_on_site_date": {
            "type": "string",
            "format": "date",
            "example": "MM\/DD\/YYYY",
            "description": "The Required On Site Date of the Submittal\n*This field can only be set by admins or if the project has schedule calculations enabled\n"
          },
          "responsible_contractor_id": {
            "type": "integer",
            "description": "The Responsible Contractor of the Submittal"
          },
          "revision": {
            "type": "string",
            "description": "The Revision of the Submittal"
          },
          "scheduled_task_key": {
            "type": "string",
            "description": "The key of the Scheduled Task of the Submittal\n*This field can only be set if the project has submittal delivery information enabled and the user has permissions to view the calendar tool\n"
          },
          "specification_section_id": {
            "type": "integer",
            "description": "The ID of the Specification Section of the Submittal"
          },
          "status_id": {
            "type": "integer",
            "description": "The ID of the Submittal Status of the Submittal\n*This field can only be set by admins\n"
          },
          "submit_by": {
            "type": "string",
            "format": "date",
            "example": "MM\/DD\/YYYY",
            "description": "The Submit By Date of the Submittal\n*This field can only be set by admins\n"
          },
          "submittal_manager_id": {
            "type": "integer",
            "description": "The ID of the Submittal Manager of the Submittal\n*This field can only be set by admins\n"
          },
          "submittal_package_id": {
            "type": "integer",
            "description": "The ID of the Submittal Package of the Submittal\n*This field can only be set by admins\n"
          },
          "title": {
            "type": "string",
            "description": "The Title of the Submittal"
          },
          "type": {
            "type": "string",
            "description": "The Submittal Type of the Submittal"
          }
        }
      }
    },
    "SubmittalIDs": {
      "name": "ids",
      "in": "query",
      "type": "array",
      "description": "Submittal IDs",
      "required": true,
      "items": {
        "type": "integer"
      }
    },
    "NonAtomic": {
      "x-support-level": "Internal",
      "name": "non_atomic",
      "in": "query",
      "type": "boolean",
      "description": "Designates whether or not the action will be completed non_atomically (default false)"
    },
    "SendEmails": {
      "name": "send_emails",
      "in": "query",
      "type": "boolean",
      "description": "Designates whether or not emails will be sent"
    },
    "ObservationItemBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "observation"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Observation Item belongs to"
          },
          "observation": {
            "title": "Observation",
            "type": "object",
            "description": "Item object",
            "required": [
              "name",
              "type_id"
            ],
            "properties": {
              "assignee_id": {
                "type": "integer",
                "description": "The ID of the Assignee of the Observation Item"
              },
              "checklist_item_id": {
                "type": "integer",
                "description": "The ID of the Checklist Item of the Observation Item"
              },
              "description": {
                "type": "string",
                "description": "The Description of the Observation Item"
              },
              "due_date": {
                "type": "string",
                "format": "date",
                "description": "The Due Date of the Observation Item"
              },
              "name": {
                "type": "string",
                "description": "The Name of the Observation Item"
              },
              "number": {
                "type": "string",
                "description": "The Number of the Observation Item"
              },
              "personal": {
                "type": "boolean",
                "description": "The Personal status of the Observation Item",
                "default": true
              },
              "priority": {
                "type": "string",
                "description": "The Priority of the Observation Item",
                "enum": [
                  "Low",
                  "Medium",
                  "High",
                  "Urgent"
                ]
              },
              "status": {
                "type": "string",
                "description": "The Status of the Observation Item",
                "enum": [
                  "initiated",
                  "ready_for_review",
                  "not_accepted",
                  "closed"
                ]
              },
              "trade_id": {
                "type": "integer",
                "description": "The ID of the Trade of the Observation Item"
              },
              "type_id": {
                "type": "integer",
                "description": "The ID of the Type of the Observation Item"
              },
              "distribution_member_ids": {
                "type": "array",
                "description": "An array of the IDs of the Distribution Member of the Observation Item",
                "items": {
                  "type": "integer"
                }
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Observation Item. Use either `location_id` or `mt_location` but not both."
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "attachments": {
            "type": "array",
            "description": "An array of the Attachments of the Observation Item.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "ObservationItemCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "observation"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Observation Item belongs to"
          },
          "observation": {
            "title": "Observation",
            "type": "object",
            "description": "Item object",
            "required": [
              "name",
              "type_id"
            ],
            "properties": {
              "assignee_id": {
                "type": "integer",
                "description": "The ID of the User that will be assigned to the Observation Item"
              },
              "checklist_item_id": {
                "type": "integer",
                "description": "The ID of the Inspection (Checklist) Item the Observation Item will be created from"
              },
              "created_by_id": {
                "type": "integer",
                "description": "The ID of the User creating the Observation Item. Only Observations Admin Users can set the creator"
              },
              "description": {
                "type": "string",
                "description": "The Description of the Observation Item"
              },
              "due_date": {
                "type": "string",
                "format": "date",
                "description": "The Due Date of the Observation Item"
              },
              "name": {
                "type": "string",
                "description": "The Name of the Observation Item"
              },
              "number": {
                "type": "string",
                "description": "The Number of the Observation Item"
              },
              "personal": {
                "type": "boolean",
                "description": "The Privacy status of the Observation Item"
              },
              "priority": {
                "type": "string",
                "description": "The Priority of the Observation Item",
                "enum": [
                  "Low",
                  "Medium",
                  "High",
                  "Urgent"
                ]
              },
              "status": {
                "type": "string",
                "description": "The Status of the Observation Item",
                "enum": [
                  "initiated",
                  "ready_for_review",
                  "not_accepted",
                  "closed"
                ]
              },
              "trade_id": {
                "type": "integer",
                "description": "The ID of the Trade of the Observation Item"
              },
              "type_id": {
                "type": "integer",
                "description": "The ID of the Type of the Observation Item"
              },
              "distribution_member_ids": {
                "type": "array",
                "description": "An array of the User IDs of the Observation Item distribution members",
                "items": {
                  "type": "integer"
                }
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Observation Item. `location_id` takes precedence over `mt_location`."
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "attachments": {
            "type": "array",
            "description": "An array of the Attachments of the Observation Item.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "ObservationItemResponseLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "ObservationItemResponseLogBody",
        "type": "object",
        "required": [
          "project_id",
          "response_log"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Observation Item Response Log belongs to"
          },
          "response_log": {
            "title": "Response Log",
            "type": "object",
            "description": "Response Log body",
            "properties": {
              "comment": {
                "type": "string",
                "description": "The Comments of the Response Log"
              },
              "prostore_file_ids": {
                "type": "array",
                "description": "An array of the Attachment IDs",
                "items": {
                  "type": "integer"
                }
              }
            }
          },
          "status": {
            "type": "string",
            "description": "The Status of the Observation",
            "enum": [
              "initiated",
              "ready_for_review",
              "not_accepted",
              "closed"
            ]
          },
          "attachments": {
            "type": "array",
            "description": "An array of the Attachments of the Observation Item Response Log.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "OfficeBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "company_id",
          "office"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "description": "The ID of the Company the Office belongs to"
          },
          "office": {
            "title": "Office",
            "type": "object",
            "description": "Office object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The Name of the Office"
              },
              "address": {
                "type": "string",
                "description": "The Address of the Office"
              },
              "city": {
                "type": "string",
                "description": "The City of the Office"
              },
              "state_code": {
                "type": "string",
                "description": "The State Code of the Office"
              },
              "country_code": {
                "type": "string",
                "description": "The Country Code of the Office"
              },
              "zip": {
                "type": "string",
                "description": "The Zip of the Office"
              },
              "phone": {
                "type": "string",
                "description": "The Phone of the Office"
              },
              "fax": {
                "type": "string",
                "description": "The Fax of the Office"
              }
            }
          }
        },
        "example": {
          "company_id": 1,
          "office": {
            "name": "Main Office",
            "address": "100 Construction Lane",
            "city": "Santa Barbara",
            "state_code": "CA",
            "country_code": "US",
            "zip": "93101",
            "phone": "8059835555",
            "fax": "8059835558"
          }
        }
      }
    },
    "CompanyVendorBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Company Vendor Body",
        "type": "object",
        "required": [
          "company_id",
          "vendor"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "description": "Company ID"
          },
          "vendor": {
            "title": "Company Vendor",
            "type": "object",
            "required": [
              "name",
              "email_address"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name",
                "example": "Poodle Electric"
              },
              "company": {
                "type": "string",
                "description": "Company",
                "example": "Stock Construction"
              },
              "address": {
                "type": "string",
                "description": "Address",
                "example": "846 Dogglesworth Drive"
              },
              "city": {
                "type": "string",
                "description": "City",
                "example": "Jeffersonville"
              },
              "zip": {
                "type": "string",
                "description": "Zip code",
                "example": "47130"
              },
              "business_phone": {
                "type": "string",
                "description": "Business phone",
                "example": "(812) 284-8506"
              },
              "mobile_phone": {
                "type": "string",
                "description": "Mobile phone",
                "example": "(812) 556-3397"
              },
              "fax_number": {
                "type": "string",
                "description": "Fax number",
                "example": "(812) 989-9810"
              },
              "email_address": {
                "type": "string",
                "description": "Email address",
                "example": "marcia@procore.com"
              },
              "is_active": {
                "type": "boolean",
                "description": "Active status",
                "example": true
              },
              "state_code": {
                "type": "string",
                "description": "State code",
                "example": "IN"
              },
              "authorized_bidder": {
                "type": "boolean",
                "description": "Authorized bidder status",
                "example": true
              },
              "prequalified": {
                "type": "boolean",
                "description": "Prequalified status",
                "default": false,
                "example": false
              },
              "country_code": {
                "type": "string",
                "description": "Country code",
                "example": "US"
              },
              "labor_union": {
                "type": "string",
                "description": "Labor union",
                "example": "IWW 872"
              },
              "license_number": {
                "type": "string",
                "description": "License number",
                "example": "1901XYZ"
              },
              "website": {
                "type": "string",
                "description": "Website url",
                "example": "http:\/\/poodleparade.com"
              },
              "union_member": {
                "type": "boolean",
                "description": "Union member status",
                "example": true
              },
              "non_union_prevailing_wage": {
                "type": "boolean",
                "description": "Non union prevailing wage status",
                "example": false
              },
              "abbreviated_name": {
                "type": "string",
                "description": "Abbreviated name",
                "example": "PE"
              },
              "notes": {
                "type": "string",
                "description": "Notes (notes\/keywords\/tags)",
                "example": "Owned by a dog"
              },
              "primary_contact_id": {
                "type": "integer",
                "description": "Primary Contract ID",
                "example": 1306796
              },
              "origin_id": {
                "type": "string",
                "description": "Origin ID",
                "example": "ref-12345"
              },
              "origin_data": {
                "type": "string",
                "description": "Origin Data",
                "example": "{\"data_field\":{\"is_important\":true}}"
              },
              "bidding": {
                "type": "object",
                "description": "Bidding statuses",
                "properties": {
                  "affirmative_action": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "small_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "african_american_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "hispanic_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "womens_business": {
                    "type": "boolean",
                    "default": false,
                    "example": false
                  },
                  "historically_underutilized_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "sdvo_business": {
                    "type": "boolean",
                    "default": false,
                    "example": false
                  },
                  "certified_business_enterprise": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "asian_american_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "native_american_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "disadvantaged_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "minority_business_enterprise": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "eight_a_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "CompanyVendorSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Company Vendor Sync Body",
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "description": "Company ID",
            "example": 124251
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID",
                  "example": 13513
                },
                "name": {
                  "type": "string",
                  "description": "Name",
                  "example": "Poodle Electric"
                },
                "company": {
                  "type": "string",
                  "description": "Company",
                  "example": "Stock Construction"
                },
                "address": {
                  "type": "string",
                  "description": "Address",
                  "example": "846 Dogglesworth Drive"
                },
                "city": {
                  "type": "string",
                  "description": "City",
                  "example": "Jeffersonville"
                },
                "zip": {
                  "type": "string",
                  "description": "Zip code",
                  "example": "47130"
                },
                "business_phone": {
                  "type": "string",
                  "description": "Business phone",
                  "example": "(812) 284-8506"
                },
                "mobile_phone": {
                  "type": "string",
                  "description": "Mobile phone",
                  "example": "(812) 556-3397"
                },
                "fax_number": {
                  "type": "string",
                  "description": "Fax number",
                  "example": "(812) 989-9810"
                },
                "email_address": {
                  "type": "string",
                  "description": "Email address",
                  "example": "marcia@procore.com"
                },
                "is_active": {
                  "type": "boolean",
                  "description": "Active status",
                  "example": true
                },
                "state_code": {
                  "type": "string",
                  "description": "State code",
                  "example": "IN"
                },
                "authorized_bidder": {
                  "type": "boolean",
                  "description": "Authorized bidder status",
                  "example": true
                },
                "prequalified": {
                  "type": "boolean",
                  "description": "Prequalified status",
                  "default": false,
                  "example": false
                },
                "country_code": {
                  "type": "string",
                  "description": "Country code",
                  "example": "US"
                },
                "labor_union": {
                  "type": "string",
                  "description": "Labor union",
                  "example": "IWW 872"
                },
                "license_number": {
                  "type": "string",
                  "description": "License number",
                  "example": "1901XYZ"
                },
                "website": {
                  "type": "string",
                  "description": "Website url",
                  "example": "http:\/\/poodleparade.com"
                },
                "union_member": {
                  "type": "boolean",
                  "description": "Union member status",
                  "example": true
                },
                "non_union_prevailing_wage": {
                  "type": "boolean",
                  "description": "Non union prevailing wage status",
                  "example": false
                },
                "abbreviated_name": {
                  "type": "string",
                  "description": "Abbreviated name",
                  "example": "PE"
                },
                "notes": {
                  "type": "string",
                  "description": "Notes (notes\/keywords\/tags)",
                  "example": "Owned by a cat"
                },
                "primary_contact_id": {
                  "type": "integer",
                  "description": "Primary Contract ID",
                  "example": 1306796
                },
                "origin_id": {
                  "type": "string",
                  "description": "Origin ID",
                  "example": "ref-12345"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Origin Data",
                  "example": "{\"data_field\":{\"is_important\":true}}"
                },
                "bidding": {
                  "type": "object",
                  "description": "Bidding statuses",
                  "properties": {
                    "affirmative_action": {
                      "type": "boolean",
                      "default": false,
                      "example": true
                    },
                    "small_business": {
                      "type": "boolean",
                      "default": false,
                      "example": true
                    },
                    "african_american_business": {
                      "type": "boolean",
                      "default": false,
                      "example": true
                    },
                    "hispanic_business": {
                      "type": "boolean",
                      "default": false,
                      "example": false
                    },
                    "womens_business": {
                      "type": "boolean",
                      "default": false,
                      "example": false
                    },
                    "historically_underutilized_business": {
                      "type": "boolean",
                      "default": false,
                      "example": true
                    },
                    "sdvo_business": {
                      "type": "boolean",
                      "default": false,
                      "example": false
                    },
                    "certified_business_enterprise": {
                      "type": "boolean",
                      "default": false,
                      "example": true
                    },
                    "asian_american_business": {
                      "type": "boolean",
                      "default": false,
                      "example": true
                    },
                    "native_american_business": {
                      "type": "boolean",
                      "default": false,
                      "example": true
                    },
                    "disadvantaged_business": {
                      "type": "boolean",
                      "default": false,
                      "example": false
                    },
                    "minority_business_enterprise": {
                      "type": "boolean",
                      "default": false,
                      "example": true
                    },
                    "eight_a_business": {
                      "type": "boolean",
                      "default": false,
                      "example": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ProjectBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "company_id",
          "project"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "description": "The ID of the Company the Project belongs to"
          },
          "project": {
            "title": "Project",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "active": {
                "type": "boolean",
                "description": "The Active status of the Project",
                "default": true
              },
              "address": {
                "type": "string",
                "description": "The street Address of the Project location"
              },
              "city": {
                "type": "string",
                "description": "The City in which the Project is located"
              },
              "country_code": {
                "type": "string",
                "description": "The two character Code that represents the Country in which the Project is located\n"
              },
              "description": {
                "type": "string",
                "description": "The Description of the Project"
              },
              "estimated_start_date": {
                "type": "string",
                "format": "date",
                "description": "The Estimated Start Date of the Project"
              },
              "estimated_completion_date": {
                "type": "string",
                "format": "date",
                "description": "The Estimated Completion Date of the Project"
              },
              "flag": {
                "type": "string",
                "enum": [
                  "Red",
                  "Yellow",
                  "Green"
                ],
                "description": "The Flag of the Project"
              },
              "image_id": {
                "type": "integer",
                "description": "The ID of the Image of the Project"
              },
              "name": {
                "type": "string",
                "description": "The Name of the Project"
              },
              "office_id": {
                "type": "integer",
                "description": "The ID of the Office of the Project"
              },
              "phone": {
                "type": "string",
                "description": "The Phone number of the Project"
              },
              "project_number": {
                "type": "string",
                "description": "The Number of the Project"
              },
              "public_notes": {
                "type": "string",
                "description": "The Public Notes of the Project"
              },
              "project_stage_id": {
                "type": "integer",
                "description": "The Project Stage ID for the Project"
              },
              "square_feet": {
                "type": "integer",
                "description": "The Square Footage of the Project"
              },
              "state_code": {
                "type": "string",
                "description": "The Code that represents the State of the Project.\nMust be a valid Subregion Code within the specified Country Code as defined\nby the ruby gem Carmen\n"
              },
              "zip": {
                "type": "string",
                "description": "The Zip code of the Project"
              },
              "program_id": {
                "type": "integer",
                "description": "The Program ID of the Project"
              },
              "project_type_id": {
                "type": "integer",
                "description": "The Project Type ID of the Project"
              },
              "project_template_id": {
                "type": "integer",
                "description": "The ID of the Project Template as designated by another Project on this company.\nIt must be a Project that is a Template defined by template: `true`\n"
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the Project"
              },
              "origin_data": {
                "type": "string",
                "description": "The Third-party Data of the Project"
              },
              "department_ids": {
                "type": "array",
                "description": "The IDs of the Departments the Project belongs to.\nThe array should always represent all Departments, so if you have `[1, 2, 3]` and\nwant to remove deparment `2`, then send `[1, 3]`\n",
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "example": {
          "company_id": 3461,
          "project": {
            "name": "Project F",
            "description": "A description of the project",
            "address": "500 Construction Way",
            "zip": "93110",
            "city": "Carpinteria",
            "department_ids": [
              3128,
              3127
            ],
            "project_number": "A-2",
            "estimated_start_date": "2015-05-15",
            "estimated_completion_date": "2015-05-31",
            "project_stage_id": 1,
            "active": true,
            "country_code": "US",
            "flag": "Yellow",
            "office_id": 3610,
            "phone": "310-555-5555",
            "public_notes": "Notes",
            "square_feet": 5000,
            "state_code": "CA",
            "program_id": 5,
            "project_type_id": 5,
            "project_template_id": 22585
          }
        }
      }
    },
    "ProjectSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "description": "The ID of the Company the Project belongs to"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the Project"
                },
                "active": {
                  "type": "boolean",
                  "description": "The Active status of the Project",
                  "default": true
                },
                "address": {
                  "type": "string",
                  "description": "The street Address of the Project location"
                },
                "city": {
                  "type": "string",
                  "description": "The City in which the Project is located"
                },
                "country_code": {
                  "type": "string",
                  "description": "The two character Code that represents the Country in which the Project is located\n"
                },
                "description": {
                  "type": "string",
                  "description": "The Description of the Project"
                },
                "estimated_start_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The Estimated Start Date of the Project"
                },
                "estimated_completion_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The Estimated Completion Date of the Project"
                },
                "flag": {
                  "type": "string",
                  "enum": [
                    "Red",
                    "Yellow",
                    "Green"
                  ],
                  "description": "The Flag of the Project"
                },
                "image_id": {
                  "type": "integer",
                  "description": "The ID of the Image of the Project"
                },
                "name": {
                  "type": "string",
                  "description": "The Name of the Project"
                },
                "office_id": {
                  "type": "integer",
                  "description": "The ID of the Office of the Project"
                },
                "phone": {
                  "type": "string",
                  "description": "The Phone number of the Project"
                },
                "project_number": {
                  "type": "string",
                  "description": "The Number of the Project"
                },
                "public_notes": {
                  "type": "string",
                  "description": "The Public Notes of the Project"
                },
                "project_stage_id": {
                  "type": "integer",
                  "description": "The Project Stage ID of the Project"
                },
                "square_feet": {
                  "type": "integer",
                  "description": "The Square Footage of the Project"
                },
                "state_code": {
                  "type": "string",
                  "description": "The Code that represents the State of the Project.\nMust be a valid Subregion Code within the specified Country Code as defined\nby the ruby gem Carmen\n"
                },
                "zip": {
                  "type": "string",
                  "description": "The Zip code of the Project"
                },
                "program_id": {
                  "type": "integer",
                  "description": "The Program ID of the Project"
                },
                "project_type_id": {
                  "type": "integer",
                  "description": "The Project Type ID of the Project"
                },
                "project_template_id": {
                  "type": "integer",
                  "description": "The ID of the Project Template as designated by another Project on this company.\nIt must be a Project that is a Template defined by template: `true`\n"
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the Project"
                },
                "origin_data": {
                  "type": "string",
                  "description": "The Third-party Data of the Project"
                },
                "department_ids": {
                  "type": "array",
                  "description": "The IDs of the Departments the Project belongs to.\nThe array should always represent all Departments, so if you have `[1, 2, 3]` and\nwant to remove deparment `2`, then send `[1, 3]`\n",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "example": {
          "company_id": 1,
          "updates": [
            {
              "name": "New Project"
            },
            {
              "origin_id": "ABC123",
              "name": "New Project with Origin ID"
            },
            {
              "id": 2,
              "name": "Existing Project updated by Procore ID"
            },
            {
              "origin_id": "ABC456",
              "name": "Existing Project updated by Origin ID"
            },
            {
              "origin_id": "failing request"
            }
          ]
        }
      }
    },
    "ProjectVendorCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Project Vendor Body",
        "type": "object",
        "required": [
          "vendor"
        ],
        "properties": {
          "vendor": {
            "title": "Project Vendor",
            "type": "object",
            "required": [
              "name",
              "email_address"
            ],
            "properties": {
              "abbreviated_name": {
                "type": "string",
                "description": "Abbreviated name",
                "example": "PE"
              },
              "address": {
                "type": "string",
                "description": "Street address",
                "example": "846 Dogglesworth Drive"
              },
              "authorized_bidder": {
                "type": "boolean",
                "description": "Authorized bidder status",
                "example": true
              },
              "business_phone": {
                "type": "string",
                "description": "Business phone number",
                "example": "(812) 284-8506"
              },
              "city": {
                "type": "string",
                "description": "City",
                "example": "Jeffersonville"
              },
              "company": {
                "type": "string",
                "description": "Company",
                "example": "Stock Construction"
              },
              "country_code": {
                "type": "string",
                "description": "Country code",
                "example": "US"
              },
              "email_address": {
                "type": "string",
                "description": "Email address",
                "example": "marcia@procore.com"
              },
              "fax_number": {
                "type": "string",
                "description": "Fax number",
                "example": "(812) 863-2725"
              },
              "is_active": {
                "type": "boolean",
                "description": "Active status",
                "example": true
              },
              "labor_union": {
                "type": "string",
                "description": "Labor union",
                "example": "IWW 872"
              },
              "license_number": {
                "type": "string",
                "description": "License number",
                "example": "1901XYZ"
              },
              "mobile_phone": {
                "type": "string",
                "description": "Mobile phone number",
                "example": "(812) 556-3397"
              },
              "name": {
                "type": "string",
                "description": "Name",
                "example": "Poodle Electric"
              },
              "non_union_prevailing_wage": {
                "type": "boolean",
                "description": "Non union prevailing wage status",
                "example": false
              },
              "notes": {
                "type": "string",
                "description": "Notes (notes\/keywords\/tags)",
                "example": "owned by a dog"
              },
              "origin_id": {
                "type": "string",
                "description": "Origin ID",
                "example": "ref-12345"
              },
              "origin_data": {
                "type": "string",
                "description": "Origin data",
                "example": "{\"data_field\":{\"is_important\":true}}"
              },
              "prequalified": {
                "type": "boolean",
                "description": "Prequalified status",
                "default": false,
                "example": false
              },
              "primary_contact_id": {
                "type": "integer",
                "description": "Primary Contact ID",
                "example": 15316136
              },
              "state_code": {
                "type": "string",
                "description": "State code",
                "example": "IN"
              },
              "union_member": {
                "type": "boolean",
                "description": "Union member status",
                "example": true
              },
              "website": {
                "type": "string",
                "description": "Website url",
                "example": "http:\/\/poodleparade.com"
              },
              "zip": {
                "type": "string",
                "description": "Zip code",
                "example": "47130"
              }
            }
          }
        }
      }
    },
    "ProjectVendorUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Project Vendor Body",
        "type": "object",
        "required": [
          "vendor"
        ],
        "properties": {
          "vendor": {
            "title": "Project Vendor",
            "type": "object",
            "properties": {
              "abbreviated_name": {
                "type": "string",
                "description": "Abbreviated name",
                "example": "PE"
              },
              "address": {
                "type": "string",
                "description": "Address",
                "example": "846 Dogglesworth Drive"
              },
              "authorized_bidder": {
                "type": "boolean",
                "description": "Authorized bidder status",
                "example": true
              },
              "business_phone": {
                "type": "string",
                "description": "Business phone",
                "example": "(812) 284-8506"
              },
              "city": {
                "type": "string",
                "description": "City",
                "example": "Jeffersonville"
              },
              "company": {
                "type": "string",
                "description": "Company",
                "example": "Stock Construction"
              },
              "country_code": {
                "type": "string",
                "description": "Country code",
                "example": "US"
              },
              "email_address": {
                "type": "string",
                "description": "Email address",
                "example": "marcia@procore.com"
              },
              "fax_number": {
                "type": "string",
                "description": "Fax number",
                "example": "(812) 863-2725"
              },
              "is_active": {
                "type": "boolean",
                "description": "Active status",
                "example": true
              },
              "labor_union": {
                "type": "string",
                "description": "Labor union",
                "example": "IWW 872"
              },
              "license_number": {
                "type": "string",
                "description": "License number",
                "example": "1901XYZ"
              },
              "mobile_phone": {
                "type": "string",
                "description": "Mobile phone",
                "example": "(812) 556-3397"
              },
              "name": {
                "type": "string",
                "description": "Name",
                "example": "Poodle Electric"
              },
              "non_union_prevailing_wage": {
                "type": "boolean",
                "description": "Non union prevailing wage status",
                "example": false
              },
              "notes": {
                "type": "string",
                "description": "Notes (notes\/keywords\/tags)",
                "example": "owned by a dog"
              },
              "origin_id": {
                "type": "string",
                "description": "Origin ID",
                "example": "ref-12345"
              },
              "origin_data": {
                "type": "string",
                "description": "Origin data",
                "example": "{\"data_field\":{\"is_important\":true}}"
              },
              "prequalified": {
                "type": "boolean",
                "description": "Prequalified status",
                "default": false,
                "example": false
              },
              "primary_contact_id": {
                "type": "integer",
                "description": "Primary Contact ID",
                "example": 15316136
              },
              "state_code": {
                "type": "string",
                "description": "State code",
                "example": "IN"
              },
              "union_member": {
                "type": "boolean",
                "description": "Union member status",
                "example": true
              },
              "website": {
                "type": "string",
                "description": "Website url",
                "example": "http:\/\/poodleparade.com"
              },
              "zip": {
                "type": "string",
                "description": "Zip code",
                "example": "47130"
              },
              "bidding": {
                "type": "object",
                "description": "Bidding statuses",
                "properties": {
                  "affirmative_action": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "small_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "african_american_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "hispanic_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "womens_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "historically_underutilized_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "sdvo_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "certified_business_enterprise": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "asian_american_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "native_american_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "disadvantaged_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "minority_business_enterprise": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "eight_a_business": {
                    "type": "boolean",
                    "default": false,
                    "example": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "ChecklistBody": {
      "name": "ChecklistBody",
      "in": "body",
      "required": true,
      "schema": {
        "title": "ChecklistBody",
        "type": "object",
        "required": [
          "project_id",
          "template_id",
          "list"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project"
          },
          "template_id": {
            "type": "integer",
            "description": "The ID of the Template to copy from."
          },
          "list": {
            "title": "Checklist",
            "type": "object",
            "description": "Checklist object",
            "required": [
              "name",
              "number"
            ],
            "properties": {
              "description": {
                "type": "string",
                "description": "The Description of the Checklist"
              },
              "inspection_date": {
                "type": "string",
                "format": "date",
                "description": "The Inspection Date of the Checklist"
              },
              "point_of_contact_id": {
                "type": "integer",
                "description": "The ID of the Checklist's Point of Contact"
              },
              "inspectee_id": {
                "type": "integer",
                "description": "The ID of the Checklist's Inspectee"
              },
              "name": {
                "type": "string",
                "description": "The Name of the Checklist"
              },
              "number": {
                "type": "integer",
                "description": "The Number of the Checklist"
              },
              "personal": {
                "type": "boolean",
                "description": "The Personal status of the Checklist",
                "default": true
              },
              "responsible_contractor_id": {
                "type": "integer",
                "description": "The ID of the Checklist's Responsible Contractor"
              },
              "spec_section_id": {
                "type": "integer",
                "description": "The ID of the Checklist's Specification Section"
              },
              "status": {
                "type": "string",
                "description": "The Status of the Checklist",
                "enum": [
                  "Open",
                  "Closed"
                ]
              },
              "trade_id": {
                "type": "integer",
                "description": "The ID of the Checklist's Trade"
              },
              "sections_attributes": {
                "type": "array",
                "description": "An array of hashes of the Checklist's Section attributes",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "position"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The Name of the Section"
                    },
                    "position": {
                      "type": "integer",
                      "description": "The Position of the Section on the Checklist"
                    },
                    "items_attributes": {
                      "type": "array",
                      "description": "An array of hashes of the Section's Item attributes",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "position"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The Name of the Item"
                          },
                          "position": {
                            "type": "integer",
                            "description": "The Position of the Item in the Section"
                          },
                          "status": {
                            "type": "string",
                            "description": "The Status of the Item (default to n\/a)",
                            "enum": [
                              true,
                              false,
                              "n\/a",
                              "none"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "inspector_ids": {
                "type": "array",
                "description": "An Array of the IDs of the Inspectors",
                "items": {
                  "type": "integer"
                }
              },
              "location_id": {
                "type": "integer",
                "description": "If want to use an existing location and you have the ID of that existing location use this"
              },
              "mt_location": {
                "type": "array",
                "description": "If you are creating a new multi-tier or single-tier location use this",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "attachments": {
            "type": "array",
            "description": "Checklist's Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "ChecklistSectionBody": {
      "name": "ChecklistSectionBody",
      "in": "body",
      "required": true,
      "schema": {
        "title": "ChecklistSectionBody",
        "type": "object",
        "required": [
          "project_id",
          "section"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Section belongs to"
          },
          "section": {
            "title": "Section",
            "type": "object",
            "description": "Section object",
            "required": [
              "name",
              "position"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The Name of the Section"
              },
              "position": {
                "type": "integer",
                "description": "The Position of the Section"
              },
              "not_applicable": {
                "type": "boolean",
                "description": "The Not Applicable status of the Section",
                "default": false
              },
              "items_attributes": {
                "type": "array",
                "description": "An array of the Section's Item attributes",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "position"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The Name of the Item"
                    },
                    "position": {
                      "type": "integer",
                      "description": "The Position of the Item"
                    },
                    "status": {
                      "type": "string",
                      "description": "The Status of the Item",
                      "enum": [
                        true,
                        false,
                        "n\/a",
                        "none"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ChecklistItemBody": {
      "name": "ChecklistItemBody",
      "in": "body",
      "required": true,
      "schema": {
        "title": "ChecklistItemBody",
        "type": "object",
        "required": [
          "project_id",
          "section_id",
          "item"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Item belongs to"
          },
          "section_id": {
            "type": "integer",
            "description": "The ID of the Section the Item belongs to"
          },
          "item": {
            "title": "Item",
            "type": "object",
            "description": "Item object",
            "required": [
              "name",
              "position",
              "section_id"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The Name of the Item"
              },
              "position": {
                "type": "integer",
                "description": "The Position of the Item"
              },
              "status": {
                "type": "string",
                "description": "The Status of the item",
                "enum": [
                  true,
                  false,
                  "n\/a",
                  "none"
                ]
              },
              "section_id": {
                "type": "integer",
                "description": "The ID of the Section the Item belongs to"
              },
              "item_attachments_attributes": {
                "type": "array",
                "description": "An array of the Item's Attachments attributes",
                "items": {
                  "type": "object",
                  "properties": {
                    "prostore_file_id": {
                      "type": "integer",
                      "description": "Attachment prostore file id"
                    },
                    "created_by_id": {
                      "type": "integer",
                      "description": "Attachment created by id"
                    },
                    "item_id": {
                      "type": "integer",
                      "description": "Attachment item id"
                    },
                    "from_mobile": {
                      "type": "boolean",
                      "description": "Attachment from mobile status",
                      "default": false
                    }
                  }
                }
              }
            }
          },
          "attachments": {
            "type": "array",
            "description": "Item's Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "ChecklistCommentBody": {
      "name": "ChecklistCommentBody",
      "in": "body",
      "required": true,
      "schema": {
        "title": "ChecklistCommentBody",
        "type": "object",
        "required": [
          "project_id",
          "item_id",
          "comment"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project"
          },
          "item_id": {
            "type": "integer",
            "description": "The ID of the Item"
          },
          "comment": {
            "title": "Comment",
            "type": "object",
            "description": "Comment object",
            "required": [
              "body"
            ],
            "properties": {
              "body": {
                "type": "string",
                "description": "The text Body of the Comment"
              }
            }
          }
        }
      }
    },
    "CompanyUserBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Company User Body",
        "type": "object",
        "required": [
          "user"
        ],
        "properties": {
          "user": {
            "title": "Company User",
            "type": "object",
            "required": [
              "email_address",
              "last_name"
            ],
            "properties": {
              "first_name": {
                "type": "string",
                "description": "The First Name of the Company User"
              },
              "last_name": {
                "type": "string",
                "description": "The Last Name of the Company User"
              },
              "job_title": {
                "type": "string",
                "description": "The Job Title of the Company User"
              },
              "address": {
                "type": "string",
                "description": "The Address of the Company User"
              },
              "city": {
                "type": "string",
                "description": "The City of the Company User"
              },
              "zip": {
                "type": "string",
                "description": "The Zip code of the Company User"
              },
              "business_phone": {
                "type": "string",
                "description": "The Business Phone of the Company User"
              },
              "business_phone_extension": {
                "type": "string",
                "description": "The Business Phone Extension of the Company User"
              },
              "mobile_phone": {
                "type": "string",
                "description": "The Mobile Phone of the Company User"
              },
              "fax_number": {
                "type": "string",
                "description": "The Fax Number of the Company User"
              },
              "email_address": {
                "type": "string",
                "format": "email",
                "description": "The Email Address of the Company User"
              },
              "email_signature": {
                "type": "string",
                "description": "The Email Signature of the Company User"
              },
              "is_active": {
                "type": "boolean",
                "description": "The Active status of the Company User"
              },
              "is_employee": {
                "type": "boolean",
                "description": "The Employee status of the Company User",
                "default": false
              },
              "employee_id": {
                "type": "string",
                "description": "The ID of the Employee of the Company User when `user[is_employee]` is set to `true`"
              },
              "notes": {
                "type": "string",
                "description": "The Notes (notes, keywords, tags) of the Company User"
              },
              "country_code": {
                "type": "string",
                "description": "The Country Code of the Company User"
              },
              "state_code": {
                "type": "string",
                "description": "The State Code of the Company User"
              },
              "initials": {
                "type": "string",
                "description": "The Initials of the Company User"
              },
              "origin_id": {
                "type": "string",
                "description": "The Origin ID of the Company User"
              },
              "origin_data": {
                "type": "string",
                "description": "The Origin Data of the Company User"
              },
              "vendor_id": {
                "type": "integer",
                "description": "The ID of the Vendor of the Company User"
              },
              "avatar": {
                "type": "string",
                "description": "The Avatar of the Company User.\nTo upload avatar you must upload whole payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `user[avatar]` as file.\n"
              }
            }
          }
        }
      }
    },
    "CompanyUserSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Company Users Sync Body",
        "type": "object",
        "required": [
          "updates"
        ],
        "properties": {
          "updates": {
            "title": "Company Users",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the Company User"
                },
                "first_name": {
                  "type": "string",
                  "description": "The First Name of the Company User"
                },
                "last_name": {
                  "type": "string",
                  "description": "The Last Name of the Company User"
                },
                "job_title": {
                  "type": "string",
                  "description": "The Job Title of the Company User"
                },
                "address": {
                  "type": "string",
                  "description": "The Address of the Company User"
                },
                "city": {
                  "type": "string",
                  "description": "The City of the Company User"
                },
                "zip": {
                  "type": "string",
                  "description": "The Zip code of the Company User"
                },
                "business_phone": {
                  "type": "string",
                  "description": "The Business Phone of the Company User"
                },
                "business_phone_extension": {
                  "type": "string",
                  "description": "The Business Phone Extension of the Company User"
                },
                "mobile_phone": {
                  "type": "string",
                  "description": "The Mobile Phone of the Company User"
                },
                "fax_number": {
                  "type": "string",
                  "description": "The Fax Number of the Company User"
                },
                "email_address": {
                  "type": "string",
                  "format": "email",
                  "description": "The Email Address of the Company User"
                },
                "email_signature": {
                  "type": "string",
                  "description": "The Email Signature of the Company User"
                },
                "is_active": {
                  "type": "boolean",
                  "description": "The Active status of the Company User"
                },
                "is_employee": {
                  "type": "boolean",
                  "description": "The Employee status of the Company User",
                  "default": false
                },
                "employee_id": {
                  "type": "string",
                  "description": "The ID of the Employee of the Company User when `user[is_employee]` is set to `true`"
                },
                "notes": {
                  "type": "string",
                  "description": "The Notes (notes, keywords, tags) of the Company User"
                },
                "country_code": {
                  "type": "string",
                  "description": "The Country Code of the Company User"
                },
                "state_code": {
                  "type": "string",
                  "description": "The State Code of the Company User"
                },
                "initials": {
                  "type": "string",
                  "description": "The Initials of the Company User"
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Origin ID of the Company User"
                },
                "origin_data": {
                  "type": "string",
                  "description": "The Origin Data of the Company User"
                },
                "vendor_id": {
                  "type": "integer",
                  "description": "The ID of the Vendor of the Company User"
                }
              }
            }
          }
        }
      }
    },
    "DirectCostItemCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "item"
        ],
        "properties": {
          "item": {
            "title": "Direct Cost Item",
            "type": "object",
            "description": "Direct Cost Item object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Invoice for April"
              },
              "direct_cost_date": {
                "type": "string",
                "format": "date",
                "description": "Date",
                "example": "2016-12-14"
              },
              "employee_id": {
                "type": "integer",
                "description": "ID of the Employee tied to the Direct Cost Item",
                "example": 43223
              },
              "invoice_number": {
                "type": "string",
                "description": "Unique identifier for a Direct Cost Item of type invoice",
                "example": "Invoice # abc123"
              },
              "origin_data": {
                "type": "string",
                "description": "Origin Data",
                "example": "OD-2398273424"
              },
              "origin_id": {
                "type": "string",
                "description": "Origin ID",
                "example": 23423
              },
              "payment_date": {
                "type": "string",
                "format": "date",
                "description": "Payment Date",
                "example": "2017-01-10"
              },
              "received_date": {
                "type": "string",
                "format": "date",
                "description": "Received Date",
                "example": "2017-01-08"
              },
              "status": {
                "type": "string",
                "description": "Status",
                "enum": [
                  "draft",
                  "pending",
                  "revise_and_resubmit",
                  "approved"
                ],
                "example": "approved"
              },
              "terms": {
                "type": "string",
                "description": "The agreed upon Terms for the date of payment",
                "example": "Net 50"
              },
              "vendor_id": {
                "type": "integer",
                "description": "Vendor ID",
                "example": 23423
              },
              "direct_cost_type": {
                "type": "string",
                "description": "Type",
                "enum": [
                  "invoice",
                  "expense",
                  "payroll"
                ],
                "example": "invoice"
              }
            }
          }
        }
      }
    },
    "DirectCostItemUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "item"
        ],
        "properties": {
          "item": {
            "title": "Direct Cost Item",
            "type": "object",
            "description": "Direct Cost Item object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Home Depot Purchase"
              },
              "employee_id": {
                "type": "integer",
                "description": "Employee ID tied to the Direct Cost Item",
                "example": 14522
              },
              "invoice_number": {
                "type": "string",
                "description": "Unique identifier for a Direct Cost Item of type invoice",
                "example": "Invoice # abc123"
              },
              "direct_cost_date": {
                "type": "string",
                "format": "date",
                "description": "Date",
                "example": "2016-12-14"
              },
              "origin_data": {
                "type": "string",
                "description": "Origin Data",
                "example": "OD-2398273424"
              },
              "origin_id": {
                "type": "string",
                "description": "Origin ID",
                "example": "43232"
              },
              "payment_date": {
                "type": "string",
                "format": "date",
                "description": "Payment Date",
                "example": "2017-01-0"
              },
              "received_date": {
                "type": "string",
                "format": "date",
                "description": "Received Date",
                "example": "2017-01-10"
              },
              "status": {
                "type": "string",
                "description": "Status",
                "enum": [
                  "draft",
                  "pending",
                  "revise_and_resubmit",
                  "approved"
                ],
                "example": "approved"
              },
              "terms": {
                "type": "string",
                "description": "The agreed upon Terms for the date of payment",
                "example": "Net 30"
              },
              "vendor_id": {
                "type": "integer",
                "description": "Vendor ID",
                "example": 43122
              }
            }
          }
        }
      }
    },
    "DirectCostItemSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "updates"
        ],
        "properties": {
          "updates": {
            "type": "array",
            "description": "An array of Direct Cost Items",
            "items": {
              "title": "Direct Cost Item",
              "type": "object",
              "description": "Direct Cost Item object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID",
                  "example": 8341
                },
                "description": {
                  "type": "string",
                  "description": "Description",
                  "example": "Home Depot Purchase"
                },
                "direct_cost_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Date",
                  "example": "2016-12-14"
                },
                "employee_id": {
                  "type": "integer",
                  "description": "Employee ID",
                  "example": 54672
                },
                "invoice_number": {
                  "type": "string",
                  "description": "Unique identifier for a Direct Cost Item of type invoice",
                  "example": "Invoice # abc123"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Origin Data",
                  "example": "OD-2398273424"
                },
                "origin_id": {
                  "type": "string",
                  "description": "Origin ID",
                  "example": "23423"
                },
                "payment_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Payment Date",
                  "example": "2017-01-13"
                },
                "received_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Received Date",
                  "example": "2017-01-15"
                },
                "status": {
                  "type": "string",
                  "description": "Status",
                  "enum": [
                    "draft",
                    "pending",
                    "revise_and_resubmit",
                    "approved"
                  ],
                  "example": "approved"
                },
                "terms": {
                  "type": "string",
                  "description": "The agreed upon Terms for the date of payment",
                  "example": "Net 20"
                },
                "vendor_id": {
                  "type": "integer",
                  "description": "Vendor ID",
                  "example": 54662
                }
              }
            }
          }
        }
      }
    },
    "DirectCostLineItemBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "line_item"
        ],
        "properties": {
          "line_item": {
            "title": "Line Item",
            "type": "object",
            "description": "Line Item object",
            "properties": {
              "amount": {
                "type": "number",
                "format": "float",
                "description": "Amount",
                "example": 1000
              },
              "cost_code_id": {
                "type": "integer",
                "description": "Cost Code ID",
                "example": 4682
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "100' of Copper Piping"
              },
              "direct_cost_id": {
                "type": "integer",
                "description": "Direct Cost ID",
                "example": 81753
              },
              "extended_type": {
                "type": "string",
                "description": "Calculated amount from quantity and unit cost or manually entered amount",
                "enum": [
                  "manual",
                  "calculated"
                ],
                "example": "manual"
              },
              "quantity": {
                "type": "number",
                "format": "float",
                "description": "Quantity of described item",
                "example": 82.0201
              },
              "line_item_type_id": {
                "type": "integer",
                "description": "Line Item Type ID",
                "example": 26943
              },
              "origin_data": {
                "type": "string",
                "description": "Origin Data",
                "example": "OD-2398273424"
              },
              "origin_id": {
                "type": "string",
                "description": "Origin ID",
                "example": "px-1990"
              },
              "unit_cost": {
                "type": "number",
                "format": "float",
                "description": "Unit cost of described item",
                "example": 12.03
              },
              "uom": {
                "type": "string",
                "description": "Unit of measure of the described item",
                "example": "cubic feet"
              }
            }
          }
        }
      }
    },
    "DirectCostLineItemSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Direct Cost Line Item Sync Body",
        "type": "object",
        "required": [
          "updates"
        ],
        "properties": {
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "LineItem",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID"
                },
                "amount": {
                  "type": "number",
                  "format": "float",
                  "description": "Amount",
                  "example": 1000
                },
                "cost_code_id": {
                  "type": "integer",
                  "description": "Cost Code ID",
                  "example": 4682
                },
                "description": {
                  "type": "string",
                  "description": "Description",
                  "example": "100' of Copper Piping"
                },
                "direct_cost_id": {
                  "type": "integer",
                  "description": "Direct Cost ID",
                  "example": 81753
                },
                "extended_type": {
                  "type": "string",
                  "description": "Calculated amount from quantity and unit cost or manually entered amount",
                  "enum": [
                    "manual",
                    "calculated"
                  ],
                  "example": "manual"
                },
                "quantity": {
                  "type": "number",
                  "format": "float",
                  "description": "Quantity of described item",
                  "example": 82.0201
                },
                "line_item_type_id": {
                  "type": "integer",
                  "description": "Line Item Type ID",
                  "example": 26943
                },
                "origin_data": {
                  "type": "string",
                  "description": "Origin Data",
                  "example": "OD-2398273424"
                },
                "origin_id": {
                  "type": "string",
                  "description": "Origin ID",
                  "example": "px-1990"
                },
                "unit_cost": {
                  "type": "number",
                  "format": "float",
                  "description": "Unit cost of described item",
                  "example": 12.03
                },
                "uom": {
                  "type": "string",
                  "description": "Unit of measure of the described item",
                  "example": "cubic feet"
                }
              }
            }
          }
        }
      }
    },
    "ProjectUserBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Project User Body",
        "type": "object",
        "required": [
          "user"
        ],
        "properties": {
          "user": {
            "title": "Project User",
            "type": "object",
            "required": [
              "email_address",
              "last_name"
            ],
            "properties": {
              "first_name": {
                "type": "string",
                "description": "The First Name of the Project User"
              },
              "last_name": {
                "type": "string",
                "description": "The Last Name of the Project User"
              },
              "job_title": {
                "type": "string",
                "description": "The Job Title of the Project User"
              },
              "address": {
                "type": "string",
                "description": "The street Address of the Project User"
              },
              "city": {
                "type": "string",
                "description": "The City in which the Project User resides"
              },
              "zip": {
                "type": "string",
                "description": "The Zip Code of the Project User"
              },
              "business_phone": {
                "type": "string",
                "description": "The Business Phone number of the Project User"
              },
              "business_phone_extension": {
                "type": "string",
                "description": "The Business Phone Extension of the Project User"
              },
              "mobile_phone": {
                "type": "string",
                "description": "The Mobile Phone number of the Project User"
              },
              "fax_number": {
                "type": "string",
                "description": "The Fax Number of the Project User"
              },
              "email_address": {
                "type": "string",
                "format": "email",
                "description": "The Email Address of the Project User"
              },
              "email_signature": {
                "type": "string",
                "description": "The Email Signature of the Project User"
              },
              "is_active": {
                "type": "boolean",
                "description": "The Active status of the Project User"
              },
              "is_employee": {
                "type": "boolean",
                "description": "The Employee status of the Project User",
                "default": false
              },
              "employee_id": {
                "type": "string",
                "description": "The Employee ID of the Project User"
              },
              "notes": {
                "type": "string",
                "description": "The Notes (notes\/keywords\/tags) of the Project User"
              },
              "country_code": {
                "type": "string",
                "description": "The Country Code of the Project User"
              },
              "state_code": {
                "type": "string",
                "description": "The State Code of the Project User"
              },
              "initials": {
                "type": "string",
                "description": "The Initials of the Project User"
              },
              "vendor_id": {
                "type": "integer",
                "description": "The Vendor ID of the Project User"
              },
              "avatar": {
                "type": "string",
                "description": "Project User Avatar.\nTo upload avatar you must upload whole payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `user[avatar]` as file.\n"
              }
            }
          }
        }
      }
    },
    "SubJob": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "sub_job"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 4393334
          },
          "sub_job": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name",
                "example": "Floor 2"
              },
              "code": {
                "type": "string",
                "description": "Unique code in the scope of a Project",
                "example": 18
              }
            }
          }
        }
      }
    },
    "MarkupAttachmentBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "project_id",
          "holder_type",
          "holder_id",
          "layer_id",
          "element_id",
          "item_id",
          "type",
          "x",
          "y"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "description": "The ID of the Company the Project belongs to",
            "example": 1
          },
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Markup Layer belongs to",
            "example": 1
          },
          "holder_type": {
            "type": "string",
            "description": "Type of the Holder that belongs to the Markup Layer",
            "enum": [
              "DrawingRevision"
            ]
          },
          "holder_id": {
            "type": "string",
            "description": "The ID of the Holder that belongs to the Markup Layer",
            "example": 3000
          },
          "layer_id": {
            "type": "integer",
            "description": "The ID of the Markup Layer",
            "example": 2000
          },
          "element_id": {
            "type": "integer",
            "description": "The ID of the Markup Layer Element the Markup Attachment belongs to",
            "example": 9001
          },
          "item_id": {
            "type": "integer",
            "description": "Attached Item ID",
            "example": 42
          },
          "type": {
            "type": "string",
            "description": "Attached Item type",
            "example": "Rfi::Header",
            "enum": [
              "Checklist::List",
              "Drawing",
              "DrawingSketch",
              "FolderFile",
              "Image",
              "Observations::Item",
              "PotentialChangeOrder",
              "PunchItem",
              "Rfi::Header",
              "SubmittalLog"
            ]
          },
          "x": {
            "type": "integer",
            "description": "Position X coordinate",
            "example": 200
          },
          "y": {
            "type": "integer",
            "description": "Position Y coordinate",
            "example": 150
          }
        }
      }
    },
    "MarkupLayerElementBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "project_id",
          "holder_type",
          "holder_id",
          "markup"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "description": "The ID of the Company the Project belongs to",
            "example": 2
          },
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Markup Layer Element belongs to",
            "example": 4
          },
          "holder_type": {
            "type": "string",
            "description": "Type of the Holder that belongs to the Markup Layer",
            "enum": [
              "DrawingRevision"
            ]
          },
          "holder_id": {
            "type": "string",
            "description": "the ID of the Holder that belongs to the Markup Layer",
            "example": 9001
          },
          "markup": {
            "title": "MarkupLayerElement",
            "type": "object",
            "description": "Markup Layer Element object",
            "required": [
              "layer_id",
              "type",
              "w",
              "h"
            ],
            "properties": {
              "layer_id": {
                "type": "integer",
                "description": "ID of the Markup Layer",
                "example": 42
              },
              "type": {
                "type": "string",
                "description": "Markup type",
                "example": "Text",
                "enum": [
                  "Line",
                  "Arrow",
                  "DoubleArrow",
                  "Ellipse",
                  "Rectangle",
                  "Freehand",
                  "Highlighter",
                  "Hash",
                  "Scribble",
                  "Cloud",
                  "Text",
                  "Pin",
                  "Image",
                  "ImageCollection"
                ]
              },
              "w": {
                "type": "integer",
                "description": "Width",
                "example": 50
              },
              "h": {
                "type": "integer",
                "description": "Height",
                "example": 30
              },
              "x": {
                "type": "number",
                "format": "float",
                "default": 0,
                "example": 432.234,
                "description": "Position X coordinate"
              },
              "y": {
                "type": "number",
                "format": "float",
                "default": 0,
                "example": 234.432,
                "description": "Position Y coordinate"
              },
              "propertyValues": {
                "$ref": "#\/definitions\/PropertyValues"
              },
              "attachments": {
                "type": "array",
                "description": "Markup Attachments",
                "example": [
                  {
                    "item_id": 15,
                    "type": "Rfi::Header",
                    "x": 200,
                    "y": 150
                  },
                  {
                    "item_id": 16,
                    "type": "PunchItem",
                    "x": 250,
                    "y": 150
                  }
                ],
                "items": {
                  "type": "object",
                  "title": "MarkupAttachment",
                  "required": [
                    "item_id",
                    "type"
                  ],
                  "properties": {
                    "item_id": {
                      "type": "integer",
                      "description": "Attached Item ID"
                    },
                    "type": {
                      "type": "string",
                      "description": "Attached Item type",
                      "enum": [
                        "Checklist::List",
                        "Drawing",
                        "DrawingSketch",
                        "FolderFile",
                        "Image",
                        "Observations::Item",
                        "PotentialChangeOrder",
                        "PunchItem",
                        "Rfi::Header",
                        "SubmittalLog"
                      ]
                    },
                    "x": {
                      "type": "integer",
                      "description": "Position X coordinate"
                    },
                    "y": {
                      "type": "integer",
                      "description": "Position Y coordinate"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "MeetingBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "meeting"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Meetings belongs to"
          },
          "meeting": {
            "title": "Meeting",
            "type": "object",
            "description": "Meeting object",
            "properties": {
              "position": {
                "type": "integer",
                "description": "The Position of the Meeting"
              },
              "title": {
                "type": "string",
                "description": "The Title of the Meeting"
              },
              "location": {
                "type": "string",
                "description": "The Location of the Meeting"
              },
              "minutes": {
                "type": "string",
                "description": "The Minutes of the Meeting"
              },
              "meeting_date": {
                "type": "string",
                "format": "date",
                "description": "The Date of the Meeting"
              },
              "overview": {
                "type": "string",
                "description": "The Description of the Meeting"
              },
              "occurred": {
                "type": "boolean",
                "description": "The Occurred status of the Meeting",
                "default": false
              },
              "start_time": {
                "type": "string",
                "description": "The Start Time of the Meeting"
              },
              "finish_time": {
                "type": "string",
                "description": "The Finish Time of the Meeting"
              },
              "is_private": {
                "type": "boolean",
                "description": "The Private status of the Meeting"
              },
              "conclusion": {
                "type": "string",
                "description": "The Conclusion of the Meeting"
              },
              "is_draft": {
                "type": "boolean",
                "description": "The Draft status of the Meeting",
                "default": false
              },
              "attendees": {
                "type": "array",
                "description": "An array of the IDs of the Attendees of the Meeting",
                "items": {
                  "type": "integer",
                  "description": "The ID of the Attendee"
                }
              }
            }
          },
          "attachments": {
            "type": "array",
            "description": "Meeting Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "project_id": 513526,
          "meeting": {
            "position": 1,
            "title": "API Documentation",
            "description": "Discuss API documentation",
            "meeting_date": "2014-05-27",
            "location": "Victoria Conference Room",
            "is_draft": false,
            "is_private": false,
            "mode": "minutes",
            "occurred": true,
            "start_time": "2:00 PM",
            "finish_time": "3:00 PM",
            "attendees": [
              972145,
              972147
            ]
          }
        }
      }
    },
    "MeetingCategoryBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "meeting_id",
          "meeting_category"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Meeting Category belongs to"
          },
          "meeting_id": {
            "type": "integer",
            "description": "The ID of the Meeting the Meeting Category belongs to"
          },
          "meeting_category": {
            "title": "Meeting Category",
            "type": "object",
            "description": "Meeting Category object",
            "properties": {
              "position": {
                "type": "integer",
                "description": "The Position of the Meeting Category"
              },
              "title": {
                "type": "string",
                "description": "The Title of the Meeting Category"
              }
            }
          }
        },
        "example": {
          "project_id": 513526,
          "meeting_id": 213513,
          "meeting_category": {
            "title": "Uncategorized Items",
            "position": 1
          }
        }
      }
    },
    "MeetingTopicBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "meeting_id",
          "meeting_topic"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Meeting Topic belongs to"
          },
          "meeting_id": {
            "type": "integer",
            "description": "The ID of the Meeting the Meeting Topic belongs to"
          },
          "meeting_topic": {
            "title": "Meeting Topic",
            "type": "object",
            "description": "Meeting topic object",
            "properties": {
              "title": {
                "type": "string",
                "description": "The Title of the Meeting Topic"
              },
              "description": {
                "type": "string",
                "description": "The Description of the Meeting Topic"
              },
              "due_date": {
                "type": "string",
                "format": "date",
                "description": "The Due Date of the Meeting Topic"
              },
              "status": {
                "type": "string",
                "description": "The Status of the Meeting Topic",
                "enum": [
                  "Open",
                  "On Hold",
                  "Closed"
                ]
              },
              "minutes": {
                "type": "string",
                "description": "The Minutes of the Meeting Topic"
              },
              "is_private": {
                "type": "boolean",
                "description": "The Private status of the Meeting Topic"
              },
              "closed_at": {
                "type": "string",
                "format": "date-time",
                "description": "The Date of the Meeting Topic being closed"
              },
              "priority": {
                "type": "string",
                "description": "The Priority of the Meeting Topic",
                "enum": [
                  "",
                  "High",
                  "Medium",
                  "Low"
                ]
              },
              "added_under_agenda": {
                "type": "boolean",
                "description": "The Added Under Agenda status of the Meeting Topic",
                "default": true
              },
              "meeting_wide_number": {
                "type": "integer",
                "description": "The Meeting Wide Number of the Meeting Topic"
              },
              "meeting_category_id": {
                "type": "integer",
                "description": "The ID of the Meeting Category the Meeting Topic belongs to"
              },
              "assignment_ids": {
                "type": "array",
                "description": "An array of the IDs of the Assignments of the Meeting Topic.\n\nSetting `meeting_topic[assignment_ids]` to \"none\" erases assignments.\n",
                "items": {
                  "type": [
                    "integer",
                    "string"
                  ]
                }
              }
            }
          },
          "attachments": {
            "type": "array",
            "description": "An array of the Attachments of the Meeting Topic.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "project_id": 513526,
          "meeting_id": 135135,
          "meeting_topic": {
            "title": "Cost Item Matrix",
            "status": "On Hold",
            "priority": "Low",
            "description": "GM will audit our process next week",
            "minutes": "<p><span style=\"font-size: large;\">Please look at Item 1 and have those pieces completed <strong>before<\/strong><\/span><\/p>",
            "created_on": "2015-05-15",
            "due_date": "2015-04-29",
            "assignment_ids": [
              381313,
              83128
            ]
          }
        }
      }
    },
    "MeetingAttendeeBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "properties": {
          "meeting_attendee_record": {
            "type": "object",
            "description": "Meeting Attendee record",
            "required": [
              "login_information_id"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "Attendance status",
                "example": "Present",
                "enum": [
                  "Present",
                  "Absent",
                  "For Distribution Only",
                  "Conference"
                ]
              },
              "login_information_id": {
                "type": "integer",
                "description": "The ID of the User to associate with the Meeting",
                "example": 999
              }
            }
          }
        }
      }
    },
    "PunchItemCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Punch Item Body",
        "type": "object",
        "required": [
          "project_id",
          "punch_item"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID to which the Punch Item belongs to"
          },
          "punch_item": {
            "type": "object",
            "title": "Punch Item",
            "required": [
              "name"
            ],
            "properties": {
              "description": {
                "type": "string",
                "description": "Description"
              },
              "due": {
                "type": "string",
                "format": "date",
                "description": "Due date"
              },
              "name": {
                "type": "string",
                "description": "Name"
              },
              "position": {
                "type": "integer",
                "description": "Position"
              },
              "private": {
                "type": "boolean",
                "description": "Privacy status"
              },
              "status": {
                "type": "string",
                "description": "Status",
                "enum": [
                  "Open",
                  "Closed",
                  "Overdue",
                  "Pending"
                ]
              },
              "date_initiated": {
                "type": "string",
                "format": "date",
                "description": "Date created"
              },
              "schedule_impact": {
                "type": "string",
                "description": "Schedule impact status"
              },
              "schedule_impact_days": {
                "type": "integer",
                "description": "Schedule impact value in days"
              },
              "reference": {
                "type": "string",
                "description": "Used to create a reference point between a Punch Item within Procore and a corresponding Punch Item outside of Procore"
              },
              "cost_impact": {
                "type": "string",
                "description": "Cost impact Status"
              },
              "cost_impact_amount": {
                "type": "integer",
                "description": "Cost impact amount"
              },
              "can_email": {
                "type": "boolean",
                "description": "Punch Item has assignees or distribution members to email to"
              },
              "drawing_ids": {
                "type": "array",
                "description": "Array of Drawing IDs",
                "items": {
                  "type": "string"
                }
              },
              "distribution_members": {
                "type": "array",
                "description": "Users on the Punch Item distribution list",
                "items": {
                  "type": "string"
                }
              },
              "created_by": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "login": {
                    "type": "string"
                  }
                }
              },
              "trade_id": {
                "type": "integer",
                "description": "Trade IDs"
              },
              "punch_item_type_id": {
                "type": "integer",
                "description": "Punch Item Type ID"
              },
              "login_information_ids": {
                "type": "array",
                "description": "Array of the User IDs of the Punch Item Assignments",
                "items": {
                  "type": "integer"
                }
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Punch Item. `location_id` takes precedence over `mt_location`"
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "items": {
                  "type": "string"
                }
              },
              "attachments": {
                "type": "array",
                "description": "Punch Item Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              },
              "images": {
                "type": "array",
                "description": "Punch Item Images.\nTo upload images you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `punch_item[images][]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "punch_item": {
            "description": "Here is my updated description",
            "due_date": "2016-01-01T00:00:00.000Z",
            "name": "My Updated Item",
            "private": false,
            "status": 0,
            "schedule_impact": "yes_known",
            "schedule_impact_days": 43,
            "reference": "5rt498",
            "cost_impact": "yes_known",
            "cost_impact_amount": 54,
            "can_email": true,
            "location_id": 9823,
            "trade_id": 1234,
            "punch_item_type_id": 5436,
            "cost_code_id": 9900,
            "login_information_ids": [
              2343,
              45343
            ],
            "mt_location": [
              "upstairs",
              "meetingroom"
            ],
            "attachments": [
              "<attachment.png>"
            ],
            "images": [
              "<image.jpeg>"
            ]
          }
        }
      }
    },
    "PunchItemUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Punch Item Body",
        "type": "object",
        "required": [
          "project_id",
          "punch_item"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID to which the Punch Item belongs to"
          },
          "punch_item": {
            "type": "object",
            "title": "Punch Item",
            "required": [
              "name"
            ],
            "properties": {
              "description": {
                "type": "string",
                "description": "Description"
              },
              "due": {
                "type": "string",
                "format": "date",
                "description": "Due date"
              },
              "name": {
                "type": "string",
                "description": "Name"
              },
              "position": {
                "type": "integer",
                "description": "Position"
              },
              "private": {
                "type": "boolean",
                "description": "Privacy status"
              },
              "status": {
                "type": "string",
                "description": "Status",
                "enum": [
                  "Open",
                  "Closed",
                  "Overdue",
                  "Pending"
                ]
              },
              "date_initiated": {
                "type": "string",
                "format": "date",
                "description": "Date created"
              },
              "schedule_impact": {
                "type": "string",
                "description": "Schedule impact status"
              },
              "schedule_impact_days": {
                "type": "integer",
                "description": "Schedule impact value in days"
              },
              "reference": {
                "type": "string",
                "description": "Used to create a reference point between a punch item within Procore and a corresponding punch item outside of Procore"
              },
              "cost_impact": {
                "type": "string",
                "description": "Cost impact status"
              },
              "cost_impact_amount": {
                "type": "integer",
                "description": "Cost impact amount"
              },
              "can_email": {
                "type": "boolean",
                "description": "Punch Item has assignees or distribution members to email to"
              },
              "drawing_ids": {
                "type": "array",
                "description": "Array of Drawing IDs",
                "items": {
                  "type": "string"
                }
              },
              "distribution_members": {
                "type": "array",
                "description": "Users on the Punch Item distribution list",
                "items": {
                  "type": "string"
                }
              },
              "created_by": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "login": {
                    "type": "string"
                  }
                }
              },
              "trade_id": {
                "type": "integer",
                "description": "Trade ID"
              },
              "punch_item_type_id": {
                "type": "integer",
                "description": "Punch Item Type ID"
              },
              "login_information_ids": {
                "type": "array",
                "description": "Array of the User IDs of the Punch Item Assignments",
                "items": {
                  "type": "integer"
                }
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Punch Item. `location_id` takes precedence over `mt_location`"
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "items": {
                  "type": "string"
                }
              },
              "attachments": {
                "type": "array",
                "description": "Punch Item Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              },
              "images": {
                "type": "array",
                "description": "Punch Item Images.\nTo upload images you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `punch_item[images][]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "punch_item": {
            "description": "Here is my updated description",
            "due_date": "2016-01-01T00:00:00.000Z",
            "name": "My Updated Item",
            "private": false,
            "status": 0,
            "schedule_impact": "yes_known",
            "schedule_impact_days": 43,
            "reference": "4543b34",
            "cost_impact": "yes_known",
            "cost_impact_amount": 54,
            "can_email": true,
            "location_id": 9823,
            "trade_id": 1234,
            "punch_item_type_id": 5436,
            "cost_code_id": 9900,
            "login_information_ids": [
              2343,
              45343
            ],
            "mt_location": [
              "upstairs",
              "meetingroom"
            ],
            "attachments": [
              "<attachment.png>"
            ],
            "images": [
              "<image.jpeg>"
            ]
          }
        }
      }
    },
    "PunchItemTypeBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Punch Item Type Body",
        "type": "object",
        "required": [
          "project_id",
          "punch_item_type"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Punch Item Type belongs to"
          },
          "punch_item_type": {
            "type": "object",
            "title": "Punch Item Type",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name"
              }
            }
          }
        },
        "example": {
          "project_id": 151335,
          "punch_item_type": {
            "name": "My Punch Item Type"
          }
        }
      }
    },
    "PunchItemAssignmentUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "project_id",
          "punch_item_assignment"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID to which the Punch Item Assignment belongs to"
          },
          "punch_item_assignment": {
            "type": "object",
            "description": "Punch Item Assignment object",
            "properties": {
              "approved": {
                "type": "boolean",
                "description": "Resolution status",
                "default": false
              },
              "comment": {
                "type": "string",
                "description": "Comment"
              },
              "login_information_id": {
                "type": "integer",
                "description": "User ID"
              },
              "attachments": {
                "type": "array",
                "description": "Punch Item Assignment attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "punch_item_assignment": {
            "approved": true,
            "comment": "This Punch Item task is complete",
            "login_information_id": 420,
            "attachments": [
              "<file.png>"
            ]
          }
        }
      }
    },
    "PurchaseOrderContractBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "purchase_order_contract"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 66005
          },
          "purchase_order_contract": {
            "title": "Purchase Order Contract",
            "type": "object",
            "description": "Purchase Order Contract object",
            "properties": {
              "assignee_id": {
                "type": "integer",
                "description": "Assignee ID",
                "example": 4325
              },
              "bill_to_address": {
                "type": "string",
                "description": "Bill to address",
                "example": "Santa Claus Lane, Carpinteria, CA"
              },
              "delivery_date": {
                "type": "string",
                "format": "date",
                "description": "Delivery date",
                "example": "2012-10-23T00:00:00.000Z"
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "<p>3 tons of cement.<\/p>"
              },
              "executed": {
                "type": "boolean",
                "description": "Executed status",
                "example": false
              },
              "origin_data": {
                "type": "string",
                "description": "Origin data",
                "example": "OD-2398273424"
              },
              "origin_id": {
                "type": "string",
                "description": "Origin ID",
                "example": 459247544
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": "PO-17-1990-00001"
              },
              "payment_terms": {
                "type": "string",
                "description": "Payment terms",
                "example": "Net 20"
              },
              "private": {
                "type": "boolean",
                "description": "Enable\/Disable private status",
                "example": false
              },
              "retainage_percent": {
                "type": "string",
                "description": "Retainage percent",
                "example": "10"
              },
              "ship_to_address": {
                "type": "string",
                "description": "Ship to address",
                "example": "1410 Harbor View Drive Newport Beach, CA 92663"
              },
              "ship_via": {
                "type": "string",
                "description": "Ship via",
                "example": "Acme Shipping"
              },
              "status": {
                "type": "string",
                "description": "Status",
                "enum": [
                  "Draft",
                  "Processing",
                  "Submitted",
                  "Partially Received",
                  "Received",
                  "Approved",
                  "Closed"
                ],
                "example": "Processing"
              },
              "title": {
                "type": "string",
                "description": "Title",
                "example": "Initial cement order."
              },
              "vendor_id": {
                "type": "integer",
                "description": "Vendor ID",
                "example": 92681
              }
            }
          }
        }
      }
    },
    "PurchaseOrderContractSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "updates"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID"
          },
          "updates": {
            "type": "array",
            "description": "Updated Purchase Order Contracts",
            "items": {
              "title": "Purchase Order Contract",
              "type": "object",
              "description": "Purchase Order Contract object",
              "properties": {
                "assignee_id": {
                  "type": "integer",
                  "description": "Assignee ID",
                  "example": 38175
                },
                "bill_to_address": {
                  "type": "string",
                  "description": "Bill to address",
                  "example": "1410 Harbor View Drive Newport Beach, CA 92663"
                },
                "delivery_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Delivery date",
                  "example": "2012-10-23T00:00:00.000Z"
                },
                "description": {
                  "type": "string",
                  "description": "Description",
                  "example": "<p>3 tons of cement.<\/p>"
                },
                "executed": {
                  "type": "boolean",
                  "description": "Executed status",
                  "example": false
                },
                "origin_data": {
                  "type": "string",
                  "description": "Origin Data",
                  "example": "OD-2398273424"
                },
                "origin_id": {
                  "type": "string",
                  "description": "Origin ID",
                  "example": 459247544
                },
                "number": {
                  "type": "string",
                  "description": "Number",
                  "example": "PO-17-1990-00001"
                },
                "payment_terms": {
                  "type": "string",
                  "description": "Payment terms",
                  "example": "Net 30"
                },
                "private": {
                  "type": "boolean",
                  "description": "Enable\/Disable private status",
                  "example": false
                },
                "retainage_percent": {
                  "type": "string",
                  "description": "Retainage percent",
                  "example": 10
                },
                "ship_to_address": {
                  "type": "string",
                  "description": "Ship to address",
                  "example": "Santa Claus Lane, Carpinteria, CA"
                },
                "ship_via": {
                  "type": "string",
                  "description": "Ship via",
                  "example": "Acme Shipping"
                },
                "status": {
                  "type": "string",
                  "description": "Status",
                  "enum": [
                    "Draft",
                    "Processing",
                    "Submitted",
                    "Partially Received",
                    "Received",
                    "Approved",
                    "Closed"
                  ],
                  "example": "Processing"
                },
                "title": {
                  "type": "string",
                  "description": "Title",
                  "example": "Initial cement order."
                },
                "vendor_id": {
                  "type": "integer",
                  "description": "Vendor ID",
                  "example": 28572
                }
              }
            }
          }
        }
      }
    },
    "WorkOrderContractBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "work_order_contract"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID"
          },
          "work_order_contract": {
            "title": "Work Order Contract",
            "type": "object",
            "description": "Work Order Contract object",
            "properties": {
              "actual_completion_date": {
                "type": "string",
                "format": "date",
                "description": "Actual completion date",
                "example": "2012-10-27T00:00:00.000Z"
              },
              "contract_estimated_completion_date": {
                "type": "string",
                "format": "date",
                "description": "Estimated completion date",
                "example": "2012-10-31T00:00:00.000Z"
              },
              "contract_start_date": {
                "type": "string",
                "format": "date",
                "description": "Start date",
                "example": "2012-10-03T00:00:00.000Z"
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "<p>Paving level 3 parking lot.<\/p>"
              },
              "exclusions": {
                "type": "string",
                "description": "Exclusions",
                "example": "<p>Stairs, Elevator platform<\/p>"
              },
              "executed": {
                "type": "boolean",
                "description": "Executed (or not)",
                "default": false,
                "example": false
              },
              "inclusions": {
                "type": "string",
                "description": "Inclusions",
                "example": "<p>Level 3 parking lot.<\/p>"
              },
              "origin_data": {
                "type": "string",
                "description": "Origin Data",
                "example": "OD-2398273423"
              },
              "origin_id": {
                "type": "string",
                "description": "Origin ID",
                "example": 459247543
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": "SC-17-1990-00001"
              },
              "private": {
                "type": "boolean",
                "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
                "example": true
              },
              "retainage_percent": {
                "type": "string",
                "description": "Retainage percent",
                "example": 10.5
              },
              "signed_contract_received_date": {
                "type": "string",
                "format": "date",
                "description": "Signed contract received date",
                "example": "2012-10-25T00:00:00.000Z"
              },
              "status": {
                "type": "string",
                "description": "Status",
                "enum": [
                  "Draft",
                  "Out For Bid",
                  "Out For Signature",
                  "Approved",
                  "Complete",
                  "Terminated",
                  "Void"
                ],
                "example": "Draft"
              },
              "title": {
                "type": "string",
                "description": "Title",
                "example": "Concrete Paving"
              },
              "vendor_id": {
                "type": "integer",
                "description": "Vendor ID",
                "example": 4398347
              }
            }
          }
        }
      }
    },
    "WorkOrderContractSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "updates"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 320923
          },
          "updates": {
            "type": "array",
            "description": "Updated Work order contracts",
            "items": {
              "title": "Work Order Contract",
              "type": "object",
              "description": "Work Order Contract object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID",
                  "example": 3232302
                },
                "actual_completion_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Actual completion date",
                  "example": "2012-10-27T00:00:00.000Z"
                },
                "contract_estimated_completion_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Estimated completion date",
                  "example": "2012-10-31T00:00:00.000Z"
                },
                "contract_start_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Start Date",
                  "example": "2012-10-03T00:00:00.000Z"
                },
                "description": {
                  "type": "string",
                  "description": "Description",
                  "example": "<p>Paving level 3 parking lot.<\/p>"
                },
                "exclusions": {
                  "type": "string",
                  "description": "Exclusions",
                  "example": "<p>Stairs, Elevator platform<\/p>"
                },
                "executed": {
                  "type": "boolean",
                  "description": "Executed (or not)",
                  "default": false,
                  "example": false
                },
                "inclusions": {
                  "type": "string",
                  "description": "Inclusions",
                  "example": "<p>Level 3 parking lot.<\/p>"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Origin Data",
                  "example": "OD-2398273423"
                },
                "origin_id": {
                  "type": "string",
                  "description": "Origin ID",
                  "example": 459247543
                },
                "number": {
                  "type": "string",
                  "description": "Number",
                  "example": "SC-17-1990-00001"
                },
                "private": {
                  "type": "boolean",
                  "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
                  "example": true
                },
                "retainage_percent": {
                  "type": "string",
                  "description": "Retainage percent",
                  "example": 10.5
                },
                "signed_contract_received_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Signed contract received date",
                  "example": "2012-10-25T00:00:00.000Z"
                },
                "status": {
                  "type": "string",
                  "description": "Status",
                  "enum": [
                    "Draft",
                    "Out For Bid",
                    "Out For Signature",
                    "Approved",
                    "Complete",
                    "Terminated",
                    "Void"
                  ],
                  "example": "Draft"
                },
                "title": {
                  "type": "string",
                  "description": "Title",
                  "example": "Concrete Paving"
                },
                "vendor_id": {
                  "type": "integer",
                  "description": "Vendor ID",
                  "example": 4398347
                }
              }
            }
          }
        }
      }
    },
    "LineItemBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "line_item"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 34567
          },
          "line_item": {
            "title": "Line Item",
            "type": "object",
            "description": "The Line Item object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "Amount",
                "example": 1000
              },
              "cost_code_id": {
                "type": "integer",
                "description": "Cost Code ID",
                "example": 77408196
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Cleanup"
              },
              "extended_type": {
                "type": "string",
                "description": "Extended type",
                "enum": [
                  "manual",
                  "calculated"
                ],
                "example": "calculated"
              },
              "quantity": {
                "type": "string",
                "description": "Quantity",
                "example": 20
              },
              "line_item_type_id": {
                "type": "integer",
                "description": "Line Item Type ID",
                "example": 5085801
              },
              "origin_data": {
                "type": "string",
                "description": "Origin Data",
                "example": "AC-1234"
              },
              "origin_id": {
                "type": "string",
                "description": "Origin ID",
                "example": 55555
              },
              "unit_cost": {
                "type": "string",
                "description": "Unit cost",
                "example": 50
              },
              "uom": {
                "type": "string",
                "description": "Unit of measure",
                "example": "Hours"
              }
            }
          }
        }
      }
    },
    "LineItemTypeBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "company_id",
          "line_item_type"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "description": "Company ID",
            "example": 12345
          },
          "line_item_type": {
            "title": "LineItemType",
            "type": "object",
            "description": "Line Item Type object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name",
                "example": "Labor Burden"
              },
              "csv_import_code": {
                "type": "string",
                "description": "Abbreviation code",
                "example": "LB"
              },
              "base_type": {
                "type": "string",
                "enum": [
                  "labor",
                  "equipment",
                  "materials",
                  "commitment",
                  "owner_cost",
                  "professional_services",
                  "other"
                ],
                "description": "Base type",
                "example": "materials"
              }
            }
          }
        }
      }
    },
    "LocationCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "location"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Location belongs to"
          },
          "location": {
            "title": "Location",
            "type": "object",
            "properties": {
              "node_name": {
                "type": "string",
                "description": "The Node Name of the Location"
              },
              "parent_id": {
                "type": "integer",
                "description": "The ID of the Parent Location of the Location"
              },
              "path": {
                "type": "array",
                "description": "Build a Location based on a Path of names",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "project_id": 12415,
          "location": {
            "node_name": "Apartment 404",
            "parent_id": 1
          }
        }
      }
    },
    "LocationUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "location"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Location belongs to"
          },
          "location": {
            "title": "Location",
            "type": "object",
            "properties": {
              "node_name": {
                "type": "string",
                "description": "The Node Name of the Location"
              },
              "parent_id": {
                "type": "integer",
                "description": "The ID of the Parent Location of the Location"
              }
            }
          }
        },
        "example": {
          "project_id": 12415,
          "location": {
            "node_name": "Apartment 404"
          }
        }
      }
    },
    "BudgetLineItemBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "budget_line_item"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Project ID",
            "example": 12345
          },
          "budget_line_item": {
            "title": "Budget Line Item",
            "type": "object",
            "description": "Budget Line Item object",
            "required": [
              "cost_code_id",
              "line_item_type_id"
            ],
            "properties": {
              "cost_code_id": {
                "type": "integer",
                "description": "Cost Code ID",
                "example": 12345
              },
              "line_item_type_id": {
                "type": "integer",
                "description": "Line Item Type ID",
                "example": 12345
              },
              "original_budget_amount": {
                "type": "number",
                "format": "float",
                "description": "Original Budget amount",
                "example": "10000.00"
              },
              "direct_costs": {
                "type": "number",
                "format": "float",
                "description": "Direct Costs",
                "example": "2450.35"
              }
            }
          }
        }
      }
    },
    "BudgetModificationBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "budget_modification"
        ],
        "properties": {
          "budget_modification": {
            "type": "object",
            "title": "Budget Modification",
            "required": [
              "to_budget_line_item_id",
              "transfer_amount"
            ],
            "properties": {
              "from_budget_line_item_id": {
                "type": "integer",
                "description": "ID of the Budget Line Item to transfer from. NOTE 1: required if 'Allow Budget Modifications Which Modify Grand Total' is not checked. NOTE 2: When updating if you want to remove the from_budget_line_item_id reference pass in NULL as the value.",
                "example": 348383
              },
              "notes": {
                "type": "string",
                "description": "Notes on the purpose of the transfer",
                "example": "Transfer money for extra concrete."
              },
              "origin_data": {
                "type": "string",
                "description": "The Origin Data to associate with this Budget Modification",
                "example": "OD-3483830-2"
              },
              "origin_id": {
                "type": "string",
                "description": "The Origin ID to associate with this Budget Modification (must be unique within a company)",
                "example": 4903400
              },
              "to_budget_line_item_id": {
                "type": "integer",
                "description": "ID of the Budget Line Item to transfer to",
                "example": 4034034
              },
              "transfer_amount": {
                "type": "string",
                "format": "float",
                "description": "Transfer amount",
                "example": 4500
              }
            }
          }
        }
      }
    },
    "TimecardEntryBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "project_id",
          "timecard_entry"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Timecard Entry belongs to"
          },
          "timecard_entry": {
            "title": "TimecardEntry",
            "type": "object",
            "description": "Timecard Entry object",
            "required": [
              "date",
              "hours"
            ],
            "properties": {
              "hours": {
                "type": "string",
                "description": "The Hours of the Timecard Entry"
              },
              "billable": {
                "type": "boolean",
                "description": "The Billable status of the Timecard Entry",
                "default": false
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "The Date of the Timecard Entry"
              },
              "description": {
                "type": "string",
                "description": "The Description of the Timecard Entry"
              },
              "timecard_time_type_id": {
                "type": "integer",
                "description": "The ID of the Timecard Time Type of the Timecard Entry"
              },
              "cost_code_id": {
                "type": "integer",
                "description": "The ID of the Cost Code of the Timecard Entry"
              },
              "login_information_id": {
                "type": "integer",
                "description": "The ID of the Login Information of the Timecard Entry"
              }
            }
          }
        },
        "example": {
          "project_id": 513526,
          "timecard_entry": {
            "date": "2015-05-06",
            "description": "Description",
            "billable": true,
            "hours": "15",
            "timecard_time_type_id": 1,
            "cost_code_id": 1,
            "login_information_id": 2341
          }
        }
      }
    },
    "TimecardEntryProjectBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "timecard_entry"
        ],
        "properties": {
          "timecard_entry": {
            "title": "TimecardEntry",
            "type": "object",
            "description": "Timecard Entry object",
            "required": [
              "hours"
            ],
            "properties": {
              "hours": {
                "type": "string",
                "description": "The Hours of the Timecard Entry"
              },
              "billable": {
                "type": "boolean",
                "description": "The Billable status of the Timecard Entry",
                "default": false
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "The Date of the Timecard Entry"
              },
              "description": {
                "type": "string",
                "description": "The Description of the Timecard Entry"
              },
              "timecard_time_type_id": {
                "type": "integer",
                "description": "The ID of the Timecard Time Type of the Timecard Entry"
              },
              "cost_code_id": {
                "type": "integer",
                "description": "The ID of the Cost Code of the Timecard Entry"
              },
              "login_information_id": {
                "type": "integer",
                "description": "The ID of the Login Information of the Timecard Entry"
              }
            }
          }
        },
        "example": {
          "timecard_entry": {
            "date": "2015-05-06",
            "description": "Description",
            "billable": true,
            "hours": "15",
            "timecard_time_type_id": 1,
            "cost_code_id": 1,
            "login_information_id": 2341
          }
        }
      }
    },
    "ScheduleTypeBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "schedule_type"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Schedule Type belongs to"
          },
          "schedule_type": {
            "title": "Schedule Type",
            "type": "object",
            "description": "Schedule Type object",
            "required": [
              "key"
            ],
            "properties": {
              "key": {
                "type": "string",
                "enum": [
                  "Microsoft Project 2010",
                  "Microsoft Project",
                  "Primavera P6",
                  "Primavera Suretrak",
                  "MPX Schedule"
                ],
                "description": "The Key of the Schedule Type"
              },
              "p6_id": {
                "type": "string",
                "description": "The Primavera P6 Identifier of the Schedule Type"
              }
            }
          }
        },
        "example": {
          "project_id": 513526,
          "schedule_type": {
            "key": "Primavera P6",
            "p6_id": "123456abc"
          }
        }
      }
    },
    "StandardCostCodeBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "company_id",
          "standard_cost_code_list_id",
          "standard_cost_code"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "description": "Company ID",
            "example": 12345
          },
          "standard_cost_code_list_id": {
            "type": "integer",
            "description": "Standard Cost Code List ID",
            "example": 12345
          },
          "standard_cost_code": {
            "title": "Standard Cost Code",
            "type": "object",
            "properties": {
              "parent_id": {
                "type": "integer",
                "description": "Parent ID (creates a root Standard Cost Code if not provided)",
                "example": 12345
              },
              "code": {
                "type": "string",
                "description": "Cost code, not including parent prefix",
                "example": "300"
              },
              "name": {
                "type": "string",
                "description": "Description",
                "example": "Site Work"
              }
            }
          }
        }
      }
    },
    "ToDoBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "todo"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the ToDo belongs to"
          },
          "todo": {
            "title": "ToDo",
            "type": "object",
            "description": "ToDo object",
            "required": [
              "name",
              "start_datetime",
              "finish_datetime"
            ],
            "properties": {
              "assignment_id": {
                "type": "integer",
                "description": "The ID of the Assignment of the ToDo"
              },
              "color": {
                "type": "string",
                "description": "The Color of the ToDo"
              },
              "finish_datetime": {
                "type": "string",
                "format": "date-time",
                "description": "The Finish date-time of the ToDo"
              },
              "name": {
                "type": "string",
                "description": "The Name of the ToDo"
              },
              "description": {
                "type": "string",
                "description": "The Description of the ToDo"
              },
              "percentage": {
                "type": "integer",
                "description": "The Percentage of the ToDo"
              },
              "private": {
                "type": "boolean",
                "description": "The Private status of the ToDo"
              },
              "start_datetime": {
                "type": "string",
                "format": "date-time",
                "description": "The Start date-time of the ToDo"
              }
            }
          }
        },
        "example": {
          "project_id": 1,
          "todo": {
            "assignment_id": 1,
            "color": "#314159",
            "description": "Use some power tools to fix the drywall.",
            "finish_datetime": "2015-02-07T00:00:00Z",
            "name": "Fix drywall",
            "percentage": 99,
            "private": true,
            "start_datetime": "2015-02-06T00:00:00Z"
          }
        }
      }
    },
    "TaskBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "project_id",
          "task"
        ],
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The ID of the Project the Task belongs to"
          },
          "task": {
            "title": "Task",
            "type": "object",
            "description": "Task object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The Name of the Task"
              },
              "start": {
                "type": "string",
                "format": "date-time",
                "description": "The Start date-time of the Task"
              },
              "finish": {
                "type": "string",
                "format": "date-time",
                "description": "The Finish date-time of the Task"
              },
              "actual_start": {
                "type": "string",
                "format": "date-time",
                "description": "The Actual Start date-time of the Task"
              },
              "actual_finish": {
                "type": "string",
                "format": "date-time",
                "description": "The Actual Finish date-time of the Task"
              },
              "percentage": {
                "type": "integer",
                "description": "The Percentage of the Task"
              },
              "critical_path": {
                "type": "boolean",
                "description": "The Critical Path status of the Task"
              },
              "milestone": {
                "type": "boolean",
                "description": "The Milestone status of the Task"
              },
              "row_number": {
                "type": "integer",
                "description": "The Row Number of the Task"
              },
              "has_children": {
                "type": "boolean",
                "description": "The Has Children status of the Task"
              },
              "source_uid": {
                "type": "string",
                "description": "The Source UID of the Task"
              },
              "parent_id": {
                "type": "integer",
                "description": "The ID of the Parent of the Task"
              },
              "full_outline_path": {
                "type": "string",
                "description": "The Full Outline Path of the Task"
              },
              "activity_id": {
                "type": "integer",
                "description": "The ID of the Activity of the Task"
              },
              "wbs": {
                "type": "string",
                "description": "The WBS of the Task"
              },
              "schedule_duration": {
                "type": "integer",
                "description": "The Schedule Duration of the Task"
              }
            }
          }
        },
        "example": {
          "project_id": 1,
          "task": {
            "name": "task",
            "start": "2015-02-07T00:00:00Z",
            "finish": "2015-02-08T00:00:00Z",
            "actual_start": "2015-02-08T00:00:00Z",
            "actual_finish": "2015-02-09T00:00:00Z",
            "percentage": 20,
            "critical_path": true,
            "milestone": true,
            "row_number": 1,
            "has_children": false,
            "source_uid": "abc123",
            "parent_id": 100,
            "full_outline_path": "folder\/task",
            "activity_id": 1,
            "wbs": "folder\/task",
            "schedule_duration": 5
          }
        }
      }
    },
    "Page": {
      "name": "page",
      "in": "query",
      "type": "integer",
      "description": "Page"
    },
    "PerPage": {
      "name": "per_page",
      "in": "query",
      "type": "integer",
      "description": "Elements per page"
    },
    "DeliveryLogCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "delivery_log"
        ],
        "properties": {
          "delivery_log": {
            "type": "object",
            "required": [
              "time_hour",
              "time_minute"
            ],
            "properties": {
              "comments": {
                "type": "string",
                "description": "Additional comments"
              },
              "contents": {
                "type": "string",
                "description": "Contents of the delivery"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "(ie. '2016-04-19')"
              },
              "delivery_from": {
                "type": "string",
                "description": "Name of the Company that delivered the items"
              },
              "time_hour": {
                "type": "integer",
                "description": "Time of delivery - hour",
                "maximum": 23,
                "minimum": 0
              },
              "time_minute": {
                "type": "integer",
                "description": "Time of delivery - minute",
                "maximum": 59,
                "minimum": 0
              },
              "tracking_number": {
                "type": "string",
                "description": "Tracking number for the delivery"
              },
              "attachments": {
                "type": "array",
                "description": "Delivery Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "DeliveryLogUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "delivery_log"
        ],
        "properties": {
          "delivery_log": {
            "type": "object",
            "properties": {
              "comments": {
                "type": "string",
                "description": "All supplies were delivered on time"
              },
              "contents": {
                "type": "string",
                "description": "Contents of the delivery"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Format: YYYY-MM-DD Example: 2016-04-19"
              },
              "delivery_from": {
                "type": "string",
                "description": "Company that deliveried the items"
              },
              "time_hour": {
                "type": "integer",
                "description": "Delivery Time - hour",
                "maximum": 23,
                "minimum": 0
              },
              "time_minute": {
                "type": "integer",
                "description": "Delivery Time - minute",
                "maximum": 59,
                "minimum": 0
              },
              "tracking_number": {
                "type": "string",
                "description": "Delivery tracking number"
              },
              "attachments": {
                "type": "array",
                "description": "Delivery Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "EquipmentLogCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "equipment_log"
        ],
        "properties": {
          "equipment_log": {
            "type": "object",
            "required": [
              "inspection_hour",
              "inspection_minute"
            ],
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of record. Format: YYYY-MM-DD Example: 2016-04-19"
              },
              "hours_idle": {
                "type": "string",
                "description": "Number of hours the Equipment was idle"
              },
              "hours_operating": {
                "type": "string",
                "description": "Number of hours the Equipment was in operation"
              },
              "inspected": {
                "type": "boolean",
                "description": "Inspection status of Equipment before operation"
              },
              "inspection_hour": {
                "type": "integer",
                "description": "Time of inspection - hour",
                "maximum": 23,
                "minimum": 0
              },
              "inspection_minute": {
                "type": "integer",
                "description": "Time of inspection - minute",
                "maximum": 59,
                "minimum": 0
              },
              "notes": {
                "type": "string",
                "description": "Notes"
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Inspection Log. `location_id` takes precedence over `mt_location`"
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "items": {
                  "type": "string"
                }
              },
              "cost_code_id": {
                "type": "integer",
                "description": "Cost Code ID"
              },
              "equipment_id": {
                "type": "integer",
                "description": "Equipment ID"
              },
              "equipment_name": {
                "type": "string",
                "description": "Equipment name. This Equipment will create on the fly if it doesn't exist and will take precedence over Equipment ID."
              },
              "attachments": {
                "type": "array",
                "description": "Equipment Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string",
                  "example": "<attachment.png>"
                }
              }
            }
          }
        },
        "example": {
          "equipment_log": {
            "date": "2016-05-20",
            "notes": "Equipment Inspected",
            "hours_idle": "2.0",
            "hours_operating": "8.0",
            "inspected": true,
            "inspection_hour": 9,
            "inspection_minute": 50,
            "mt_location": [
              "1space",
              "1 space"
            ],
            "cost_code_id": 65400439,
            "equipment_id": 15504,
            "equipment_name": "Hammer",
            "attachments": "<attachment.png>"
          }
        }
      }
    },
    "EquipmentLogUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "equipment_log"
        ],
        "properties": {
          "equipment_log": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of record. Format: YYYY-MM-DD Example: 2016-04-19"
              },
              "hours_idle": {
                "type": "string",
                "description": "Number of hours the equipment was idle"
              },
              "hours_operating": {
                "type": "string",
                "description": "Number of hours the equipment was in operation"
              },
              "inspected": {
                "type": "boolean",
                "description": "Equipment was inspected before operation"
              },
              "inspection_hour": {
                "type": "integer",
                "description": "Time of inspection - hour",
                "maximum": 23,
                "minimum": 0
              },
              "inspection_minute": {
                "type": "integer",
                "description": "Time of inspection - minute",
                "maximum": 59,
                "minimum": 0
              },
              "notes": {
                "type": "string",
                "description": "Additional notes"
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Inspection Log. `location_id` takes precedence over `mt_location`"
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "items": {
                  "type": "string"
                }
              },
              "cost_code_id": {
                "type": "integer",
                "description": "Cost Code ID"
              },
              "equipment_id": {
                "type": "integer",
                "description": "Equipment ID"
              },
              "equipment_name": {
                "type": "string",
                "description": "Equipment name. This Equipment will create on the fly if it doesn't exist and will take precedence over Equipment ID."
              },
              "attachments": {
                "type": "array",
                "description": "Equipment Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string",
                  "example": "<attachment.png>"
                }
              }
            }
          }
        },
        "example": {
          "equipment_log": {
            "date": "2016-05-20",
            "notes": "Equipment Inspected",
            "hours_idle": "2.0",
            "hours_operating": "8.0",
            "inspected": true,
            "inspection_hour": 9,
            "inspection_minute": 50,
            "mt_location": [
              "1space",
              "1 space"
            ],
            "cost_code_id": 65400439,
            "equipment_id": 15504,
            "equipment_name": "Hammer",
            "attachments": "<attachment.png>"
          }
        }
      }
    },
    "ManpowerLogCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "manpower_log"
        ],
        "properties": {
          "manpower_log": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of record. Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "notes": {
                "type": "string",
                "description": "Notes",
                "example": "Notes"
              },
              "num_workers": {
                "type": "integer",
                "description": "Number of workers",
                "example": 4
              },
              "num_hours": {
                "type": "string",
                "description": "Number of hours for each worker",
                "example": "8.0"
              },
              "contact_id": {
                "type": "integer",
                "description": "ID of the Vendor that is performing work",
                "example": 1128828
              },
              "user_id": {
                "type": "integer",
                "description": "ID of the user that is performing work. Use this instead of contact_id when tracking hours for a specific user."
              },
              "cost_code_id": {
                "type": "integer",
                "description": "Cost Code ID",
                "example": 11241
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Manpower Log. `location_id` takes precedence over `mt_location`",
                "example": 153252
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "example": [
                  "1space"
                ],
                "items": {
                  "type": "string"
                }
              },
              "attachments": {
                "type": "array",
                "description": "Manpower Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "ManpowerLogUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "manpower_log"
        ],
        "properties": {
          "manpower_log": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of record. Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "notes": {
                "type": "string",
                "description": "Additional notes",
                "example": "Notes"
              },
              "num_workers": {
                "type": "integer",
                "description": "Number of workers",
                "example": 4
              },
              "num_hours": {
                "type": "string",
                "description": "Number of hours for each worker",
                "example": "8.0"
              },
              "contact_id": {
                "type": "integer",
                "description": "ID of the Vendor that is performing work",
                "example": 1128828
              },
              "user_id": {
                "type": "integer",
                "description": "ID of the User that is performing work. Use this instead of contact_id when tracking hours for a specific user."
              },
              "cost_code_id": {
                "type": "integer",
                "description": "Cost Code ID",
                "example": 11241
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Manpower Log. `location_id` takes precedence over `mt_location`",
                "example": 153252
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "example": [
                  "1space"
                ],
                "items": {
                  "type": "string"
                }
              },
              "attachments": {
                "type": "array",
                "description": "Manpower Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "NotesLogCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "notes_log"
        ],
        "properties": {
          "notes_log": {
            "type": "object",
            "properties": {
              "comment": {
                "type": "string",
                "description": "Additional comments",
                "example": "No Additional notes"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "daily_log_header_id": {
                "type": "integer",
                "description": "Daily Log Header ID",
                "example": 76384
              },
              "is_issue_day": {
                "type": "boolean",
                "description": "The note being added is an issue affecting the project",
                "example": true
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Notes Log. `location_id` takes precedence over `mt_location`",
                "example": 153252
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "example": [
                  "1space"
                ],
                "items": {
                  "type": "string"
                }
              },
              "attachments": {
                "type": "array",
                "description": "Notes Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "NotesLogUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "notes_log"
        ],
        "properties": {
          "notes_log": {
            "type": "object",
            "properties": {
              "comment": {
                "type": "string",
                "description": "Additional comments",
                "example": "No Additional notes"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of record. Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "daily_log_header_id": {
                "type": "integer",
                "description": "Daily Log Header ID",
                "example": 76384
              },
              "is_issue_day": {
                "type": "boolean",
                "description": "The note being added is an issue affecting the project",
                "example": true
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Notes Log. `location_id` takes precedence over `mt_location`",
                "example": 153252
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "example": [
                  "1space"
                ],
                "items": {
                  "type": "string"
                }
              },
              "attachments": {
                "type": "array",
                "description": "Notes Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "QuantityLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "quantity_log"
        ],
        "properties": {
          "quantity_log": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Quantity amount was exact"
              },
              "quantity": {
                "type": "integer",
                "description": "Total number of the specified materials placed on the site that day",
                "example": 4
              },
              "unit": {
                "type": "string",
                "description": "Units that were delivered",
                "example": "5"
              },
              "cost_code_id": {
                "type": "integer",
                "description": "Cost Code ID",
                "example": 24086477
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Quantity Log. `location_id` takes precedence over `mt_location`",
                "example": 153252
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "example": [
                  "1space"
                ],
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "DailyConstructionReportLogCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "daily_construction_report_log"
        ],
        "properties": {
          "daily_construction_report_log": {
            "type": "object",
            "required": [
              "vendor_id",
              "trade_id",
              "number_of_foreman_workers",
              "number_of_journeyman_workers",
              "number_of_apprentice_workers",
              "number_of_other_workers"
            ],
            "properties": {
              "apprentice_hours": {
                "type": "string",
                "description": "Number of hours that the Apprentice workers were on site",
                "example": "3.0"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "foreman_hours": {
                "type": "string",
                "description": "Number of hours that the foremen were on site",
                "example": "1.0"
              },
              "journeyman_hours": {
                "type": "string",
                "description": "Number of hours that the journeymen were on site",
                "example": "2.0"
              },
              "notes": {
                "type": "string",
                "description": "Additional notes",
                "example": "No other workers on site today"
              },
              "number_of_apprentice_workers": {
                "type": "integer",
                "description": "Number of apprentice workers on site",
                "example": 4
              },
              "number_of_foreman_workers": {
                "type": "integer",
                "description": "Number of foremen on site",
                "example": 3
              },
              "number_of_journeyman_workers": {
                "type": "integer",
                "description": "Number of journeymen on site",
                "example": 4
              },
              "number_of_other_workers": {
                "type": "integer",
                "description": "Number of other workers on site",
                "example": 5
              },
              "other_hours": {
                "type": "string",
                "description": "Number of hours that other workers were on site",
                "example": "4.0"
              },
              "vendor_id": {
                "type": "integer",
                "description": "ID of the Vendor associated to the report",
                "example": 1120327
              },
              "trade_id": {
                "type": "integer",
                "description": "ID of the Trade associated to the report",
                "example": 100884
              }
            }
          }
        }
      }
    },
    "DailyConstructionReportLogUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "daily_construction_report_log"
        ],
        "properties": {
          "daily_construction_report_log": {
            "type": "object",
            "properties": {
              "apprentice_hours": {
                "type": "string",
                "description": "Number of hours that the Apprentice workers were on site",
                "example": "3.0"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "foreman_hours": {
                "type": "string",
                "description": "Number of hours that the foremen were on site",
                "example": "1.0"
              },
              "journeyman_hours": {
                "type": "string",
                "description": "Number of hours that the journeymen were on site",
                "example": "2.0"
              },
              "notes": {
                "type": "string",
                "description": "Additional notes",
                "example": "No other workers on site today"
              },
              "number_of_apprentice_workers": {
                "type": "integer",
                "description": "Number of apprentice workers on site",
                "example": 4
              },
              "number_of_foreman_workers": {
                "type": "integer",
                "description": "Number of foremen on site",
                "example": 3
              },
              "number_of_journeyman_workers": {
                "type": "integer",
                "description": "Number of journeymen on site",
                "example": 4
              },
              "number_of_other_workers": {
                "type": "integer",
                "description": "Number of other workers on site",
                "example": 5
              },
              "other_hours": {
                "type": "string",
                "description": "Number of hours that the other workers were on site",
                "example": "4.0"
              },
              "vendor_id": {
                "type": "integer",
                "description": "The ID of the associated Vendor",
                "example": 1120327
              },
              "trade_id": {
                "type": "integer",
                "description": "The ID of the associated trade",
                "example": 100884
              }
            }
          }
        }
      }
    },
    "InspectionLogCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "inspection_log"
        ],
        "properties": {
          "inspection_log": {
            "type": "object",
            "required": [
              "start_hour",
              "start_minute",
              "end_hour",
              "end_minute"
            ],
            "properties": {
              "area": {
                "type": "string",
                "description": "Area within the specified location",
                "example": "Level 5"
              },
              "comments": {
                "type": "string",
                "description": "Additional comments",
                "example": "Inspection took a total of 2 hours"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of inspection. Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "end_hour": {
                "type": "integer",
                "description": "Ending time of inspection - hour",
                "example": 10,
                "maximum": 23,
                "minimum": 0
              },
              "end_minute": {
                "type": "integer",
                "description": "Ending time of inspection - minute",
                "example": 0,
                "maximum": 59,
                "minimum": 0
              },
              "inspecting_entity": {
                "type": "string",
                "description": "Type of inspector that performing the inspection",
                "example": "Safety Rules"
              },
              "inspection_type": {
                "type": "string",
                "description": "Type of inspection performed",
                "example": "Safety"
              },
              "inspector_name": {
                "type": "string",
                "description": "Name of the inspector",
                "example": "Steven"
              },
              "start_hour": {
                "type": "integer",
                "description": "Starting time of inspection - hour",
                "example": 10,
                "maximum": 23,
                "minimum": 0
              },
              "start_minute": {
                "type": "integer",
                "description": "Starting time of inspection - minute",
                "example": 0,
                "maximum": 59,
                "minimum": 0
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Inspection Log. `location_id` takes precedence over `mt_location`",
                "example": 153252
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "example": [
                  "1space"
                ],
                "items": {
                  "type": "string"
                }
              },
              "attachments": {
                "type": "array",
                "description": "Inspection Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "InspectionLogUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "inspection_log"
        ],
        "properties": {
          "inspection_log": {
            "type": "object",
            "properties": {
              "area": {
                "type": "string",
                "description": "Area within the specified location",
                "example": "Level 5"
              },
              "comments": {
                "type": "string",
                "description": "Additional comments",
                "example": "Inspection took a total of 2 hours"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of inspection. Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "end_hour": {
                "type": "integer",
                "description": "Ending time of inspection - hour",
                "example": 10,
                "maximum": 23,
                "minimum": 0
              },
              "end_minute": {
                "type": "integer",
                "description": "Ending time of inspection - minute",
                "example": 0,
                "maximum": 59,
                "minimum": 0
              },
              "inspecting_entity": {
                "type": "string",
                "description": "Type of inspector that performing the inspection",
                "example": "Safety Rules"
              },
              "inspection_type": {
                "type": "string",
                "description": "Type of inspection performed",
                "example": "Safety"
              },
              "inspector_name": {
                "type": "string",
                "description": "Name of the inspector",
                "example": "Steven"
              },
              "start_hour": {
                "type": "integer",
                "description": "Starting time of inspection - hour",
                "example": 10,
                "maximum": 23,
                "minimum": 0
              },
              "start_minute": {
                "type": "integer",
                "description": "Starting time of inspection - minute",
                "example": 0,
                "maximum": 59,
                "minimum": 0
              },
              "location_id": {
                "type": "integer",
                "description": "The ID of the Location of the Inspection Log. `location_id` takes precedence over `mt_location`",
                "example": 153252
              },
              "mt_location": {
                "type": "array",
                "description": "Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.",
                "example": [
                  "1space"
                ],
                "items": {
                  "type": "string"
                }
              },
              "attachments": {
                "type": "array",
                "description": "Inspection Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "DumpsterLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "dumpster_log"
        ],
        "properties": {
          "dumpster_log": {
            "type": "object",
            "properties": {
              "comments": {
                "type": "string",
                "description": "Additional comments",
                "example": "Dumpsters delivered on time"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of record. Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "quantity_delivered": {
                "type": "integer",
                "description": "Number of dumpsters delivered on",
                "example": 5
              },
              "quantity_removed": {
                "type": "integer",
                "description": "Number of dumpsters removed from site",
                "example": 2
              },
              "vendor_id": {
                "type": "integer",
                "description": "Associated Vendor ID",
                "example": 1120327
              }
            }
          }
        }
      }
    },
    "WorkLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "work_log"
        ],
        "properties": {
          "work_log": {
            "type": "object",
            "properties": {
              "comments": {
                "type": "string",
                "description": "Comments",
                "example": "All workers showed up"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "hourly_rate": {
                "type": "number",
                "format": "float",
                "description": "Scheduled work hourly rate",
                "example": 20
              },
              "hours": {
                "type": "number",
                "format": "float",
                "description": "Scheduled work hours",
                "example": 12
              },
              "reimbursable": {
                "type": "boolean",
                "description": "If scheduled work is reimbursable",
                "example": true
              },
              "resource_name": {
                "type": "string",
                "description": "Resource Name",
                "example": "Alices Admin (Twenty Twelve Inc)"
              },
              "showed": {
                "type": "boolean",
                "description": "If scheduled worker kept the work log schedule",
                "example": true
              },
              "workers": {
                "type": "integer",
                "description": "Scheduled number of workers",
                "example": 6
              }
            }
          }
        }
      }
    },
    "CallLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "call_log"
        ],
        "properties": {
          "call_log": {
            "type": "object",
            "required": [
              "start_hour",
              "start_minute",
              "end_hour",
              "end_minute"
            ],
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date that the call took place. Format: YYYY-MM-DD Example: 2016-05-19",
                "example": "2016-05-19"
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Important call from Inspector"
              },
              "end_hour": {
                "type": "integer",
                "description": "Time when the call ended - hour",
                "example": 11,
                "maximum": 23,
                "minimum": 0,
                "default": 0
              },
              "end_minute": {
                "type": "integer",
                "description": "Time when the call ended - minute",
                "example": 15,
                "maximum": 59,
                "minimum": 0,
                "default": 0
              },
              "start_hour": {
                "type": "integer",
                "description": "Time when the call started - hour",
                "example": 10,
                "maximum": 23,
                "minimum": 0,
                "default": 0
              },
              "start_minute": {
                "type": "integer",
                "description": "Time when the call started - minute",
                "example": 15,
                "maximum": 59,
                "minimum": 0,
                "default": 0
              },
              "subject_from": {
                "type": "string",
                "description": "Name of the person that called",
                "example": "Steven Kang (Procore Technologies)"
              },
              "subject_to": {
                "type": "string",
                "description": "Name of the person that received the call",
                "example": "Gino Briones (Procore)"
              }
            }
          }
        }
      }
    },
    "VisitorLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "visitor_log"
        ],
        "properties": {
          "visitor_log": {
            "type": "object",
            "required": [
              "begin_hour",
              "begin_minute",
              "end_hour",
              "end_minute"
            ],
            "properties": {
              "begin_hour": {
                "type": "integer",
                "description": "Time of visitation - hour",
                "example": 12,
                "maximum": 23,
                "minimum": 0
              },
              "begin_minute": {
                "type": "integer",
                "description": "Time of visitation - hour",
                "example": 10,
                "maximum": 59,
                "minimum": 0
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "details": {
                "type": "string",
                "description": "Details of visit",
                "example": "Visitor Log"
              },
              "end_hour": {
                "type": "integer",
                "description": "Time that the visitation ended - hour",
                "example": 14,
                "maximum": 23,
                "minimum": 0
              },
              "end_minute": {
                "type": "integer",
                "description": "Time that the visitation ended - minute",
                "example": 30,
                "maximum": 59,
                "minimum": 0
              }
            }
          }
        }
      }
    },
    "AccidentLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "accident_log"
        ],
        "properties": {
          "accident_log": {
            "type": "object",
            "required": [
              "time_hour",
              "time_minute"
            ],
            "properties": {
              "comments": {
                "type": "string",
                "description": "Additional comments about the accident",
                "example": "Accident Log comments"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date that the accident occured. Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "involved_company": {
                "type": "string",
                "description": "Name of the Company involved in the accident",
                "example": "Procore Technologies"
              },
              "involved_name": {
                "type": "string",
                "description": "Name of the person involved in the accident",
                "example": "Roger"
              },
              "time_hour": {
                "type": "integer",
                "description": "Time of accident - hour",
                "example": 10,
                "maximum": 23,
                "minimum": 0
              },
              "time_minute": {
                "type": "integer",
                "description": "Time of accident - minute",
                "example": 15,
                "maximum": 60,
                "minimum": 0
              },
              "attachments": {
                "type": "array",
                "description": "Accident Log Attachments. To upload attachments you must upload the entire payload as `multipart\/form-data` content-type and specify each parameter as form-data together with `attachments[]` as files.",
                "items": {
                  "type": "string",
                  "example": "<attachment.png>"
                }
              }
            }
          }
        }
      }
    },
    "SafetyViolationLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "safety_violation_log"
        ],
        "properties": {
          "safety_violation_log": {
            "type": "object",
            "required": [
              "time_hour",
              "time_minute"
            ],
            "properties": {
              "comments": {
                "type": "string",
                "description": "Comments",
                "example": "No safety violations"
              },
              "compliance_due": {
                "type": "string",
                "description": "The date the compliance for the safety violation is due by",
                "format": "date",
                "example": "2016-06-20"
              },
              "issued_to": {
                "type": "string",
                "description": "Person who the safety violation was issued to",
                "example": "ACL Industries"
              },
              "safety_notice": {
                "type": "string",
                "description": "Name\/number of the safety notice issued",
                "example": "Safety Notice"
              },
              "subject": {
                "type": "string",
                "description": "Reason for the safety violation",
                "example": "hard hats"
              },
              "time_hour": {
                "type": "integer",
                "description": "Time of safety violation - hour",
                "example": 12,
                "minimum": 0,
                "maximum": 23
              },
              "time_minute": {
                "description": "Time of safety violation - minute",
                "type": "integer",
                "example": 15,
                "minimum": 0,
                "maximum": 59
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "attachments": {
                "type": "array",
                "description": "Safety Violation Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "WasteLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "waste_log"
        ],
        "properties": {
          "waste_log": {
            "type": "object",
            "required": [
              "time_hour",
              "time_minute"
            ],
            "properties": {
              "approximate_quantity": {
                "type": "integer",
                "description": "Waste log approximate quantity",
                "example": 5
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Disposal complete"
              },
              "disposal_location": {
                "type": "string",
                "description": "Waste disposal location",
                "example": "Dump Yard"
              },
              "material": {
                "type": "string",
                "description": "Type of waste disposed of",
                "example": "Waste Material"
              },
              "method_of_disposal": {
                "type": "string",
                "description": "Method used to dispose of the waste",
                "example": "Truck"
              },
              "time_hour": {
                "type": "integer",
                "description": "Time of waste disposal - hour",
                "example": 10,
                "maximum": 23,
                "minimum": 0
              },
              "time_minute": {
                "type": "integer",
                "description": "Time of waste disposal - minute",
                "example": 15,
                "maximum": 59,
                "minimum": 0
              },
              "vendor_id": {
                "type": "integer",
                "description": "ID of the Vendor who disposed of the waste",
                "example": 1120327
              }
            }
          }
        }
      }
    },
    "WeatherLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "weather_log"
        ],
        "properties": {
          "weather_log": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "is_weather_delay": {
                "type": "integer",
                "description": "Weather delay status",
                "example": 1
              },
              "sky": {
                "type": "string",
                "description": "Sky condition",
                "example": "Clear"
              },
              "temperature": {
                "type": "string",
                "description": "Weather temperature",
                "example": "Hot"
              },
              "average": {
                "type": "string",
                "description": "Average temperature for the workday",
                "example": 50
              },
              "wind": {
                "type": "string",
                "description": "Wind condition",
                "example": "Calm"
              },
              "ground": {
                "type": "string",
                "description": "Ground condition",
                "example": "Dry"
              },
              "calamity": {
                "type": "string",
                "description": "Type of calamity the jobsite was subject to",
                "example": "Fire"
              },
              "precipitation": {
                "type": "string",
                "description": "Precipitation conditions",
                "example": "Yes minor saturation"
              },
              "attachments": {
                "type": "array",
                "description": "Weather Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "PlanRevisionLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "plan_revision_log"
        ],
        "properties": {
          "plan_revision_log": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "description": "Category of discipline that appears on the revision",
                "example": "Plan Revision Category"
              },
              "comments": {
                "type": "string",
                "description": "Additional comments",
                "example": "Plan Revision comments"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of record. Format: YYYY-MM-DD Example: 2016-04-19",
                "example": "2016-05-19"
              },
              "plan_number": {
                "type": "string",
                "description": "Number that appears on the plan submitted",
                "example": "3plan#"
              },
              "revision": {
                "type": "string",
                "description": "Revision number",
                "example": 763892
              },
              "title": {
                "type": "string",
                "description": "Title of the plans",
                "example": "Plan Revision title"
              },
              "attachments": {
                "type": "array",
                "description": "Plan Revision Log Attachments.\nTo upload attachments you must upload the entire payload as `multipart\/form-data` content-type and\nspecify each parameter as form-data together with `attachments[]` as files.\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "ProductivityLogBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "productivity_log"
        ],
        "properties": {
          "productivity_log": {
            "type": "object",
            "required": [
              "line_item_id"
            ],
            "properties": {
              "line_item_id": {
                "type": "integer",
                "description": "Line Item ID"
              },
              "notes": {
                "type": "string",
                "description": "Additional notes"
              },
              "quantity_delivered": {
                "type": "string",
                "description": "Number of materials delivered on site"
              },
              "quantity_used": {
                "type": "string",
                "description": "Number of materials put in place on site"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of record"
              }
            }
          }
        },
        "example": {
          "productivity_log": {
            "line_item_id": 43523,
            "date": "2016-05-19",
            "notes": "productivity 50% complete",
            "quantity_delivered": 10,
            "quantity_used": 4
          }
        }
      }
    },
    "ErpChangeOrderPackagesLineItemCreateBody": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "change_order_package_line_item"
        ],
        "properties": {
          "change_order_package_line_item": {
            "type": "object",
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the Change Order Package Line Item",
                "example": "1VT-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Change Order Package Line Item. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "cost_code_origin_id": {
                "type": "string",
                "description": "The 'origin_id' of the associated Erp Cost Code.",
                "example": "1VT-33778-014"
              },
              "line_item_type_origin_id": {
                "type": "string",
                "description": "The 'origin_id' of the associated Erp Line Item Type",
                "example": "1VT-33778-015"
              },
              "contract_line_item_id": {
                "type": "integer",
                "description": "The 'id' of the associated Erp Contract Line Item ERP. (Caller must supply either a 'contract_line_item_id' or a 'contract_line_item_origin_id')",
                "example": 1234
              },
              "contract_line_item_origin_id": {
                "type": "string",
                "description": "The 'origin_id' of the associated Erp Contract Line Item. (Caller must supply either a 'contract_line_item_id' or a 'contract_line_item_origin_id')",
                "example": "1VT-33778-016"
              },
              "amount": {
                "type": "number",
                "description": "ERP Change Order Package Line Item Amount",
                "example": 100
              },
              "description": {
                "type": "string",
                "description": "ERP Change Order Package Line Item Description",
                "example": "Delete heat soak requirement"
              },
              "quantity": {
                "type": "string",
                "description": "ERP Change Order Package Line Item Quantity",
                "example": "1.00"
              },
              "unit_cost": {
                "type": "number",
                "description": "ERP Change Order Package Line Item unit cost",
                "example": 10
              },
              "uom": {
                "type": "string",
                "description": "ERP Change Order Package Line Item units of measurement",
                "example": "Ea"
              },
              "synced": {
                "type": "boolean",
                "description": "A flag indicating whether the ERP Change Order Package Line Item is synced with a Procore Change Order Package Line Item.",
                "example": true
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Change Order Package Line Item",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpChangeOrderPackagesLineItemUpdateBody": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "change_order_package_line_item"
        ],
        "properties": {
          "change_order_package_line_item": {
            "type": "object",
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the Change Order Package Line Item",
                "example": "1VT-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Change Order Package Line Item. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "cost_code_origin_id": {
                "type": "string",
                "description": "The 'origin_id' of the associated Erp Cost Code.",
                "example": "1VT-33778-014"
              },
              "line_item_type_origin_id": {
                "type": "string",
                "description": "The 'origin_id' of the associated Erp Line Item Type",
                "example": "1VT-33778-015"
              },
              "contract_line_item_id": {
                "type": "integer",
                "description": "The 'id' of the associated Erp Contract Line Item ERP.",
                "example": 1234
              },
              "contract_line_item_origin_id": {
                "type": "string",
                "description": "The 'origin_id' of the associated Erp Contract Line Item.",
                "example": "1VT-33778-016"
              },
              "amount": {
                "type": "number",
                "description": "ERP Change Order Package Line Item Amount",
                "example": 100
              },
              "description": {
                "type": "string",
                "description": "ERP Change Order Package Line Item Description",
                "example": "Delete heat soak requirement"
              },
              "quantity": {
                "type": "string",
                "description": "ERP Change Order Package Line Item Quantity",
                "example": "1.00"
              },
              "unit_cost": {
                "type": "number",
                "description": "ERP Change Order Package Line Item unit cost",
                "example": 10
              },
              "uom": {
                "type": "string",
                "description": "ERP Change Order Package Line Item units of measurement",
                "example": "Ea"
              },
              "synced": {
                "type": "boolean",
                "description": "A flag indicating whether the ERP Change Order Package Line Item is synced with a Procore Change Order Package Line Item.",
                "example": true
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Change Order Package Line Item",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpChangeOrderPackagesLineItemSyncBody": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "updates"
        ],
        "properties": {
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the Erp Change Order Package Line Item",
                  "example": 1234
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the Change Order Package Line Item",
                  "example": "1VT-33778-013"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Change Order Package Line Item. Note: This is a free-form text field.",
                  "example": "{ additional_data: [] }"
                },
                "cost_code_origin_id": {
                  "type": "string",
                  "description": "The 'origin_id' of the associated Erp Cost Code.",
                  "example": "1VT-33778-014"
                },
                "line_item_type_origin_id": {
                  "type": "string",
                  "description": "The 'origin_id' of the associated Erp Line Item Type",
                  "example": "1VT-33778-015"
                },
                "contract_line_item_id": {
                  "type": "integer",
                  "description": "The 'id' of the associated Erp Contract Line Item ERP.",
                  "example": 1234
                },
                "contract_line_item_origin_id": {
                  "type": "string",
                  "description": "The 'origin_id' of the associated Erp Contract Line Item.",
                  "example": "1VT-33778-016"
                },
                "amount": {
                  "type": "number",
                  "description": "ERP Change Order Package Line Item Amount",
                  "example": 100
                },
                "description": {
                  "type": "string",
                  "description": "ERP Change Order Package Line Item Description",
                  "example": "Delete heat soak requirement"
                },
                "quantity": {
                  "type": "string",
                  "description": "ERP Change Order Package Line Item Quantity",
                  "example": "1.00"
                },
                "unit_cost": {
                  "type": "number",
                  "description": "ERP Change Order Package Line Item unit cost",
                  "example": 10
                },
                "uom": {
                  "type": "string",
                  "description": "ERP Change Order Package Line Item units of measurement",
                  "example": "Ea"
                },
                "synced": {
                  "type": "boolean",
                  "description": "A flag indicating whether the ERP Change Order Package Line Item is synced with a Procore Change Order Package Line Item.",
                  "example": true
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Change Order Package Line Item",
                  "example": 2147483647
                }
              }
            }
          }
        }
      }
    },
    "ErpBudgetCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "budget"
        ],
        "properties": {
          "budget": {
            "type": "object",
            "required": [
              "origin_id"
            ],
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Budget",
                "example": "1B-100"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Budget. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              }
            }
          }
        }
      }
    },
    "ErpBudgetUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "budget"
        ],
        "properties": {
          "budget": {
            "type": "object",
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Budget",
                "example": "1B-100"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Budget. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "synced": {
                "type": "boolean",
                "description": "A flag indicating whether the ERP Budget is synced with a Procore Budget. Possible values: (true|false)",
                "example": true
              }
            }
          }
        }
      }
    },
    "ErpBudgetSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer"
          },
          "job_id": {
            "type": "integer",
            "description": "The Procore ID of the ERP Budget's ERP Project. REQUIRED if job_origin_id is not provided."
          },
          "job_origin_id": {
            "type": "string",
            "description": "The Third-party ID of the ERP Budget's ERP Project. REQUIRED if job_id is not provided."
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Budget. REQUIRED if 'origin_id' is not provided.",
                  "example": 123
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Budget. REQUIRED if this ERP Budget does not exist yet in Procore. If it exists, this attribute is REQUIRED if 'id' is not provided.",
                  "example": "1B-100"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Budget. Note: This is a free-form text field.",
                  "example": "{ additional_data: [] }"
                },
                "synced": {
                  "type": "boolean",
                  "description": "A flag indicating whether the ERP Budget is synced with a Procore Budget. Possible values: (true|false)",
                  "example": true
                }
              }
            }
          }
        }
      }
    },
    "ErpJobCostCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "job_cost"
        ],
        "properties": {
          "job_cost": {
            "type": "object",
            "required": [
              "cost_code_origin_id",
              "standard_category_origin_id"
            ],
            "properties": {
              "approved_commitment_changes": {
                "type": "number",
                "format": "float",
                "description": "Approved commitment changes",
                "example": "0.0"
              },
              "approved_estimate_changes": {
                "type": "number",
                "format": "float",
                "description": "Approved estimate changes",
                "example": "0.0"
              },
              "approved_estimate_unit_changes": {
                "type": "number",
                "format": "float",
                "description": "Approved estimate unit changes",
                "example": "0.0"
              },
              "commitment_invoiced": {
                "type": "number",
                "format": "float",
                "description": "Commitment invoiced amount",
                "example": "0.0"
              },
              "committed_costs": {
                "type": "number",
                "format": "float",
                "description": "Committed costs",
                "example": "0.0"
              },
              "cost_code_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Job Cost's Cost Code",
                "example": "CC5-3992"
              },
              "estimate": {
                "type": "number",
                "format": "float",
                "description": "Estimate",
                "example": "0.0"
              },
              "estimate_units": {
                "type": "number",
                "format": "float",
                "description": "Estimate units",
                "example": "0.0"
              },
              "job_to_date_cost": {
                "type": "number",
                "format": "float",
                "description": "Job to date cost",
                "example": "0.0"
              },
              "job_to_date_dollars_paid": {
                "type": "number",
                "format": "float",
                "description": "Job to date dollars paid",
                "example": "0.0"
              },
              "job_to_date_units": {
                "type": "number",
                "format": "float",
                "description": "Job to date units",
                "example": "0.0"
              },
              "month_to_date_cost": {
                "type": "number",
                "format": "float",
                "description": "Month to date cost",
                "example": "0.0"
              },
              "month_to_date_dollars_paid": {
                "type": "number",
                "format": "float",
                "description": "Month to date dollars paid",
                "example": "0.0"
              },
              "month_to_date_units": {
                "type": "number",
                "format": "float",
                "description": "Month to date units",
                "example": "0.0"
              },
              "open_balance": {
                "type": "number",
                "format": "float",
                "description": "Open balance",
                "example": "0.0"
              },
              "original_commitment": {
                "type": "number",
                "format": "float",
                "description": "Original commitment amount",
                "example": "0.0"
              },
              "original_estimate": {
                "type": "number",
                "format": "float",
                "description": "Original estimate",
                "example": "0.0"
              },
              "original_estimate_units": {
                "type": "number",
                "format": "float",
                "description": "Original estimate units",
                "example": "0.0"
              },
              "paid_amount": {
                "type": "number",
                "format": "float",
                "description": "Paid amount",
                "example": "0.0"
              },
              "percentage_complete": {
                "type": "number",
                "format": "float",
                "description": "Percentage complete",
                "example": "0.0"
              },
              "revised_commitment": {
                "type": "number",
                "format": "float",
                "description": "Revised commitment amount",
                "example": "0.0"
              },
              "standard_category_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Job Cost's Standard Category",
                "example": "M5-3211"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Job Cost",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpJobCostUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "job_cost"
        ],
        "properties": {
          "job_cost": {
            "type": "object",
            "required": [
              "cost_code_origin_id",
              "standard_category_origin_id"
            ],
            "properties": {
              "approved_commitment_changes": {
                "type": "number",
                "format": "float",
                "description": "Approved commitment changes",
                "example": "0.0"
              },
              "approved_estimate_changes": {
                "type": "number",
                "format": "float",
                "description": "Approved estimate changes",
                "example": "0.0"
              },
              "approved_estimate_unit_changes": {
                "type": "number",
                "format": "float",
                "description": "Approved estimate unit changes",
                "example": "0.0"
              },
              "commitment_invoiced": {
                "type": "number",
                "format": "float",
                "description": "Commitment invoiced amount",
                "example": "0.0"
              },
              "committed_costs": {
                "type": "number",
                "format": "float",
                "description": "Committed costs",
                "example": "0.0"
              },
              "cost_code_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Job Cost's Cost Code",
                "example": "CC5-3992"
              },
              "estimate": {
                "type": "number",
                "format": "float",
                "description": "Estimate",
                "example": "0.0"
              },
              "estimate_units": {
                "type": "number",
                "format": "float",
                "description": "Estimate units",
                "example": "0.0"
              },
              "job_to_date_cost": {
                "type": "number",
                "format": "float",
                "description": "Job to date cost",
                "example": "0.0"
              },
              "job_to_date_dollars_paid": {
                "type": "number",
                "format": "float",
                "description": "Job to date dollars paid",
                "example": "0.0"
              },
              "job_to_date_units": {
                "type": "number",
                "format": "float",
                "description": "Job to date units",
                "example": "0.0"
              },
              "month_to_date_cost": {
                "type": "number",
                "format": "float",
                "description": "Month to date cost",
                "example": "0.0"
              },
              "month_to_date_dollars_paid": {
                "type": "number",
                "format": "float",
                "description": "Month to date dollars paid",
                "example": "0.0"
              },
              "month_to_date_units": {
                "type": "number",
                "format": "float",
                "description": "Month to date units",
                "example": "0.0"
              },
              "open_balance": {
                "type": "number",
                "format": "float",
                "description": "Open balance",
                "example": "0.0"
              },
              "original_commitment": {
                "type": "number",
                "format": "float",
                "description": "Original commitment amount",
                "example": "0.0"
              },
              "original_estimate": {
                "type": "number",
                "format": "float",
                "description": "Original estimate",
                "example": "0.0"
              },
              "original_estimate_units": {
                "type": "number",
                "format": "float",
                "description": "Original estimate units",
                "example": "0.0"
              },
              "paid_amount": {
                "type": "number",
                "format": "float",
                "description": "Paid amount",
                "example": "0.0"
              },
              "percentage_complete": {
                "type": "number",
                "format": "float",
                "description": "Percentage complete",
                "example": "0.0"
              },
              "revised_commitment": {
                "type": "number",
                "format": "float",
                "description": "Revised commitment amount",
                "example": "0.0"
              },
              "standard_category_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Job Cost's Standard Category",
                "example": "M5-3211"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Job Cost",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpJobCostSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer"
          },
          "job_id": {
            "type": "integer",
            "description": "The Procore ID of the ERP Job Costs's ERP Project. REQUIRED if job_origin_id is not provided.\n"
          },
          "job_origin_id": {
            "type": "string",
            "description": "The Third-party ID of the ERP Job Costs's ERP Project. REQUIRED if job_id is not provided.\n"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "cost_code_origin_id",
                "standard_category_origin_id"
              ],
              "properties": {
                "approved_commitment_changes": {
                  "type": "number",
                  "format": "float",
                  "description": "Approved commitment changes",
                  "example": "0.0"
                },
                "approved_estimate_changes": {
                  "type": "number",
                  "format": "float",
                  "description": "Approved estimate changes",
                  "example": "0.0"
                },
                "approved_estimate_unit_changes": {
                  "type": "number",
                  "format": "float",
                  "description": "Approved estimate unit changes",
                  "example": "0.0"
                },
                "commitment_invoiced": {
                  "type": "number",
                  "format": "float",
                  "description": "Commitment invoiced amount",
                  "example": "0.0"
                },
                "committed_costs": {
                  "type": "number",
                  "format": "float",
                  "description": "Committed costs",
                  "example": "0.0"
                },
                "cost_code_origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Job Cost's Cost Code",
                  "example": "CC5-3992"
                },
                "estimate": {
                  "type": "number",
                  "format": "float",
                  "description": "Estimate",
                  "example": "0.0"
                },
                "estimate_units": {
                  "type": "number",
                  "format": "float",
                  "description": "Estimate units",
                  "example": "0.0"
                },
                "job_to_date_cost": {
                  "type": "number",
                  "format": "float",
                  "description": "Job to date cost",
                  "example": "0.0"
                },
                "job_to_date_dollars_paid": {
                  "type": "number",
                  "format": "float",
                  "description": "Job to date dollars paid",
                  "example": "0.0"
                },
                "job_to_date_units": {
                  "type": "number",
                  "format": "float",
                  "description": "Job to date units",
                  "example": "0.0"
                },
                "month_to_date_cost": {
                  "type": "number",
                  "format": "float",
                  "description": "Month to date cost",
                  "example": "0.0"
                },
                "month_to_date_dollars_paid": {
                  "type": "number",
                  "format": "float",
                  "description": "Month to date dollars paid",
                  "example": "0.0"
                },
                "month_to_date_units": {
                  "type": "number",
                  "format": "float",
                  "description": "Month to date units",
                  "example": "0.0"
                },
                "open_balance": {
                  "type": "number",
                  "format": "float",
                  "description": "Open balance",
                  "example": "0.0"
                },
                "original_commitment": {
                  "type": "number",
                  "format": "float",
                  "description": "Original commitment amount",
                  "example": "0.0"
                },
                "original_estimate": {
                  "type": "number",
                  "format": "float",
                  "description": "Original estimate",
                  "example": "0.0"
                },
                "original_estimate_units": {
                  "type": "number",
                  "format": "float",
                  "description": "Original estimate units",
                  "example": "0.0"
                },
                "paid_amount": {
                  "type": "number",
                  "format": "float",
                  "description": "Paid amount",
                  "example": "0.0"
                },
                "percentage_complete": {
                  "type": "number",
                  "format": "float",
                  "description": "Percentage complete",
                  "example": "0.0"
                },
                "revised_commitment": {
                  "type": "number",
                  "format": "float",
                  "description": "Revised commitment amount",
                  "example": "0.0"
                },
                "standard_category_origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Job Cost's Standard Category",
                  "example": "M5-3211"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Job Cost",
                  "example": 2147483647
                }
              }
            }
          }
        }
      }
    },
    "ErpCustomerCreateBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "customer"
        ],
        "properties": {
          "customer": {
            "type": "object",
            "required": [
              "origin_id",
              "name"
            ],
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Customer",
                "example": "1VT-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Customer. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "name": {
                "type": "string",
                "description": "The Name of the ERP Customer",
                "example": "John Doe"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Customer",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpCustomerUpdateBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "customer"
        ],
        "properties": {
          "customer": {
            "type": "object",
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Customer",
                "example": "1VT-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Customer. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "name": {
                "type": "string",
                "description": "The Name of the ERP Customer",
                "example": "John Doe"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Customer",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpCustomerSyncBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Customer. REQUIRED if 'origin_id' is not provided.",
                  "example": 123
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Customer. REQUIRED if this ERP Customer does not exist yet in Procore. If it exists, this attribute is REQUIRED if 'id' is not provided.",
                  "example": "1VT-33778-013"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Customer. Note: This is a free-form text field.",
                  "example": "{ additional_data: [] }"
                },
                "name": {
                  "type": "string",
                  "description": "The Name of the ERP Customer",
                  "example": "John Doe"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Customer",
                  "example": 2147483647
                }
              }
            }
          }
        }
      }
    },
    "ErpChangeOrderPackageCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "commitment_change_order"
        ],
        "properties": {
          "commitment_change_order": {
            "type": "object",
            "required": [
              "origin_id",
              "created_by_id"
            ],
            "properties": {
              "code": {
                "type": "string",
                "description": "The Third-party User-defined Unique Identifier of the ERP Change Order Package",
                "example": "001"
              },
              "created_by_id": {
                "type": "integer",
                "description": "Procore ID of the User that created the Change Order Package",
                "example": 123
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Additional Time & Materials for October"
              },
              "due_date": {
                "type": "string",
                "format": "date",
                "description": "Due date",
                "example": "2016-10-23"
              },
              "executed": {
                "type": "boolean",
                "description": "Executed",
                "example": true
              },
              "grand_total": {
                "type": "string",
                "description": "Total including markup",
                "example": 23474
              },
              "invoiced_date": {
                "type": "string",
                "format": "date",
                "description": "Invoiced date",
                "example": "2012-10-24"
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": "H-38"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Change Order Package. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Change Order Package",
                "example": "4COP-1001-231"
              },
              "paid_date": {
                "type": "string",
                "format": "date",
                "description": "Paid date",
                "example": "2016-11-23"
              },
              "schedule_impact_amount": {
                "type": "integer",
                "description": "Schedule impact in days",
                "example": 5
              },
              "status": {
                "description": "Status",
                "example": "draft",
                "enum": [
                  "draft",
                  "not_pricing",
                  "pricing",
                  "pending",
                  "revised",
                  "proceeding",
                  "not_proceeding",
                  "no_charge",
                  "approved",
                  "rejected"
                ]
              },
              "title": {
                "type": "string",
                "description": "Title",
                "example": "Additional Time & Materials"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Change Order Package",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpChangeOrderPackageUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "commitment_change_order"
        ],
        "properties": {
          "commitment_change_order": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "The Third-party User-defined Unique Identifier of the ERP Change Order Package",
                "example": "001"
              },
              "created_by_id": {
                "type": "integer",
                "description": "Procore ID of the User that created the Change Order Package",
                "example": 123
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "Additional Time & Materials for October"
              },
              "due_date": {
                "type": "string",
                "format": "date",
                "description": "Due date",
                "example": "2016-10-23"
              },
              "executed": {
                "type": "boolean",
                "description": "Executed",
                "example": true
              },
              "grand_total": {
                "type": "string",
                "description": "Total including markup",
                "example": 23474
              },
              "invoiced_date": {
                "type": "string",
                "format": "date",
                "description": "Invoiced date",
                "example": "2012-10-24"
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": "H-38"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Change Order Package. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Change Order Package",
                "example": "4COP-1001-231"
              },
              "paid_date": {
                "type": "string",
                "format": "date",
                "description": "Paid date",
                "example": "2016-11-23"
              },
              "schedule_impact_amount": {
                "type": "integer",
                "description": "Schedule impact in days",
                "example": 5
              },
              "status": {
                "description": "Status",
                "example": "draft",
                "enum": [
                  "draft",
                  "not_pricing",
                  "pricing",
                  "pending",
                  "revised",
                  "proceeding",
                  "not_proceeding",
                  "no_charge",
                  "approved",
                  "rejected"
                ]
              },
              "synced": {
                "type": "boolean",
                "description": "A flag indicating whether the ERP Change Order Package is synced with a Procore Change Order Package. Possible values: (true|false)",
                "example": true
              },
              "title": {
                "type": "string",
                "description": "Title",
                "example": "Additional Time & Materials"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Change Order Package",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpChangeOrderPackageSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer"
          },
          "commitment_id": {
            "type": "integer",
            "description": "The Procore ID of the ERP Change Order Package's ERP Commitment Contract. REQUIRED if commitment_origin_id is not provided.\n"
          },
          "commitment_origin_id": {
            "type": "string",
            "description": "The Third-party ID of the ERP Change Order Package's ERP Commitment Contract. REQUIRED if commitment_id is not provided.\n"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "The Third-party User-defined Unique Identifier of the ERP Change Order Package",
                  "example": "001"
                },
                "created_by_id": {
                  "type": "integer",
                  "description": "Procore ID of the User that created the Change Order Package",
                  "example": 123
                },
                "description": {
                  "type": "string",
                  "description": "Description",
                  "example": "Additional Time & Materials for October"
                },
                "due_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Due date",
                  "example": "2016-10-23"
                },
                "executed": {
                  "type": "boolean",
                  "description": "Executed",
                  "example": true
                },
                "grand_total": {
                  "type": "string",
                  "description": "Total including markup",
                  "example": 23474
                },
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Change Order Package. REQUIRED if 'origin_id' is not provided.",
                  "example": 123
                },
                "invoiced_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Invoiced date",
                  "example": "2012-10-24"
                },
                "number": {
                  "type": "string",
                  "description": "Number",
                  "example": "H-38"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Change Order Package. Note: This is a free-form text field.",
                  "example": "{ additional_data: [] }"
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Change Order Package. REQUIRED if this ERP Change Order Package does not exist yet in Procore. If it exists, this attribute is REQUIRED if 'id' is not provided.",
                  "example": "4COP-1001-231"
                },
                "paid_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Paid date",
                  "example": "2016-11-23"
                },
                "schedule_impact_amount": {
                  "type": "integer",
                  "description": "Schedule impact in days",
                  "example": 5
                },
                "status": {
                  "description": "Status",
                  "example": "draft",
                  "enum": [
                    "draft",
                    "not_pricing",
                    "pricing",
                    "pending",
                    "revised",
                    "proceeding",
                    "not_proceeding",
                    "no_charge",
                    "approved",
                    "rejected"
                  ]
                },
                "synced": {
                  "type": "boolean",
                  "description": "A flag indicating whether the ERP Change Order Package is synced with a Procore Change Order Package. Possible values: (true|false)",
                  "example": true
                },
                "title": {
                  "type": "string",
                  "description": "Title",
                  "example": "Additional Time & Materials"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Change Order Package",
                  "example": 2147483647
                }
              }
            }
          }
        }
      }
    },
    "ErpLineItemTypeCreateBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "line_item_type"
        ],
        "properties": {
          "line_item_type": {
            "type": "object",
            "required": [
              "name",
              "origin_id"
            ],
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item Type",
                "example": "1VT-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Line Item Type. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "accumulation_name": {
                "type": "string",
                "description": "The Accumulation Name of the ERP Line Item Type",
                "example": "Labor"
              },
              "base_type": {
                "type": "string",
                "description": "The Base Type for the ERP Line Item Type",
                "example": "other"
              },
              "csv_import_code": {
                "type": "string",
                "description": "The Short Code for the ERP Line Item Type",
                "example": "L2"
              },
              "is_active": {
                "type": "boolean",
                "description": "The Active status of the ERP Line Item Type",
                "example": true
              },
              "name": {
                "type": "string",
                "description": "The Name of the ERP Line Item Type",
                "example": "Labor"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Line Item Type",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpLineItemTypeUpdateBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "line_item_type"
        ],
        "properties": {
          "line_item_type": {
            "type": "object",
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item Type",
                "example": "1VT-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Line Item Type. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "accumulation_name": {
                "type": "string",
                "description": "The Accumulation Name of the ERP Line Item Type",
                "example": "Labor"
              },
              "base_type": {
                "type": "string",
                "description": "The Base Type for the ERP Line Item Type",
                "example": "other"
              },
              "csv_import_code": {
                "type": "string",
                "description": "The Short Code for the ERP Line Item Type",
                "example": "L2"
              },
              "is_active": {
                "type": "boolean",
                "description": "The Active status of the ERP Line Item Type",
                "example": true
              },
              "name": {
                "type": "string",
                "description": "The Name of the ERP Line Item Type",
                "example": "Labor"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Line Item Type",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpLineItemTypeSyncBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Line Item Type. REQUIRED if 'origin_id' is not provided.",
                  "example": 123
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Line Item Type. REQUIRED if this ERP Line Item Type does not exist yet in Procore. If it exists, this attribute is REQUIRED if 'id' is not provided.",
                  "example": "1VT-33778-013"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Line Item Type. Note: This is a free-form text field.",
                  "example": "{ additional_data: [] }"
                },
                "accumulation_name": {
                  "type": "string",
                  "description": "The Accumulation Name of the ERP Line Item Type",
                  "example": "Labor"
                },
                "base_type": {
                  "type": "string",
                  "description": "The Base Type for the ERP Line Item Type",
                  "example": "other"
                },
                "csv_import_code": {
                  "type": "string",
                  "description": "The Short Code for the ERP Line Item Type",
                  "example": "L2"
                },
                "is_active": {
                  "type": "boolean",
                  "description": "The Active status of the ERP Line Item Type",
                  "example": true
                },
                "name": {
                  "type": "string",
                  "description": "The Name of the ERP Line Item Type",
                  "example": "Labor"
                },
                "synced": {
                  "type": "boolean",
                  "description": "The Synced Status of the ERP Line Item Type",
                  "example": true
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Line Item Type",
                  "example": 2147483647
                }
              }
            }
          }
        }
      }
    },
    "ErpVendorTypeCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "vendor_type"
        ],
        "properties": {
          "vendor_type": {
            "type": "object",
            "required": [
              "name",
              "origin_id"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The Name of the ERP Vendor Type",
                "example": "Subcontractor"
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Vendor Type",
                "example": "1VT-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Vendor Type. Note: This is a free-form text field.",
                "example": "{ parent_ids: [1,2] }"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Vendor Type",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpVendorTypeUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "vendor_type"
        ],
        "properties": {
          "vendor_type": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The Name of the ERP Vendor Type",
                "example": "Subcontractor"
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Vendor Type",
                "example": "1VT-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Vendor Type. Note: This is a free-form text field.",
                "example": "{ parent_ids: [1,2] }"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Vendor Type",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpVendorTypeSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer",
            "description": "Company ID"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Vendor Type. REQUIRED if 'origin_id' is not provided.",
                  "example": 123
                },
                "name": {
                  "type": "string",
                  "description": "The Name of the ERP Vendor Type",
                  "example": "Subcontractor"
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Vendor Type. REQUIRED if this ERP Vendor Type does not exist yet in Procore. If it exists, this attribute is REQUIRED if 'id' is not provided.",
                  "example": "1VT-33778-013"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Vendor Type. Note: This is a free-form text field.",
                  "example": "{ parent_ids: [1,2] }"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Vendor Type",
                  "example": 2147483647
                }
              }
            }
          }
        }
      }
    },
    "ErpVendorCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "vendor"
        ],
        "properties": {
          "vendor": {
            "type": "object",
            "required": [
              "origin_id",
              "name",
              "email_address"
            ],
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Vendor",
                "example": "1VT-33778-013"
              },
              "name": {
                "type": "string",
                "description": "The Name of the ERP Vendor",
                "example": "Procore Incorporated"
              },
              "email_address": {
                "type": "string",
                "description": "The Email Address of the ERP Vendor",
                "example": "procore@procore.com"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Vendor. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "address": {
                "type": "string",
                "description": "The Address of the ERP Vendor",
                "example": "6309 Carpinteria Ave."
              },
              "city": {
                "type": "string",
                "description": "The City of the ERP Vendor",
                "example": "Carpinteria"
              },
              "zip": {
                "type": "string",
                "description": "The Zip Code of the ERP Vendor",
                "example": "93013"
              },
              "business_phone": {
                "type": "string",
                "description": "The Business Phone of the ERP Vendor",
                "example": "(812) 989-9810"
              },
              "mobile_phone": {
                "type": "string",
                "description": "The Mobile Phone of the ERP Vendor",
                "example": "(812) 989-9810"
              },
              "fax_number": {
                "type": "string",
                "description": "The Fax Number of the ERP Vendor",
                "example": "(812) 989-9810"
              },
              "is_active": {
                "type": "boolean",
                "description": "The Active status of the ERP Vendor",
                "example": true
              },
              "state_code": {
                "type": "string",
                "description": "The State Code of the ERP Vendor",
                "example": "CA"
              },
              "authorized_bidder": {
                "type": "boolean",
                "description": "The Authorized Bidder status of the ERP Vendor",
                "example": true
              },
              "prequalified": {
                "type": "boolean",
                "description": "The Prequalified status of the ERP Vendor",
                "example": false
              },
              "country_code": {
                "type": "string",
                "description": "The Country Code of the ERP Vendor",
                "example": "US"
              },
              "abbreviated_name": {
                "type": "string",
                "description": "The Abbreviated Name of the ERP Vendor",
                "example": "Procore Inc."
              },
              "labor_union": {
                "type": "string",
                "description": "The Labor Union of the ERP Vendor",
                "example": "IWW 872"
              },
              "license_number": {
                "type": "string",
                "description": "The License Number of the ERP Vendor",
                "example": "1901XYZ"
              },
              "non_union_prevailing_wage": {
                "type": "boolean",
                "description": "The Non Union Prevailing Wage status of the ERP Vendor",
                "example": false
              },
              "notes": {
                "type": "string",
                "description": "The Notes (notes\/keywords\/tags) of the ERP Vendor",
                "example": "owned by a dog"
              },
              "union_member": {
                "type": "boolean",
                "description": "The Union Member status of the ERP Vendor",
                "example": false
              },
              "website": {
                "type": "string",
                "description": "The Website url of the ERP Vendor",
                "example": "procore.com"
              },
              "primary_contact_id": {
                "type": "integer",
                "description": "The ID of the Primary Contact of the ERP Vendor",
                "example": 42
              },
              "code": {
                "type": "string",
                "description": "The Third-party User-defined Unique Identifier of the ERP Vendor",
                "example": "PINC"
              },
              "vendor_type_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Vendor's Vendor Type",
                "example": "1VT-33778-013"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Vendor",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpVendorUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "vendor"
        ],
        "properties": {
          "vendor": {
            "type": "object",
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Vendor",
                "example": "1VT-33778-013"
              },
              "name": {
                "type": "string",
                "description": "The Name of the ERP Vendor",
                "example": "Procore Incorporated"
              },
              "email_address": {
                "type": "string",
                "description": "The Email Address of the ERP Vendor",
                "example": "procore@procore.com"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Vendor. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "address": {
                "type": "string",
                "description": "The Address of the ERP Vendor",
                "example": "6309 Carpinteria Ave."
              },
              "city": {
                "type": "string",
                "description": "The City of the ERP Vendor",
                "example": "Carpinteria"
              },
              "zip": {
                "type": "string",
                "description": "The Zip Code of the ERP Vendor",
                "example": "93013"
              },
              "business_phone": {
                "type": "string",
                "description": "The Business Phone of the ERP Vendor",
                "example": "(812) 989-9810"
              },
              "mobile_phone": {
                "type": "string",
                "description": "The Mobile Phone of the ERP Vendor",
                "example": "(812) 989-9810"
              },
              "fax_number": {
                "type": "string",
                "description": "The Fax Number of the ERP Vendor",
                "example": "(812) 989-9810"
              },
              "is_active": {
                "type": "boolean",
                "description": "The Active status of the ERP Vendor",
                "example": true
              },
              "state_code": {
                "type": "string",
                "description": "The State Code of the ERP Vendor",
                "example": "CA"
              },
              "authorized_bidder": {
                "type": "boolean",
                "description": "The Authorized Bidder status of the ERP Vendor",
                "example": true
              },
              "prequalified": {
                "type": "boolean",
                "description": "The Prequalified status of the ERP Vendor",
                "example": false
              },
              "country_code": {
                "type": "string",
                "description": "The Country Code of the ERP Vendor",
                "example": "US"
              },
              "abbreviated_name": {
                "type": "string",
                "description": "The Abbreviated Name of the ERP Vendor",
                "example": "Procore Inc."
              },
              "labor_union": {
                "type": "string",
                "description": "The Labor Union of the ERP Vendor",
                "example": "IWW 872"
              },
              "license_number": {
                "type": "string",
                "description": "The License Number of the ERP Vendor",
                "example": "1901XYZ"
              },
              "non_union_prevailing_wage": {
                "type": "boolean",
                "description": "The Non Union Prevailing Wage status of the ERP Vendor",
                "example": false
              },
              "notes": {
                "type": "string",
                "description": "The Notes (notes\/keywords\/tags) of the ERP Vendor",
                "example": "owned by a dog"
              },
              "union_member": {
                "type": "boolean",
                "description": "The Union Member status of the ERP Vendor",
                "example": false
              },
              "website": {
                "type": "string",
                "description": "The Website url of the ERP Vendor",
                "example": "procore.com"
              },
              "primary_contact_id": {
                "type": "integer",
                "description": "The ID of the Primary Contact of the ERP Vendor",
                "example": 42
              },
              "code": {
                "type": "string",
                "description": "The Third-party User-defined Unique Identifier of the ERP Vendor",
                "example": "PINC"
              },
              "vendor_type_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Vendor's Vendor Type",
                "example": "1VT-33778-013"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Vendor",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpVendorSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Vendor. REQUIRED if 'origin_id' is not provided.",
                  "example": 123
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Vendor. REQUIRED if this ERP Vendor does not exist yet in Procore. If it exists, this attribute is REQUIRED if 'id' is not provided.",
                  "example": "1VT-33778-013"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Vendor. Note: This is a free-form text field.",
                  "example": "{ additional_data: [] }"
                },
                "address": {
                  "type": "string",
                  "description": "The Address of the ERP Vendor",
                  "example": "6309 Carpinteria Ave."
                },
                "name": {
                  "type": "string",
                  "description": "The Name of the ERP Vendor. REQUIRED if this ERP Vendor does not exist yet in Procore.",
                  "example": "Procore Incorporated"
                },
                "email_address": {
                  "type": "string",
                  "description": "The Email Address of the ERP Vendor. REQUIRED if this ERP Vendor does not exist yet in Procore.",
                  "example": "procore@procore.com"
                },
                "city": {
                  "type": "string",
                  "description": "The City of the ERP Vendor",
                  "example": "Carpinteria"
                },
                "zip": {
                  "type": "string",
                  "description": "The Zip Code of the ERP Vendor",
                  "example": "93013"
                },
                "business_phone": {
                  "type": "string",
                  "description": "The Business Phone of the ERP Vendor",
                  "example": "(812) 989-9810"
                },
                "mobile_phone": {
                  "type": "string",
                  "description": "The Mobile Phone of the ERP Vendor",
                  "example": "(812) 989-9810"
                },
                "fax_number": {
                  "type": "string",
                  "description": "The Fax Number of the ERP Vendor",
                  "example": "(812) 989-9810"
                },
                "is_active": {
                  "type": "boolean",
                  "description": "The Active status of the ERP Vendor",
                  "example": true
                },
                "state_code": {
                  "type": "string",
                  "description": "The State Code of the ERP Vendor",
                  "example": "CA"
                },
                "authorized_bidder": {
                  "type": "boolean",
                  "description": "The Authorized Bidder status of the ERP Vendor",
                  "example": true
                },
                "prequalified": {
                  "type": "boolean",
                  "description": "The Prequalified status of the ERP Vendor",
                  "example": false
                },
                "country_code": {
                  "type": "string",
                  "description": "The Country Code of the ERP Vendor",
                  "example": "US"
                },
                "abbreviated_name": {
                  "type": "string",
                  "description": "The Abbreviated Name of the ERP Vendor",
                  "example": "Procore Inc."
                },
                "labor_union": {
                  "type": "string",
                  "description": "The Labor Union of the ERP Vendor",
                  "example": "IWW 872"
                },
                "license_number": {
                  "type": "string",
                  "description": "The License Number of the ERP Vendor",
                  "example": "1901XYZ"
                },
                "non_union_prevailing_wage": {
                  "type": "boolean",
                  "description": "The Non Union Prevailing Wage status of the ERP Vendor",
                  "example": false
                },
                "notes": {
                  "type": "string",
                  "description": "The Notes (notes\/keywords\/tags) of the ERP Vendor",
                  "example": "owned by a dog"
                },
                "union_member": {
                  "type": "boolean",
                  "description": "The Union Member status of the ERP Vendor",
                  "example": false
                },
                "website": {
                  "type": "string",
                  "description": "The Website url of the ERP Vendor",
                  "example": "procore.com"
                },
                "primary_contact_id": {
                  "type": "integer",
                  "description": "The ID of the Primary Contact of the ERP Vendor",
                  "example": 42
                },
                "code": {
                  "type": "string",
                  "description": "The Third-party User-defined Unique Identifier of the ERP Vendor",
                  "example": "PINC"
                },
                "synced": {
                  "type": "boolean",
                  "description": "A flag indicating whether the ERP Vendor is synced with a Procore Vendor. Possible values: (true|false)",
                  "example": true
                },
                "vendor_type_origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Vendor's Vendor Type",
                  "example": "1VT-33778-013"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Vendor",
                  "example": 2147483647
                }
              }
            }
          }
        }
      }
    },
    "ErpPurchaseOrderContractCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "purchase_order_contract"
        ],
        "properties": {
          "purchase_order_contract": {
            "type": "object",
            "required": [
              "origin_id"
            ],
            "properties": {
              "assignee_id": {
                "type": "integer",
                "description": "The Procore User ID the Purchase Order Contract is assigned to",
                "example": 464773
              },
              "bill_to_address": {
                "type": "string",
                "description": "Bill to Address",
                "example": "1410 Harbor View Drive Newport Beach, CA 92663"
              },
              "code": {
                "type": "string",
                "description": "The Third-party User-defined Unique Identifier of the ERP Purchase Order Contract",
                "example": "PO-001"
              },
              "delivery_date": {
                "type": "string",
                "format": "date",
                "description": "Purchase order delivery date",
                "example": "2012-10-03"
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "<p>Paving level 3 parking lot.<\/p>"
              },
              "executed": {
                "type": "boolean",
                "description": "Executed (or not)",
                "example": false
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": "SC-001"
              },
              "payment_terms": {
                "type": "string",
                "description": "Payment terms",
                "example": "Net 30"
              },
              "private": {
                "type": "boolean",
                "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
                "example": false
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Purchase Order Contract",
                "example": "1PO-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Purchase Order Contract. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "retainage_percent": {
                "type": "string",
                "description": "Retainage percent",
                "example": 10.5
              },
              "ship_to_address": {
                "type": "string",
                "description": "Ship to address",
                "example": "Santa Claus Lane, Carpinteria, CA"
              },
              "ship_via": {
                "type": "string",
                "description": "Ship via",
                "example": "Acme Shipping"
              },
              "status": {
                "type": "string",
                "description": "Status",
                "enum": [
                  "Draft",
                  "Processing",
                  "Submitted",
                  "Partially Received",
                  "Received",
                  "Approved",
                  "Closed"
                ],
                "example": "Processing"
              },
              "synced": {
                "type": "boolean",
                "description": "A flag indicating whether the ERP Purchase Order Contract is synced with a Procore Purchase Order Contract. Possible values: (true|false)",
                "example": true
              },
              "title": {
                "type": "string",
                "description": "Title",
                "example": "Concrete Paving"
              },
              "vendor_id": {
                "type": "integer",
                "description": "The Procore Vendor ID associated with the Purchase Order Contract",
                "example": 123
              },
              "vendor_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Purchase Order Contract's Vendor",
                "example": "ADAM-WS1"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Purchase Order Contract",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpPurchaseOrderContractUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "purchase_order_contract"
        ],
        "properties": {
          "purchase_order_contract": {
            "properties": {
              "assignee_id": {
                "type": "integer",
                "description": "The Procore User ID the Purchase Order Contract is assigned to",
                "example": 464773
              },
              "bill_to_address": {
                "type": "string",
                "description": "Bill to Address",
                "example": "1410 Harbor View Drive Newport Beach, CA 92663"
              },
              "code": {
                "type": "string",
                "description": "The Third-party User-defined Unique Identifier of the ERP Purchase Order Contract",
                "example": "PO-001"
              },
              "delivery_date": {
                "type": "string",
                "format": "date",
                "description": "Purchase order delivery date",
                "example": "2012-10-03"
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "<p>Paving level 3 parking lot.<\/p>"
              },
              "executed": {
                "type": "boolean",
                "description": "Executed (or not)",
                "example": false
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": "SC-001"
              },
              "payment_terms": {
                "type": "string",
                "description": "Payment terms",
                "example": "Net 30"
              },
              "private": {
                "type": "boolean",
                "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
                "example": false
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Purchase Order Contract",
                "example": "1PO-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Purchase Order Contract. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "retainage_percent": {
                "type": "string",
                "description": "Retainage percent",
                "example": 10.5
              },
              "ship_to_address": {
                "type": "string",
                "description": "Ship to address",
                "example": "Santa Claus Lane, Carpinteria, CA"
              },
              "ship_via": {
                "type": "string",
                "description": "Ship via",
                "example": "Acme Shipping"
              },
              "status": {
                "type": "string",
                "description": "Status",
                "enum": [
                  "Draft",
                  "Processing",
                  "Submitted",
                  "Partially Received",
                  "Received",
                  "Approved",
                  "Closed"
                ],
                "example": "Processing"
              },
              "synced": {
                "type": "boolean",
                "description": "A flag indicating whether the ERP Purchase Order Contract is synced with a Procore Purchase Order Contract. Possible values: (true|false)",
                "example": true
              },
              "title": {
                "type": "string",
                "description": "Title",
                "example": "Concrete Paving"
              },
              "vendor_id": {
                "type": "integer",
                "description": "The Procore Vendor ID associated with the Purchase Order Contract",
                "example": 123
              },
              "vendor_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Purchase Order Contract's Vendor",
                "example": "ADAM-WS1"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Purchase Order Contract",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpPurchaseOrderContractSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer"
          },
          "job_id": {
            "type": "integer",
            "description": "The Procore ID of the ERP Purchase Order Contract's ERP Project. REQUIRED if job_origin_id is not provided.\n"
          },
          "job_origin_id": {
            "type": "string",
            "description": "The Third-party ID of the ERP Purchase Order Contract's ERP Project. REQUIRED if job_id is not provided.\n"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "assignee_id": {
                  "type": "integer",
                  "description": "The Procore User ID the Purchase Order Contract is assigned to",
                  "example": 464773
                },
                "bill_to_address": {
                  "type": "string",
                  "description": "Bill to Address",
                  "example": "1410 Harbor View Drive Newport Beach, CA 92663"
                },
                "code": {
                  "type": "string",
                  "description": "The Third-party User-defined Unique Identifier of the ERP Purchase Order Contract",
                  "example": "PO-001"
                },
                "delivery_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Purchase order delivery date",
                  "example": "2012-10-03"
                },
                "description": {
                  "type": "string",
                  "description": "Description",
                  "example": "<p>Paving level 3 parking lot.<\/p>"
                },
                "executed": {
                  "type": "boolean",
                  "description": "Executed (or not)",
                  "example": false
                },
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Purchase Order Contract. REQUIRED if 'origin_id' is not provided.",
                  "example": 123
                },
                "number": {
                  "type": "string",
                  "description": "Number",
                  "example": "SC-001"
                },
                "payment_terms": {
                  "type": "string",
                  "description": "Payment terms",
                  "example": "Net 30"
                },
                "private": {
                  "type": "boolean",
                  "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
                  "example": false
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Purchase Order Contract. REQUIRED if this ERP Purchase Order Contract does not exist yet in Procore. If it exists, this attribute is REQUIRED if 'id' is not provided.",
                  "example": "1PO-33778-013"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Purchase Order Contract. Note: This is a free-form text field.",
                  "example": "{ additional_data: [] }"
                },
                "retainage_percent": {
                  "type": "string",
                  "description": "Retainage percent",
                  "example": 10.5
                },
                "ship_to_address": {
                  "type": "string",
                  "description": "Ship to address",
                  "example": "Santa Claus Lane, Carpinteria, CA"
                },
                "ship_via": {
                  "type": "string",
                  "description": "Ship via",
                  "example": "Acme Shipping"
                },
                "status": {
                  "type": "string",
                  "description": "Status",
                  "enum": [
                    "Draft",
                    "Processing",
                    "Submitted",
                    "Partially Received",
                    "Received",
                    "Approved",
                    "Closed"
                  ],
                  "example": "Processing"
                },
                "synced": {
                  "type": "boolean",
                  "description": "A flag indicating whether the ERP Purchase Order Contract is synced with a Procore Purchase Order Contract. Possible values: (true|false)",
                  "example": true
                },
                "title": {
                  "type": "string",
                  "description": "Title",
                  "example": "Concrete Paving"
                },
                "vendor_id": {
                  "type": "integer",
                  "description": "The Procore Vendor ID associated with the Purchase Order Contract",
                  "example": 123
                },
                "vendor_origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Purchase Order Contract's Vendor",
                  "example": "ADAM-WS1"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Purchase Order Contract",
                  "example": 2147483647
                }
              }
            }
          }
        }
      }
    },
    "ErpWorkOrderContractLineItemCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "work_order_contract_line_item"
        ],
        "properties": {
          "work_order_contract_line_item": {
            "type": "object",
            "required": [
              "origin_id"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "Line Item amount",
                "example": "1000.0"
              },
              "cost_code_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item's Cost Code",
                "example": "CC1-7221"
              },
              "description": {
                "type": "string",
                "description": "Line Item description",
                "example": "Cleanup"
              },
              "line_item_type_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item's Line Item Type (Standard Category)",
                "example": "Cat1-M"
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item",
                "example": "LI1-SC-1"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Line Item. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "position": {
                "type": "integer",
                "description": "Line Item position",
                "example": 1
              },
              "quantity": {
                "type": "number",
                "format": "float",
                "description": "Line Item quantity",
                "example": "10.0"
              },
              "unit_cost": {
                "type": "number",
                "format": "float",
                "description": "Line Item unit cost",
                "example": "100.0"
              },
              "unit_description": {
                "type": "string",
                "description": "Line Item unit description",
                "example": "Lbs"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Line Item",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpWorkOrderContractLineItemUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "work_order_contract_line_item"
        ],
        "properties": {
          "work_order_contract_line_item": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "Line Item amount",
                "example": "1000.0"
              },
              "cost_code_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item's Cost Code",
                "example": "CC1-7221"
              },
              "description": {
                "type": "string",
                "description": "Line Item description",
                "example": "Cleanup"
              },
              "line_item_type_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item's Line Item Type (Standard Category)",
                "example": "Cat1-M"
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item",
                "example": "LI1-SC-1"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Line Item. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "position": {
                "type": "integer",
                "description": "Line Item position",
                "example": 1
              },
              "quantity": {
                "type": "number",
                "format": "float",
                "description": "Line Item quantity",
                "example": "10.0"
              },
              "synced": {
                "type": "boolean",
                "description": "A flag indicating whether the ERP Line Item is synced with a Procore Line Item. Possible values: (true|false)",
                "example": true
              },
              "unit_cost": {
                "type": "number",
                "format": "float",
                "description": "Line Item unit cost",
                "example": "100.0"
              },
              "unit_description": {
                "type": "string",
                "description": "Line Item unit description",
                "example": "Lbs"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Line Item",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpWorkOrderContractLineItemSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer"
          },
          "commitment_id": {
            "type": "integer",
            "description": "The Procore ID of the ERP Line Item's ERP Work Order Contract. REQUIRED if commitment_origin_id is not provided.\n"
          },
          "commitment_origin_id": {
            "type": "string",
            "description": "The Third-party ID of the ERP Line Item's ERP Work Order Contract. REQUIRED if commitment_id is not provided.\n"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "string",
                  "description": "Line Item amount",
                  "example": "1000.0"
                },
                "cost_code_origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Line Item's Cost Code",
                  "example": "CC1-7221"
                },
                "description": {
                  "type": "string",
                  "description": "Line Item description",
                  "example": "Cleanup"
                },
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Line Item. REQUIRED if 'origin_id' is not provided.",
                  "example": 123
                },
                "line_item_type_origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Line Item's Line Item Type (Standard Category)",
                  "example": "Cat1-M"
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Line Item. REQUIRED if this ERP Line Item does not exist yet in Procore. If it exists, this attribute is REQUIRED if 'id' is not provided.",
                  "example": "LI1-SC-1"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Line Item. Note: This is a free-form text field.",
                  "example": "{ additional_data: [] }"
                },
                "position": {
                  "type": "integer",
                  "description": "Line Item position",
                  "example": 1
                },
                "quantity": {
                  "type": "number",
                  "format": "float",
                  "description": "Line Item quantity",
                  "example": "10.0"
                },
                "synced": {
                  "type": "boolean",
                  "description": "A flag indicating whether the ERP Line Item is synced with a Procore Line Item. Possible values: (true|false)",
                  "example": true
                },
                "unit_cost": {
                  "type": "number",
                  "format": "float",
                  "description": "Line Item unit cost",
                  "example": "100.0"
                },
                "unit_description": {
                  "type": "string",
                  "description": "Line Item unit description",
                  "example": "Lbs"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Line Item",
                  "example": 2147483647
                }
              }
            }
          }
        }
      }
    },
    "ErpPurchaseOrderContractLineItemCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "purchase_order_contract_line_item"
        ],
        "properties": {
          "purchase_order_contract_line_item": {
            "type": "object",
            "required": [
              "origin_id"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "Line Item amount",
                "example": "1000.0"
              },
              "cost_code_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item's Cost Code",
                "example": "CC1-7221"
              },
              "description": {
                "type": "string",
                "description": "Line Item description",
                "example": "Cleanup"
              },
              "line_item_type_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item's Line Item Type (Standard Category)",
                "example": "Cat1-M"
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item",
                "example": "LI1-SC-1"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Line Item. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "position": {
                "type": "integer",
                "description": "Line Item position",
                "example": 1
              },
              "quantity": {
                "type": "number",
                "format": "float",
                "description": "Line Item quantity",
                "example": "10.0"
              },
              "unit_cost": {
                "type": "number",
                "format": "float",
                "description": "Line Item unit cost",
                "example": "100.0"
              },
              "unit_description": {
                "type": "string",
                "description": "Line Item unit description",
                "example": "Lbs"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Line Item",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpPurchaseOrderContractLineItemUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "purchase_order_contract_line_item"
        ],
        "properties": {
          "purchase_order_contract_line_item": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "Line Item amount",
                "example": "1000.0"
              },
              "cost_code_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item's Cost Code",
                "example": "CC1-7221"
              },
              "description": {
                "type": "string",
                "description": "Line Item description",
                "example": "Cleanup"
              },
              "line_item_type_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item's Line Item Type (Standard Category)",
                "example": "Cat1-M"
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Line Item",
                "example": "LI1-SC-1"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Line Item. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "position": {
                "type": "integer",
                "description": "Line Item position",
                "example": 1
              },
              "quantity": {
                "type": "number",
                "format": "float",
                "description": "Line Item quantity",
                "example": "10.0"
              },
              "synced": {
                "type": "boolean",
                "description": "A flag indicating whether the ERP Line Item is synced with a Procore Line Item. Possible values: (true|false)",
                "example": true
              },
              "unit_cost": {
                "type": "number",
                "format": "float",
                "description": "Line Item unit cost",
                "example": "100.0"
              },
              "unit_description": {
                "type": "string",
                "description": "Line Item unit description",
                "example": "Lbs"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Line Item",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpPurchaseOrderContractLineItemSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer"
          },
          "commitment_id": {
            "type": "integer",
            "description": "The Procore ID of the ERP Line Item's ERP Purchase Order Contract. REQUIRED if commitment_origin_id is not provided.\n"
          },
          "commitment_origin_id": {
            "type": "integer",
            "description": "The Third-party ID of the ERP Line Item's ERP Purchase Order Contract. REQUIRED if commitment_id is not provided.\n"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "string",
                  "description": "Line Item amount",
                  "example": "1000.0"
                },
                "cost_code_origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Line Item's Cost Code",
                  "example": "CC1-7221"
                },
                "description": {
                  "type": "string",
                  "description": "Line Item description",
                  "example": "Cleanup"
                },
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Line Item. REQUIRED if 'origin_id' is not provided.",
                  "example": 123
                },
                "line_item_type_origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Line Item's Line Item Type (Standard Category)",
                  "example": "Cat1-M"
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Line Item. REQUIRED if this ERP Line Item does not exist yet in Procore. If it exists, this attribute is REQUIRED if 'id' is not provided.",
                  "example": "LI1-SC-1"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Line Item. Note: This is a free-form text field.",
                  "example": "{ additional_data: [] }"
                },
                "position": {
                  "type": "integer",
                  "description": "Line Item position",
                  "example": 1
                },
                "quantity": {
                  "type": "number",
                  "format": "float",
                  "description": "Line Item quantity",
                  "example": "10.0"
                },
                "synced": {
                  "type": "boolean",
                  "description": "A flag indicating whether the ERP Line Item is synced with a Procore Line Item. Possible values: (true|false)",
                  "example": true
                },
                "unit_cost": {
                  "type": "number",
                  "format": "float",
                  "description": "Line Item unit cost",
                  "example": "100.0"
                },
                "unit_description": {
                  "type": "string",
                  "description": "Line Item unit description",
                  "example": "Lbs"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Line Item",
                  "example": 2147483647
                }
              }
            }
          }
        }
      }
    },
    "ErpWorkOrderContractCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "work_order_contract"
        ],
        "properties": {
          "work_order_contract": {
            "type": "object",
            "required": [
              "origin_id"
            ],
            "properties": {
              "actual_completion_date": {
                "type": "string",
                "format": "date",
                "description": "Work Order Contract actual completion date",
                "example": "2012-10-27"
              },
              "code": {
                "type": "string",
                "description": "The Third-party User-defined Unique Identifier of the ERP Work Order Contract",
                "example": "SC-001"
              },
              "contract_estimated_completion_date": {
                "type": "string",
                "format": "date",
                "description": "Work Order Contract estimated completion date",
                "example": "2012-10-31"
              },
              "contract_start_date": {
                "type": "string",
                "format": "date",
                "description": "Work Order Contract start date",
                "example": "2012-10-03"
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "<p>Paving level 3 parking lot.<\/p>"
              },
              "exclusions": {
                "type": "string",
                "description": "Exclusions",
                "example": "<p>Stairs, Elevator platform<\/p>"
              },
              "executed": {
                "type": "boolean",
                "description": "Executed (or not)",
                "example": false
              },
              "inclusions": {
                "type": "string",
                "description": "Inclusions",
                "example": "<p>Level 3 parking lot.<\/p>"
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": "SC-001"
              },
              "private": {
                "type": "boolean",
                "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
                "example": false
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Work Order Contract",
                "example": "1SC-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Work Order Contract. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "retainage_percent": {
                "type": "string",
                "description": "Retainage percent",
                "example": 10.5
              },
              "signed_contract_received_date": {
                "type": "string",
                "format": "date",
                "description": "Work Order Contract signed contract received date",
                "example": "2012-10-25"
              },
              "status": {
                "type": "string",
                "description": "Status",
                "enum": [
                  "Draft",
                  "Out For Bid",
                  "Out For Signature",
                  "Approved",
                  "Complete",
                  "Terminated",
                  "Void"
                ],
                "example": "Draft"
              },
              "synced": {
                "type": "boolean",
                "description": "A flag indicating whether the ERP Work Order Contract is synced with a Procore Work Order Contract. Possible values: (true|false)",
                "example": true
              },
              "title": {
                "type": "string",
                "description": "Title",
                "example": "Concrete Paving"
              },
              "vendor_id": {
                "type": "integer",
                "description": "The Procore Vendor ID associated with the Work Order Contract",
                "example": 123
              },
              "vendor_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Work Order Contract's Vendor",
                "example": "ADAM-WS1"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Work Order Contract",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpWorkOrderContractUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "work_order_contract"
        ],
        "properties": {
          "work_order_contract": {
            "properties": {
              "actual_completion_date": {
                "type": "string",
                "format": "date",
                "description": "Work Order Contract actual completion date",
                "example": "2012-10-27"
              },
              "code": {
                "type": "string",
                "description": "The Third-party User-defined Unique Identifier of the ERP Work Order Contract",
                "example": "SC-001"
              },
              "contract_estimated_completion_date": {
                "type": "string",
                "format": "date",
                "description": "Work Order Contract estimated completion date",
                "example": "2012-10-31"
              },
              "contract_start_date": {
                "type": "string",
                "format": "date",
                "description": "Work Order Contract start date",
                "example": "2012-10-03"
              },
              "description": {
                "type": "string",
                "description": "Description",
                "example": "<p>Paving level 3 parking lot.<\/p>"
              },
              "exclusions": {
                "type": "string",
                "description": "Exclusions",
                "example": "<p>Stairs, Elevator platform<\/p>"
              },
              "executed": {
                "type": "boolean",
                "description": "Executed (or not)",
                "example": false
              },
              "inclusions": {
                "type": "string",
                "description": "Inclusions",
                "example": "<p>Level 3 parking lot.<\/p>"
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": "SC-001"
              },
              "private": {
                "type": "boolean",
                "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
                "example": false
              },
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Work Order Contract",
                "example": "1SC-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Work Order Contract. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "retainage_percent": {
                "type": "string",
                "description": "Retainage percent",
                "example": 10.5
              },
              "signed_contract_received_date": {
                "type": "string",
                "format": "date",
                "description": "Work Order Contract signed contract received date",
                "example": "2012-10-25"
              },
              "status": {
                "type": "string",
                "description": "Status",
                "enum": [
                  "Draft",
                  "Out For Bid",
                  "Out For Signature",
                  "Approved",
                  "Complete",
                  "Terminated",
                  "Void"
                ],
                "example": "Draft"
              },
              "synced": {
                "type": "boolean",
                "description": "A flag indicating whether the ERP Work Order Contract is synced with a Procore Work Order Contract. Possible values: (true|false)",
                "example": true
              },
              "title": {
                "type": "string",
                "description": "Title",
                "example": "Concrete Paving"
              },
              "vendor_id": {
                "type": "integer",
                "description": "The Procore Vendor ID associated with the Work Order Contract",
                "example": 123
              },
              "vendor_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Work Order Contract's Vendor",
                "example": "ADAM-WS1"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Work Order Contract",
                "example": 2147483647
              }
            }
          }
        }
      }
    },
    "ErpWorkOrderContractSyncBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer"
          },
          "job_id": {
            "type": "integer",
            "description": "The Procore ID of the ERP Work Order Contract's ERP Project. REQUIRED if job_origin_id is not provided.\n"
          },
          "job_origin_id": {
            "type": "string",
            "description": "The Third-party ID of the ERP Work Order Contract's ERP Project. REQUIRED if job_id is not provided.\n"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "actual_completion_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Work Order Contract actual completion date",
                  "example": "2012-10-27"
                },
                "code": {
                  "type": "string",
                  "description": "The Third-party User-defined Unique Identifier of the ERP Work Order Contract",
                  "example": "SC-001"
                },
                "contract_estimated_completion_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Work Order Contract estimated completion date",
                  "example": "2012-10-31"
                },
                "contract_start_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Work Order Contract start date",
                  "example": "2012-10-03"
                },
                "description": {
                  "type": "string",
                  "description": "Description",
                  "example": "<p>Paving level 3 parking lot.<\/p>"
                },
                "exclusions": {
                  "type": "string",
                  "description": "Exclusions",
                  "example": "<p>Stairs, Elevator platform<\/p>"
                },
                "executed": {
                  "type": "boolean",
                  "description": "Executed (or not)",
                  "example": false
                },
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Work Order Contract. REQUIRED if 'origin_id' is not provided.",
                  "example": 123
                },
                "inclusions": {
                  "type": "string",
                  "description": "Inclusions",
                  "example": "<p>Level 3 parking lot.<\/p>"
                },
                "number": {
                  "type": "string",
                  "description": "Number",
                  "example": "SC-001"
                },
                "private": {
                  "type": "boolean",
                  "description": "If true, visible to admins and whitelisted accessors; otherwise visible to those with read only access.",
                  "example": false
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Work Order Contract. REQUIRED if this ERP Work Order Contract does not exist yet in Procore. If it exists, this attribute is REQUIRED if 'id' is not provided.",
                  "example": "1SC-33778-013"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Work Order Contract. Note: This is a free-form text field.",
                  "example": "{ additional_data: [] }"
                },
                "retainage_percent": {
                  "type": "string",
                  "description": "Retainage percent",
                  "example": 10.5
                },
                "signed_contract_received_date": {
                  "type": "string",
                  "format": "date",
                  "description": "Work Order Contract signed contract received date",
                  "example": "2012-10-25"
                },
                "status": {
                  "type": "string",
                  "description": "Status",
                  "enum": [
                    "Draft",
                    "Out For Bid",
                    "Out For Signature",
                    "Approved",
                    "Complete",
                    "Terminated",
                    "Void"
                  ],
                  "example": "Draft"
                },
                "synced": {
                  "type": "boolean",
                  "description": "A flag indicating whether the ERP Work Order Contract is synced with a Procore Work Order Contract. Possible values: (true|false)",
                  "example": true
                },
                "title": {
                  "type": "string",
                  "description": "Title",
                  "example": "Concrete Paving"
                },
                "vendor_id": {
                  "type": "integer",
                  "description": "The Procore Vendor ID associated with the Work Order Contract",
                  "example": 123
                },
                "vendor_origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Work Order Contract's Vendor",
                  "example": "ADAM-WS1"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Work Order Contract",
                  "example": 2147483647
                }
              }
            }
          }
        }
      }
    },
    "ErpProjectCreateBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "project"
        ],
        "properties": {
          "project": {
            "type": "object",
            "required": [
              "origin_id",
              "name"
            ],
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Project",
                "example": "1VT-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Project. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "customer_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Project's Customer",
                "example": "1VT-33778-013"
              },
              "city": {
                "type": "string",
                "description": "The City in which the ERP Project is located",
                "example": "Carpinteria"
              },
              "active": {
                "type": "boolean",
                "description": "The Active status of the ERP Project",
                "example": true
              },
              "name": {
                "type": "string",
                "description": "The Name of the ERP Project",
                "example": "P4"
              },
              "parent_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Project's Parent.",
                "example": "P1-3445"
              },
              "status": {
                "type": "string",
                "description": "The Status of the ERP Project",
                "example": "In Progress"
              },
              "code": {
                "type": "string",
                "description": "The Third-party user-defined unique identifier",
                "example": "P4-J1"
              },
              "version": {
                "type": "integer",
                "description": "The Version number of the ERP Project",
                "example": 2147483647
              },
              "costs_syncing": {
                "type": "boolean",
                "description": "The Costs Syncing status of the ERP Project",
                "example": false
              },
              "archived": {
                "type": "boolean",
                "description": "The Archived status of the ERP Project",
                "example": false
              },
              "address": {
                "type": "string",
                "description": "The street Address of the ERP Project location",
                "example": "6309 Carpinteria Ave."
              },
              "state_code": {
                "type": "string",
                "description": "The Code that represents the State of the ERP Project.\nMust be a valid Subregion Code within the specified Country Code as defined\nby the ruby gem Carmen\n",
                "example": "CA"
              },
              "zip": {
                "type": "string",
                "description": "The Zip code of the ERP Project",
                "example": "93013"
              },
              "country_code": {
                "type": "string",
                "description": "The two character Code that represents the Country in which the ERP Project is located\n",
                "example": "US"
              },
              "description": {
                "type": "string",
                "description": "The Description of the ERP Project",
                "example": "Project of Procore"
              },
              "estimated_completion_date": {
                "type": "string",
                "format": "date",
                "description": "The Estimated Completion Date of the ERP Project",
                "example": "2015-05-15"
              },
              "estimated_start_date": {
                "type": "string",
                "format": "date",
                "description": "The Estimated Start Date of the ERP Project",
                "example": "2015-05-15"
              },
              "flag": {
                "type": "string",
                "enum": [
                  "Red",
                  "Yellow",
                  "Green"
                ],
                "description": "The Flag of the ERP Project",
                "example": "Yellow"
              },
              "image_id": {
                "type": "integer",
                "description": "The ID of the Image of the ERP Project",
                "example": 21
              },
              "phone": {
                "type": "string",
                "description": "The Phone number of the ERP Project",
                "example": "310-555-5555"
              },
              "program_id": {
                "type": "integer",
                "description": "The Program ID of the ERP Project",
                "example": 5
              },
              "project_number": {
                "type": "string",
                "description": "The Number of the ERP Project",
                "example": "A-2"
              },
              "project_stage_id": {
                "type": "integer",
                "description": "The Project Stage ID for the ERP Project",
                "example": 1
              },
              "project_template_id": {
                "type": "integer",
                "description": "The ID of the Project Template as designated by another Project on this company.\nIt must be a Project that is a Template defined by template: `true`\n",
                "example": 1
              },
              "project_type_id": {
                "type": "integer",
                "description": "The Project Type ID of the Project",
                "example": 1
              },
              "public_notes": {
                "type": "string",
                "description": "The Public Notes of the Project",
                "example": "Notes"
              },
              "square_feet": {
                "type": "integer",
                "description": "The Square Footage of the Project",
                "example": 5000
              },
              "office_id": {
                "type": "integer",
                "description": "The ID of the Office of the Project",
                "example": 1
              },
              "department_ids": {
                "type": "array",
                "description": "The IDs of the Departments the Project belongs to.\nThe array should always represent all Departments, so if you have `[1, 2, 3]` and\nwant to remove deparment `2`, then send `[1, 3]`\n",
                "example": [
                  3128,
                  3127
                ],
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "ErpProjectUpdateBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "project"
        ],
        "properties": {
          "project": {
            "type": "object",
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Project",
                "example": "1VT-33778-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Project. Note: This is a free-form text field.",
                "example": "{ additional_data: [] }"
              },
              "customer_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Project's Customer",
                "example": "1VT-33778-013"
              },
              "city": {
                "type": "string",
                "description": "The City in which the ERP Project is located",
                "example": "Carpinteria"
              },
              "active": {
                "type": "boolean",
                "description": "The Active status of the ERP Project",
                "example": true
              },
              "name": {
                "type": "string",
                "description": "The Name of the ERP Project",
                "example": "P4"
              },
              "parent_origin_id": {
                "type": "string",
                "description": "The Third-party ID of the ERP Project's Parent.",
                "example": "P1-3445"
              },
              "status": {
                "type": "string",
                "description": "The Status of the ERP Project",
                "example": "In Progress"
              },
              "code": {
                "type": "string",
                "description": "The Third-party user-defined unique identifier",
                "example": "P4-J1"
              },
              "version": {
                "type": "integer",
                "description": "The Version number of the ERP Project",
                "example": 2147483647
              },
              "costs_syncing": {
                "type": "boolean",
                "description": "The Costs Syncing status of the ERP Project",
                "example": false
              },
              "archived": {
                "type": "boolean",
                "description": "The Archived status of the ERP Project",
                "example": false
              },
              "address": {
                "type": "string",
                "description": "The street Address of the ERP Project location",
                "example": "6309 Carpinteria Ave."
              },
              "state_code": {
                "type": "string",
                "description": "The Code that represents the State of the ERP Project.\nMust be a valid Subregion Code within the specified Country Code as defined\nby the ruby gem Carmen\n",
                "example": "CA"
              },
              "zip": {
                "type": "string",
                "description": "The Zip code of the ERP Project",
                "example": "93013"
              },
              "country_code": {
                "type": "string",
                "description": "The two character Code that represents the Country in which the ERP Project is located\n",
                "example": "US"
              },
              "description": {
                "type": "string",
                "description": "The Description of the ERP Project",
                "example": "Project of Procore"
              },
              "estimated_completion_date": {
                "type": "string",
                "format": "date",
                "description": "The Estimated Completion Date of the ERP Project",
                "example": "2015-05-15"
              },
              "estimated_start_date": {
                "type": "string",
                "format": "date",
                "description": "The Estimated Start Date of the ERP Project",
                "example": "2015-05-15"
              },
              "flag": {
                "type": "string",
                "enum": [
                  "Red",
                  "Yellow",
                  "Green"
                ],
                "description": "The Flag of the ERP Project",
                "example": "Yellow"
              },
              "image_id": {
                "type": "integer",
                "description": "The ID of the Image of the ERP Project",
                "example": 21
              },
              "phone": {
                "type": "string",
                "description": "The Phone number of the ERP Project",
                "example": "310-555-5555"
              },
              "program_id": {
                "type": "integer",
                "description": "The Program ID of the ERP Project",
                "example": 5
              },
              "project_number": {
                "type": "string",
                "description": "The Number of the ERP Project",
                "example": "A-2"
              },
              "project_stage_id": {
                "type": "integer",
                "description": "The Project Stage ID for the ERP Project",
                "example": 1
              },
              "project_template_id": {
                "type": "integer",
                "description": "The ID of the Project Template as designated by another Project on this company.\nIt must be a Project that is a Template defined by template: `true`\n",
                "example": 1
              },
              "project_type_id": {
                "type": "integer",
                "description": "The Project Type ID of the Project",
                "example": 1
              },
              "public_notes": {
                "type": "string",
                "description": "The Public Notes of the Project",
                "example": "Notes"
              },
              "square_feet": {
                "type": "integer",
                "description": "The Square Footage of the Project",
                "example": 5000
              },
              "office_id": {
                "type": "integer",
                "description": "The ID of the Office of the Project",
                "example": 1
              },
              "department_ids": {
                "type": "array",
                "description": "The IDs of the Departments the Project belongs to.\nThe array should always represent all Departments, so if you have `[1, 2, 3]` and\nwant to remove deparment `2`, then send `[1, 3]`\n",
                "example": [
                  3128,
                  3127
                ],
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "ErpProjectSyncBody": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "company_id",
          "updates"
        ],
        "properties": {
          "company_id": {
            "type": "integer"
          },
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Project. REQUIRED if 'origin_id' is not provided.",
                  "example": 123
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Project. REQUIRED if this ERP Project does not exist yet in Procore. If it exists, this attribute is REQUIRED if 'id' is not provided.",
                  "example": "1VT-33778-013"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Project. Note: This is a free-form text field.",
                  "example": "{ additional_data: [] }"
                },
                "customer_origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Project's Customer",
                  "example": "1VT-33778-013"
                },
                "city": {
                  "type": "string",
                  "description": "The City in which the ERP Project is located",
                  "example": "Carpinteria"
                },
                "active": {
                  "type": "boolean",
                  "description": "The Active status of the ERP Project",
                  "example": true
                },
                "name": {
                  "type": "string",
                  "description": "The Name of the ERP Project. REQUIRED if this ERP Project does not exist yet in Procore.",
                  "example": "P4"
                },
                "parent_origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of the ERP Project's Parent.",
                  "example": "P1-3445"
                },
                "status": {
                  "type": "string",
                  "description": "The Status of the ERP Project",
                  "example": "In Progress"
                },
                "code": {
                  "type": "string",
                  "description": "The Third-party user-defined unique identifier",
                  "example": "P4-J1"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version number of the ERP Project",
                  "example": 2147483647
                },
                "costs_syncing": {
                  "type": "boolean",
                  "description": "The Costs Syncing status of the ERP Project",
                  "example": false
                },
                "archived": {
                  "type": "boolean",
                  "description": "The Archived status of the ERP Project",
                  "example": false
                },
                "address": {
                  "type": "string",
                  "description": "The street Address of the ERP Project location",
                  "example": "6309 Carpinteria Ave."
                },
                "state_code": {
                  "type": "string",
                  "description": "The Code that represents the State of the ERP Project.\nMust be a valid Subregion Code within the specified Country Code as defined\nby the ruby gem Carmen\n",
                  "example": "CA"
                },
                "zip": {
                  "type": "string",
                  "description": "The Zip code of the ERP Project",
                  "example": "93013"
                },
                "country_code": {
                  "type": "string",
                  "description": "The two character Code that represents the Country in which the ERP Project is located\n",
                  "example": "US"
                },
                "description": {
                  "type": "string",
                  "description": "The Description of the ERP Project",
                  "example": "Project of Procore"
                },
                "estimated_completion_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The Estimated Completion Date of the ERP Project",
                  "example": "2015-05-15"
                },
                "estimated_start_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The Estimated Start Date of the ERP Project",
                  "example": "2015-05-15"
                },
                "flag": {
                  "type": "string",
                  "enum": [
                    "Red",
                    "Yellow",
                    "Green"
                  ],
                  "description": "The Flag of the ERP Project",
                  "example": "Yellow"
                },
                "image_id": {
                  "type": "integer",
                  "description": "The ID of the Image of the ERP Project",
                  "example": 21
                },
                "phone": {
                  "type": "string",
                  "description": "The Phone number of the ERP Project",
                  "example": "310-555-5555"
                },
                "program_id": {
                  "type": "integer",
                  "description": "The Program ID of the ERP Project",
                  "example": 5
                },
                "project_number": {
                  "type": "string",
                  "description": "The Number of the ERP Project",
                  "example": "A-2"
                },
                "project_stage_id": {
                  "type": "integer",
                  "description": "The Project Stage ID for the ERP Project",
                  "example": 1
                },
                "project_template_id": {
                  "type": "integer",
                  "description": "The ID of the Project Template as designated by another Project on this company.\nIt must be a Project that is a Template defined by template: `true`\n",
                  "example": 1
                },
                "project_type_id": {
                  "type": "integer",
                  "description": "The Project Type ID of the Project",
                  "example": 1
                },
                "public_notes": {
                  "type": "string",
                  "description": "The Public Notes of the Project",
                  "example": "Notes"
                },
                "square_feet": {
                  "type": "integer",
                  "description": "The Square Footage of the Project",
                  "example": 5000
                },
                "office_id": {
                  "type": "integer",
                  "description": "The ID of the Office of the Project",
                  "example": 1
                },
                "department_ids": {
                  "type": "array",
                  "description": "The IDs of the Departments the Project belongs to.\nThe array should always represent all Departments, so if you have `[1, 2, 3]` and\nwant to remove deparment `2`, then send `[1, 3]`\n",
                  "example": [
                    3128,
                    3127
                  ],
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "ErpStandardCostCodeCreateBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "standard_cost_code"
        ],
        "properties": {
          "standard_cost_code": {
            "type": "object",
            "required": [
              "code",
              "origin_id",
              "parent_origin_id",
              "is_group_code"
            ],
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of ERP Standard Cost Code",
                "example": "1VT-33779-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Standard Cost Code. Note: This is a free-form text field.",
                "example": "{ parent_ids: [1,2] }"
              },
              "full_code": {
                "type": "string",
                "description": "Cost code, including parent prefixes",
                "example": "2-075"
              },
              "code": {
                "type": "string",
                "description": "Cost code, not including parent prefix",
                "example": "075"
              },
              "is_active": {
                "type": "boolean",
                "description": "ERP Standard Cost Code is active flag.",
                "example": true
              },
              "is_group_code": {
                "type": "boolean",
                "description": "Flag that denotes if the ERP Standard Cost Code is a Group Code.",
                "example": false
              },
              "parent_origin_id": {
                "type": "string",
                "description": "The Parent ERP Standard Cost Code Origin ID",
                "example": "1VT-33779-012"
              },
              "name": {
                "type": "string",
                "description": "The name of the ERP Standard Cost Code.",
                "example": "Concrete Removal"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Standard Cost Code",
                "example": "14249"
              }
            }
          }
        }
      }
    },
    "ErpStandardCostCodeUpdateBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "standard_cost_code"
        ],
        "properties": {
          "standard_cost_code": {
            "type": "object",
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of ERP Standard Cost Code",
                "example": "1VT-33779-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the ERP Standard Cost Code. Note: This is a free-form text field.",
                "example": "{ parent_ids: [1,2] }"
              },
              "full_code": {
                "type": "string",
                "description": "Cost code, including parent prefixes",
                "example": "2-075"
              },
              "code": {
                "type": "string",
                "description": "Cost code, not including parent prefix",
                "example": "075"
              },
              "is_active": {
                "type": "boolean",
                "description": "ERP Standard Cost Code is active flag.",
                "example": true
              },
              "is_group_code": {
                "type": "boolean",
                "description": "Flag that denotes if the ERP Standard Cost Code is a Group Code.",
                "example": false
              },
              "parent_origin_id": {
                "type": "string",
                "description": "The Parent ERP Standard Cost Code Origin ID",
                "example": "1VT-33779-012"
              },
              "name": {
                "type": "string",
                "description": "The name of the ERP Standard Cost Code.",
                "example": "Concrete Removal"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Standard Cost Code",
                "example": "14249"
              }
            }
          }
        }
      }
    },
    "ErpStandardCostCodeSyncBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "updates"
        ],
        "properties": {
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Standard Cost Code. | REQUIRED for update if 'origin_id' is not provided.\"",
                  "example": 123
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of ERP Standard Cost Code. | REQUIRED for a update if 'id' is not provided or for any create.",
                  "example": "1VT-33779-013"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the ERP Standard Cost Code. Note: This is a free-form text field.",
                  "example": "{ parent_ids: [1,2] }"
                },
                "full_code": {
                  "type": "string",
                  "description": "Cost code, including parent prefixes.",
                  "example": "2-075"
                },
                "code": {
                  "type": "string",
                  "description": "Cost code, not including parent prefix. | REQUIRED for create.",
                  "example": "075"
                },
                "is_active": {
                  "type": "boolean",
                  "description": "ERP Standard Cost Code is active flag.",
                  "example": true
                },
                "is_group_code": {
                  "type": "boolean",
                  "description": "Flag that denotes if the ERP Standard Cost Code is a Group Code. | Required for create.",
                  "example": false
                },
                "parent_origin_id": {
                  "type": "string",
                  "description": "The Parent ERP Standard Cost Code Origin ID | Required for create.",
                  "example": "1VT-33779-012"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the ERP Standard Cost Code. | Required for create.",
                  "example": "Concrete Removal"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Standard Cost Code",
                  "example": "14249"
                }
              }
            }
          }
        }
      }
    },
    "ErpCostCodeCreateBody": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "cost_code"
        ],
        "properties": {
          "cost_code": {
            "type": "object",
            "required": [
              "origin_id"
            ],
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of ERP Cost Code",
                "example": "1VT-33779-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the Cost Code. Note: This is a free-form text field.",
                "example": "{ parent_ids: [1,2] }"
              },
              "full_code": {
                "type": "string",
                "description": "Full Cost Code code, including parent prefixes",
                "example": "02-300"
              },
              "name": {
                "type": "string",
                "description": "Erp Cost Code Name",
                "example": "Earthwork"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Cost Code",
                "example": 14249
              },
              "standard_cost_code_origin_id": {
                "type": "string",
                "description": "The origin ID of the corresponding ERP Standard Cost Code",
                "example": "1VT-33779-013"
              },
              "is_group_code": {
                "type": "boolean",
                "description": "Flag that denotes if the ERP Standard Cost Code is a Group Code",
                "example": false
              },
              "parent_origin_id": {
                "type": "string",
                "description": "The origin ID of the Parent ERP Cost Code",
                "example": "1VT-33779-012"
              },
              "standard_category_origin_ids": {
                "type": "array",
                "description": "Array of Erp Standard Categories that are assigned to this Erp Cost Code",
                "example": "[\"Sub\", \"Mat\", \"O\"]",
                "items": {
                  "type": "string"
                }
              },
              "position": {
                "type": "integer",
                "description": "Position",
                "example": 1
              },
              "code": {
                "type": "string",
                "description": "Cost code, not including parent prefix",
                "example": "300"
              }
            }
          }
        }
      }
    },
    "ErpCostCodeUpdateBody": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "cost_code"
        ],
        "properties": {
          "cost_code": {
            "type": "object",
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of ERP Cost Code",
                "example": "1VT-33779-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the Cost Code. Note: This is a free-form text field.",
                "example": "{ parent_ids: [1,2] }"
              },
              "full_code": {
                "type": "string",
                "description": "Full Cost Code code, including parent prefixes",
                "example": "02-300"
              },
              "name": {
                "type": "string",
                "description": "Erp Cost Code Name",
                "example": "Earthwork"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Cost Code",
                "example": 14249
              },
              "standard_cost_code_origin_id": {
                "type": "string",
                "description": "The origin ID of the corresponding ERP Standard Cost Code",
                "example": "1VT-33779-013"
              },
              "is_group_code": {
                "type": "boolean",
                "description": "Flag that denotes if the ERP Standard Cost Code is a Group Code",
                "example": false
              },
              "parent_origin_id": {
                "type": "string",
                "description": "The origin ID of the Parent ERP Cost Code",
                "example": "1VT-33779-012"
              },
              "standard_category_origin_ids": {
                "type": "array",
                "description": "Array of Erp Standard Categories that are assigned to this Erp Cost Code",
                "example": "[\"Sub\", \"Mat\", \"O\"]",
                "items": {
                  "type": "string"
                }
              },
              "position": {
                "type": "integer",
                "description": "Position",
                "example": 1
              },
              "code": {
                "type": "string",
                "description": "Cost code, not including parent prefix",
                "example": "300"
              }
            }
          }
        }
      }
    },
    "ErpCostCodeSyncBody": {
      "name": "Body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "updates"
        ],
        "properties": {
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Cost Code. | REQUIRED for update if 'origin_id' is not provided.\"",
                  "example": 123
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of ERP Cost Code. | REQUIRED for a update if 'id' is not provided or for any create.",
                  "example": "1VT-33779-013"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the Cost Code. Note: This is a free-form text field.",
                  "example": "{ parent_ids: [1,2] }"
                },
                "full_code": {
                  "type": "string",
                  "description": "Full Cost Code code, including parent prefixes",
                  "example": "02-300"
                },
                "name": {
                  "type": "string",
                  "description": "Erp Cost Code Name",
                  "example": "Earthwork"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Cost Code",
                  "example": 14249
                },
                "standard_cost_code_origin_id": {
                  "type": "string",
                  "description": "The origin ID of the corresponding ERP Standard Cost Code",
                  "example": "1VT-33779-013"
                },
                "is_group_code": {
                  "type": "boolean",
                  "description": "Flag that denotes if the ERP Standard Cost Code is a Group Code",
                  "example": false
                },
                "parent_origin_id": {
                  "type": "string",
                  "description": "The origin ID of the Parent ERP Cost Code",
                  "example": "1VT-33779-012"
                },
                "standard_category_origin_ids": {
                  "type": "array",
                  "description": "Array of Erp Standard Cost Codes that are assigned to this Erp Cost Code",
                  "example": "[\"Sub\", \"Mat\", \"O\"]",
                  "items": {
                    "type": "string"
                  }
                },
                "position": {
                  "type": "integer",
                  "description": "Position",
                  "example": 1
                },
                "code": {
                  "type": "string",
                  "description": "Cost code, not including parent prefix",
                  "example": "300"
                },
                "synced": {
                  "type": "boolean",
                  "description": "Is the ERP Cost Code synced with a Procore Cost Code.",
                  "example": true
                }
              }
            }
          }
        }
      }
    },
    "ErpAccountCreateBody": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "account"
        ],
        "properties": {
          "account": {
            "type": "object",
            "required": [
              "origin_id",
              "name"
            ],
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of Erp Account",
                "example": "1VT-33779-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the Account. Note: This is a free-form text field.",
                "example": "{ parent_ids: [1,2] }"
              },
              "code": {
                "type": "string",
                "description": "Erp Account code",
                "example": 1110
              },
              "name": {
                "type": "string",
                "description": "Erp Account name",
                "example": "Company Checking Account"
              },
              "parent_origin_id": {
                "type": "string",
                "description": "Origin ID of the parent Erp Account",
                "example": "1VT-33779-012"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Cost Code",
                "example": 14249
              }
            }
          }
        }
      }
    },
    "ErpAccountUpdateBody": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "account"
        ],
        "properties": {
          "account": {
            "type": "object",
            "properties": {
              "origin_id": {
                "type": "string",
                "description": "The Third-party ID of Erp Account",
                "example": "1VT-33779-013"
              },
              "origin_data": {
                "type": "string",
                "description": "Additional Third-party Metadata of the Account. Note: This is a free-form text field.",
                "example": "{ parent_ids: [1,2] }"
              },
              "code": {
                "type": "string",
                "description": "Erp Account code",
                "example": 1110
              },
              "name": {
                "type": "string",
                "description": "Erp Account name",
                "example": "Company Checking Account"
              },
              "parent_origin_id": {
                "type": "string",
                "description": "Origin ID of the parent Erp Account",
                "example": "1VT-33779-012"
              },
              "version": {
                "type": "integer",
                "description": "The Version Number of the ERP Cost Code",
                "example": 14249
              }
            }
          }
        }
      }
    },
    "ErpAccountSyncBody": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "updates"
        ],
        "properties": {
          "updates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the ERP Account. | REQUIRED for update if 'origin_id' is not provided.\"",
                  "example": 123
                },
                "origin_id": {
                  "type": "string",
                  "description": "The Third-party ID of ERP Account. | REQUIRED for a update if 'id' is not provided or for any create.",
                  "example": "1VT-33779-013"
                },
                "origin_data": {
                  "type": "string",
                  "description": "Additional Third-party Metadata of the Account. Note: This is a free-form text field.",
                  "example": "{ parent_ids: [1,2] }"
                },
                "code": {
                  "type": "string",
                  "description": "Erp Account code",
                  "example": 1110
                },
                "name": {
                  "type": "string",
                  "description": "Erp Account name | REQUIRED on create",
                  "example": "Company Checking Account"
                },
                "parent_origin_id": {
                  "type": "string",
                  "description": "Origin ID of the parent Erp Account",
                  "example": "1VT-33779-012"
                },
                "version": {
                  "type": "integer",
                  "description": "The Version Number of the ERP Cost Code",
                  "example": 14249
                }
              }
            }
          }
        }
      }
    },
    "ErpSyncEventUpdateBody": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "sync_event"
        ],
        "properties": {
          "sync_event": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Flag that denotes if the Sync Event was a success or not",
                "example": true
              },
              "duplicate_code": {
                "type": "boolean",
                "description": "Flag that denotes the Sync Event failed based on a duplicate Cost Code.",
                "example": true
              },
              "errors": {
                "type": "object",
                "properties": {
                  "max_error_version": {
                    "type": "integer",
                    "description": "Max version of the errors listed in 'error_messages'",
                    "example": null
                  },
                  "error_messages": {
                    "type": "array",
                    "description": "Array containing error messages for the Erp Sync Event",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ErpConnectionUpdateBody": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "connection"
        ],
        "properties": {
          "connection": {
            "type": "object",
            "properties": {
              "standard_cost_code_sync_complete": {
                "type": "boolean",
                "description": "Flag that signifies if a Standard Cost Code sync has completed.",
                "example": true
              },
              "standard_category_sync_complete": {
                "type": "boolean",
                "description": "Flag that signifies if a Standard Category sync has completed.",
                "example": true
              },
              "vendor_sync_complete": {
                "type": "boolean",
                "description": "Flag that signifies if a Vendor sync has completed.",
                "example": true
              },
              "vendor_type_sync_complete": {
                "type": "boolean",
                "description": "Flag that signifies if a Vendor Type sync has completed.",
                "example": true
              },
              "job_sync_complete": {
                "type": "boolean",
                "description": "Flag that signifies if a Job sync has completed.",
                "example": true
              },
              "cost_sync_complete": {
                "type": "boolean",
                "description": "Flag that signifies if a Job Cost sync has completed.",
                "example": true
              },
              "customer_sync_complete": {
                "type": "boolean",
                "description": "Flag that signifies if a Customer sync has completed.",
                "example": true
              },
              "accounts_sync_complete": {
                "type": "boolean",
                "description": "Flag that signifies if a Account sync has completed.",
                "example": true
              },
              "insurance_type_sync_complete": {
                "type": "boolean",
                "description": "Flag that signifies if a Insurance Type sync has completed.",
                "example": true
              }
            }
          }
        }
      }
    },
    "FilterStatus": {
      "name": "filters[status]",
      "in": "query",
      "type": "array",
      "description": "Array of `status`",
      "items": {
        "type": "string"
      }
    },
    "FilterRfiStatus": {
      "name": "filters[status]",
      "in": "query",
      "type": "string",
      "description": "Status",
      "enum": [
        "open",
        "closed",
        "draft"
      ]
    },
    "FilterAssignedId": {
      "name": "filters[assigned_id]",
      "in": "query",
      "type": "string",
      "description": "Assigned ID"
    },
    "FilterResponsibleContractorId": {
      "name": "filters[responsible_contractor_id]",
      "in": "query",
      "type": "string",
      "description": "Responsible contractor ID"
    },
    "FilterCostCodeId": {
      "name": "filters[cost_code_id]",
      "in": "query",
      "type": "string",
      "description": "Return item(s) within a specific Cost Code id or range of Cost Code IDs"
    },
    "FilterReceivedFromLoginInformationId": {
      "name": "filters[received_from_login_information_id]",
      "in": "query",
      "type": "string",
      "description": "Received from ID"
    },
    "FilterBallInCourtId": {
      "name": "filters[ball_in_court_id]",
      "in": "query",
      "type": "string",
      "description": "Ball in court ID"
    },
    "FilterIncludeDeleted": {
      "name": "filters[include_deleted]",
      "in": "query",
      "type": "string",
      "description": "Use 'only' for only deleted resources. Use 'with' for deleted and undeleted resources.",
      "required": false
    },
    "FilterLocationId": {
      "name": "filters[location_id]",
      "in": "query",
      "type": "integer",
      "description": "Filters by specific location (Note: Use *either* this or location_id_with_sublocations, but not both)"
    },
    "FilterLocationIds": {
      "name": "filters[location_id]",
      "in": "query",
      "type": "array",
      "description": "Return item(s) with the specified Location IDs",
      "items": {
        "type": "integer"
      }
    },
    "FilterIncludeSublocations": {
      "name": "filters[include_sublocations]",
      "in": "query",
      "type": "boolean",
      "default": false,
      "description": "Use together with `filters[location_id]`\n"
    },
    "FilterTradeId": {
      "name": "filters[trade_id]",
      "in": "query",
      "type": "integer",
      "description": "Trade ID"
    },
    "FilterCreatedById": {
      "name": "filters[created_by_id]",
      "in": "query",
      "type": "array",
      "description": "Return item(s) created by the specified User IDs",
      "items": {
        "type": "integer"
      }
    },
    "FilterAssigneeCompanyId": {
      "name": "filters[assignee_company_id]",
      "in": "query",
      "type": "array",
      "description": "Return item(s) where the assignee is associated to the specified Vendor IDs",
      "items": {
        "type": "integer"
      }
    },
    "FilterListView": {
      "name": "filters[view]",
      "in": "query",
      "type": "string",
      "enum": [
        "recycle"
      ],
      "description": "If 'recycle' show deleted Checklists."
    },
    "FilterListTypeId": {
      "name": "filters[type_id]",
      "in": "query",
      "type": "array",
      "description": "Array of Inspection Type IDs. Return item(s) associated to the specified Inspection Type IDs.",
      "items": {
        "type": "string"
      }
    },
    "FilterListPointOfContactId": {
      "name": "filters[point_of_contact_id]",
      "in": "query",
      "type": "array",
      "description": "Array of User IDs. Return item(s) where the specified User IDs are the point of contact.",
      "items": {
        "type": "string"
      }
    },
    "FilterListInspectorsId": {
      "name": "filters[inspector_id]",
      "in": "query",
      "type": "array",
      "description": "Array of User IDs. Return item(s) where the specified User IDs are inspectors.",
      "items": {
        "type": "string"
      }
    },
    "FilterListTemplateId": {
      "name": "filters[list_template_id]",
      "in": "query",
      "type": "array",
      "description": "Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.",
      "items": {
        "type": "string"
      }
    },
    "FilterListSpecSectionId": {
      "name": "filters[spec_section_id]",
      "in": "query",
      "type": "array",
      "description": "Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.",
      "items": {
        "type": "string"
      }
    },
    "FilterListResponsibleContractorId": {
      "name": "filters[responsible_contractor_id]",
      "in": "query",
      "type": "array",
      "description": "Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.",
      "items": {
        "type": "string"
      }
    },
    "FilterSearch": {
      "name": "filters[search]",
      "in": "query",
      "type": "string",
      "description": "Search query"
    },
    "FilterPunchItemStatus": {
      "name": "filters[punch_item_status]",
      "in": "query",
      "type": "string",
      "description": "Punch Item status",
      "enum": [
        "open",
        "closed",
        "pending"
      ]
    },
    "FilterPunchItemTypeId": {
      "name": "filters[punch_item_type_id]",
      "in": "query",
      "type": "integer",
      "description": "Punch Item Type ID"
    },
    "FilterPunchItemPriority": {
      "name": "filters[priority]",
      "in": "query",
      "type": "string",
      "description": "Punch item priority",
      "enum": [
        "low",
        "medium",
        "high"
      ]
    },
    "FilterApproverLoginInformationId": {
      "name": "filters[approver_login_information_id]",
      "in": "query",
      "type": "integer",
      "description": "User ID. Return item(s) where the specified User ID is an approver."
    },
    "FilterVendorId": {
      "name": "filters[vendor_id]",
      "in": "query",
      "type": "integer",
      "description": "Vendor ID"
    },
    "FilterAssigneeResponse": {
      "name": "filters[assignee_response]",
      "in": "query",
      "type": "boolean",
      "default": false,
      "description": "Assignee response approved status"
    },
    "FilterQuery": {
      "name": "filters[query]",
      "in": "query",
      "type": "string",
      "description": "Search query"
    },
    "FilterId": {
      "name": "filters[id]",
      "in": "query",
      "type": "integer",
      "description": "Return item(s) within a specific id or range of IDs",
      "required": false
    },
    "FilterCreatedAt": {
      "name": "filters[created_at]",
      "in": "query",
      "type": "string",
      "description": "Return item(s) within a specific created at iso8601 datetime range",
      "required": false
    },
    "FilterUpdatedAt": {
      "name": "filters[updated_at]",
      "in": "query",
      "type": "string",
      "description": "Return item(s) within a specific updated at iso8601 datetime range",
      "required": false
    },
    "FilterReviewedAt": {
      "name": "filters[reviewed_at]",
      "in": "query",
      "type": "string",
      "description": "Return item(s) within a specific reviewed at iso8601 datetime range",
      "required": false
    },
    "FilterDueDate": {
      "name": "filters[due_date]",
      "in": "query",
      "type": "string",
      "description": "Return item(s) within a specific due date iso8601 date range",
      "required": false
    },
    "FilterInvoicedDate": {
      "name": "filters[invoiced_date]",
      "in": "query",
      "type": "string",
      "description": "Return item(s) within a specific invoiced date iso8601 date range",
      "required": false
    },
    "FilterPaidDate": {
      "name": "filters[paid_date]",
      "in": "query",
      "type": "string",
      "description": "Return item(s) within a specific paid date iso8601 date range",
      "required": false
    },
    "FilterPrivate": {
      "name": "filters[private]",
      "in": "query",
      "type": "boolean",
      "default": false,
      "description": "Filter by `private` status"
    },
    "FilterProjectByStatus": {
      "name": "filters[by_status]",
      "in": "query",
      "type": "string",
      "description": "Filters on project status. Must be one of Active, Inactive, or All.",
      "required": false,
      "enum": [
        "All",
        "Active",
        "Inactive"
      ]
    },
    "FilterStarred": {
      "name": "filters[starred]",
      "in": "query",
      "type": "boolean",
      "default": false,
      "description": "Filter by `starred` status"
    },
    "FilterOriginId": {
      "name": "filters[origin_id]",
      "in": "query",
      "type": "string",
      "description": "Return an item with a specific origin ID",
      "required": false
    },
    "FilterInvoiceNumber": {
      "name": "filters[invoice_number]",
      "in": "query",
      "type": "string",
      "description": "Return an item with a specific invoice number",
      "required": false
    },
    "FilterPaymentDate": {
      "name": "filters[payment_date]",
      "in": "query",
      "type": "string",
      "description": "Return item(s) within a specific payment date iso8601 date range",
      "required": false
    },
    "FilterReceivedDate": {
      "name": "filters[received_date]",
      "in": "query",
      "type": "string",
      "description": "Return item(s) within a specific received date iso8601 date range",
      "required": false
    },
    "FilterPurchaseOrderContractStatus": {
      "name": "filters[status]",
      "in": "query",
      "type": "string",
      "description": "Purchase Order Contract status",
      "enum": [
        "Draft",
        "Processing",
        "Submitted",
        "Partially Received",
        "Received",
        "Approved",
        "Closed"
      ]
    },
    "FilterWorkOrderContractStatus": {
      "name": "filters[status]",
      "in": "query",
      "type": "string",
      "description": "Work Order Contract status",
      "enum": [
        "Draft",
        "Out For Bid",
        "Out For Signature",
        "Approved",
        "Complete",
        "Terminated",
        "Void"
      ]
    },
    "FilterDueBy": {
      "name": "filters[due_by]",
      "in": "query",
      "type": "string",
      "format": "date"
    },
    "FilterDateRange": {
      "name": "filters[date_range]",
      "in": "query",
      "type": "string"
    },
    "FilterStartDate": {
      "name": "filters[start_date]",
      "in": "query",
      "type": "string",
      "format": "date"
    },
    "FilterEndDate": {
      "name": "filters[end_date]",
      "in": "query",
      "type": "string",
      "format": "date"
    },
    "FilterSubmittalPackageId": {
      "name": "filters[submittal_package_id]",
      "in": "query",
      "type": "string"
    },
    "FilterResponse": {
      "name": "filters[response]",
      "in": "query",
      "type": "string"
    },
    "FilterApprovedId": {
      "name": "filters[approved_id]",
      "in": "query",
      "type": "string"
    },
    "FilterSubmittalType": {
      "name": "filters[submittal_type]",
      "in": "query",
      "type": "string"
    },
    "FilterSpecSectionId": {
      "name": "filters[spec_section_id]",
      "in": "query",
      "type": "string"
    },
    "FilterSpecDivision": {
      "name": "filters[spec_division]",
      "in": "query",
      "type": "string"
    },
    "FilterReceivedFromId": {
      "name": "filters[received_from_id]",
      "in": "query",
      "type": "string"
    },
    "FilterBallInCourt": {
      "name": "filters[ball_in_court]",
      "in": "query",
      "type": "string"
    },
    "FilterOnlyCurrentRevision": {
      "name": "filters[only_current_revision]",
      "in": "query",
      "type": "string",
      "enum": [
        1
      ]
    },
    "FilterLineItemTypeId": {
      "name": "filters[line_item_type_id]",
      "in": "query",
      "type": "integer",
      "description": "Return item(s) within a specific line item type id or range of line item type IDs",
      "required": false
    },
    "FilterPunchItemId": {
      "name": "filters[id]",
      "in": "query",
      "type": "array",
      "description": "Return item(s) with the specified IDs",
      "items": {
        "type": "integer"
      },
      "required": false
    },
    "FilterObservationStatus": {
      "name": "filters[status]",
      "in": "query",
      "type": "array",
      "description": "Return item(s) with the specified statuses. The mapping is as follows:\n```\n  0: Initiated\n  1: Ready For reviewed\n  2: Not Accepted\n  3: Closed\n```\n",
      "items": {
        "type": "integer"
      },
      "enum": [
        0,
        1,
        2,
        3
      ]
    },
    "FilterObservationTypeId": {
      "name": "filters[type_id]",
      "in": "query",
      "type": "array",
      "description": "Return item(s) with the specified Observation Type IDs",
      "items": {
        "type": "integer"
      }
    },
    "FilterObservationPriority": {
      "name": "filters[priority]",
      "in": "query",
      "type": "array",
      "description": "Return item(s) with the specified priorities.\n",
      "items": {
        "type": "string"
      },
      "enum": [
        "Low",
        "Medium",
        "High",
        "Urgent"
      ]
    },
    "FilterObservationAssigneeId": {
      "name": "filters[assignee_id]",
      "in": "query",
      "type": "array",
      "description": "Return item(s) assigned to the specified User IDs",
      "items": {
        "type": "integer"
      },
      "required": false
    },
    "FilterTradeIds": {
      "name": "filters[trade_id]",
      "in": "query",
      "type": "array",
      "description": "Return item(s) with the specified Trade IDs.",
      "items": {
        "type": "integer"
      }
    },
    "TransmittalCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "transmittal"
        ],
        "properties": {
          "transmittal": {
            "type": "object",
            "required": [
              "to_recipient_ids"
            ],
            "properties": {
              "actions": {
                "type": "array",
                "description": "Actions as noted, hit the `potential_actions` endpoint for the key\/value pairs",
                "items": {
                  "type": "integer",
                  "description": "Numeric key for the action",
                  "example": 1
                }
              },
              "cc_recipient_ids": {
                "type": "array",
                "description": "List of recipient IDs",
                "items": {
                  "type": "integer",
                  "example": 999
                }
              },
              "due_date": {
                "type": "string",
                "description": "Due date",
                "format": "date",
                "example": "2017-12-25T00:00:00.000Z"
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": 102
              },
              "notes": {
                "type": "string",
                "description": "Comments",
                "example": "Example comment"
              },
              "private": {
                "type": "boolean",
                "description": "Privacy flag"
              },
              "reasons": {
                "type": "array",
                "description": "Submitted for reasons, hit the `potential_reasons` endpoint for the key\/value pairs",
                "items": {
                  "type": "integer",
                  "description": "Numeric key for the reason",
                  "example": 1
                }
              },
              "send_emails": {
                "type": "boolean",
                "description": "Whether or not this transmittal creation should trigger the normal transmittal creation notification emails. True sends the emails, while false, or omission, will not send them.\n"
              },
              "sent_method": {
                "type": "string",
                "description": "Sent method",
                "enum": [
                  "Attached",
                  "Under Separate Cover"
                ],
                "example": "Attached"
              },
              "subject": {
                "type": "string",
                "description": "Subject",
                "example": "Attic Stock - Paint"
              },
              "to_recipient_ids": {
                "type": "array",
                "description": "List of To recipient user IDs",
                "items": {
                  "type": "integer",
                  "example": 99
                }
              },
              "via_method": {
                "type": "string",
                "description": "If sent_method is 'Under Separate Cover', describes the separate cover method",
                "enum": [
                  "Email",
                  "US Mail",
                  "Hand Delivery",
                  "FedEx",
                  "UPS",
                  "DHL",
                  "Express Mail",
                  "Fax",
                  "Other"
                ],
                "example": "Email"
              },
              "via_other": {
                "type": "string",
                "description": "Describes via_method 'Other' method",
                "example": "Carrier pigeon"
              }
            }
          }
        }
      }
    },
    "TransmittalUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "transmittal"
        ],
        "properties": {
          "transmittal": {
            "type": "object",
            "properties": {
              "actions": {
                "type": "array",
                "description": "Actions as noted, hit the `potential_actions` endpoint for the key\/value pairs",
                "items": {
                  "type": "integer",
                  "description": "Numeric key for the action",
                  "example": 1
                }
              },
              "cc_recipient_ids": {
                "type": "array",
                "description": "List of recipient IDs",
                "items": {
                  "type": "integer",
                  "example": 999
                }
              },
              "due_date": {
                "type": "string",
                "description": "Due date",
                "format": "date",
                "example": "2017-12-25T00:00:00.000Z"
              },
              "number": {
                "type": "string",
                "description": "Number",
                "example": 109
              },
              "notes": {
                "type": "string",
                "description": "Comments",
                "example": "Example comments"
              },
              "private": {
                "type": "boolean",
                "description": "Privacy flag",
                "example": false
              },
              "reasons": {
                "type": "array",
                "description": "Submitted for reasons, hit the `potential_reasons` endpoint for the key\/value pairs",
                "items": {
                  "type": "integer",
                  "description": "Numeric key for the reason",
                  "example": 1
                }
              },
              "sent_method": {
                "type": "string",
                "description": "Sent method",
                "enum": [
                  "Attached",
                  "Under Separate Cover"
                ],
                "example": "Under Separate Cover"
              },
              "subject": {
                "type": "string",
                "description": "Subject",
                "example": "Attic Stock - Sprinklers"
              },
              "to_recipient_ids": {
                "type": "array",
                "description": "List of To recipient user IDs",
                "items": {
                  "type": "integer",
                  "example": 999
                }
              },
              "via_method": {
                "type": "string",
                "description": "If sent_method is 'Under Separate Cover', describes the separate cover method",
                "enum": [
                  "Email",
                  "US Mail",
                  "Hand Delivery",
                  "FedEx",
                  "UPS",
                  "DHL",
                  "Express Mail",
                  "Fax",
                  "Other"
                ],
                "example": "Other"
              },
              "via_other": {
                "type": "string",
                "description": "Describes via_method 'Other' method",
                "example": "Holocommunicator"
              }
            }
          }
        }
      }
    },
    "TransmittalItemCreateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "item"
        ],
        "properties": {
          "item": {
            "type": "object",
            "required": [
              "attachment_type"
            ],
            "properties": {
              "attachment_id": {
                "type": "integer",
                "description": "If attachment_type is a Procore record, the ID for that record",
                "example": 999
              },
              "attachment_type": {
                "type": "string",
                "description": "Attachment type",
                "enum": [
                  "Attic Stock",
                  "CDs",
                  "Commitment Contract",
                  "Communication",
                  "Document",
                  "Other",
                  "Plans",
                  "Potential Change Order",
                  "Prime Contract",
                  "Prints",
                  "Punchlist Item",
                  "Purchase Order Contract",
                  "RFI",
                  "Samples",
                  "Shop Drawings",
                  "Submittal Log",
                  "Submittal Package"
                ]
              },
              "copies": {
                "type": "integer",
                "description": "Number of copies",
                "default": 1
              },
              "date": {
                "type": "string",
                "description": "Date",
                "format": "date",
                "example": "2016-10-31T00:00:00.000Z"
              },
              "description": {
                "type": "string",
                "description": "Description"
              }
            }
          }
        }
      }
    },
    "TransmittalItemUpdateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "item"
        ],
        "properties": {
          "item": {
            "type": "object",
            "required": [
              "attachment_type"
            ],
            "properties": {
              "attachment_id": {
                "type": "integer",
                "description": "If attachment_type is a Procore record, the ID for that record",
                "example": 999
              },
              "attachment_type": {
                "type": "string",
                "description": "Attachment type",
                "enum": [
                  "Attic Stock",
                  "CDs",
                  "Commitment Contract",
                  "Communication",
                  "Document",
                  "Other",
                  "Plans",
                  "Potential Change Order",
                  "Prime Contract",
                  "Prints",
                  "Punchlist Item",
                  "Purchase Order Contract",
                  "RFI",
                  "Samples",
                  "Shop Drawings",
                  "Submittal Log",
                  "Submittal Package"
                ]
              },
              "copies": {
                "type": "integer",
                "description": "Number of copies",
                "default": 1
              },
              "date": {
                "type": "string",
                "description": "Date",
                "format": "date",
                "example": "2016-10-31T00:00:00.000Z"
              },
              "description": {
                "type": "string",
                "description": "Description"
              }
            }
          }
        }
      }
    },
    "PermissionTemplateBody": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "title": "Body",
        "type": "object",
        "required": [
          "tools"
        ],
        "properties": {
          "tools": {
            "type": "array",
            "description": "collection of tools to be updated",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "name of tool to be updated"
                },
                "user_access_level": {
                  "type": "integer",
                  "description": "access level of the tool"
                }
              }
            }
          }
        },
        "example": {
          "tools": [
            {
              "name": "directory",
              "user_access_level": 2
            },
            {
              "name": "reports",
              "user_access_level": 3
            }
          ]
        }
      }
    }
  }
}
